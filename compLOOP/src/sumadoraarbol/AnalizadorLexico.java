/* The following code was generated by JFlex 1.7.0 */

/* primera parte: no hace falta poner nada */
package sumadoraarbol;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/base/digitos.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\60\1\77\1\101\1\101\1\100\22\0\1\43\1\73\1\41"+
    "\1\44\1\0\1\52\2\0\1\54\1\55\1\50\1\46\1\63\1\47"+
    "\1\37\1\51\1\36\11\35\1\74\1\0\1\72\1\45\1\71\2\0"+
    "\1\65\1\75\1\1\1\27\1\25\2\42\1\33\1\31\2\42\1\26"+
    "\1\14\1\66\1\67\1\6\1\42\1\70\1\24\7\42\1\56\1\0"+
    "\1\57\1\0\1\53\1\0\1\3\1\17\1\20\1\13\1\5\1\40"+
    "\1\22\1\32\1\12\2\61\1\2\1\30\1\23\1\10\1\11\1\61"+
    "\1\7\1\4\1\15\1\16\1\21\1\61\1\34\1\61\1\76\1\0"+
    "\1\62\10\0\1\101\u0240\0\1\64\u1d61\0\1\101\1\101\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\1\2\4\3\1\2\5\3"+
    "\4\2\1\3\1\2\1\3\1\2\2\4\1\5\1\3"+
    "\1\1\1\2\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\2\2\1\25\1\26\1\1\1\27\2\30\2\2"+
    "\1\0\2\3\1\31\1\3\1\32\4\3\2\2\5\3"+
    "\2\2\6\3\1\32\6\2\1\3\1\2\1\3\1\2"+
    "\3\0\1\3\1\0\1\33\1\0\1\34\1\35\1\36"+
    "\1\2\1\37\1\40\1\6\3\2\11\3\3\2\10\3"+
    "\2\2\10\3\10\2\1\3\1\2\1\3\1\2\1\41"+
    "\1\3\1\0\1\42\2\2\1\43\1\3\1\44\1\45"+
    "\5\3\5\2\1\46\1\47\10\3\2\2\6\3\1\50"+
    "\1\3\1\45\4\2\1\43\3\2\1\3\2\2\1\3"+
    "\1\2\1\3\1\51\1\2\6\3\5\2\4\3\1\52"+
    "\3\3\2\2\6\3\1\53\4\2\1\52\2\2\1\3"+
    "\2\2\2\54\1\55\1\2\3\3\1\56\2\3\4\2"+
    "\7\3\2\2\2\3\1\57\1\60\2\3\6\2\1\3"+
    "\3\2\5\3\3\2\2\3\1\61\4\3\1\62\1\2"+
    "\5\3\6\2\1\3\1\61\2\2\1\3\1\63\1\64"+
    "\1\65\1\66\1\2\1\67\1\2\5\3\1\70\1\71"+
    "\1\72\1\73\4\3\1\63\1\64\1\65\1\66\2\2"+
    "\1\71\2\2\1\74\1\2\2\75\10\3\5\2\1\76"+
    "\1\3\1\77\5\3\1\77\2\2\1\100\1\101\1\102"+
    "\1\103\1\3\1\104\1\3\1\100\1\103\1\102\2\3"+
    "\1\105\1\3\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\u098a"+
    "\0\u09cc\0\102\0\102\0\u0a0e\0\102\0\102\0\u0a50\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2"+
    "\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2"+
    "\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u0738\0\u06f6\0\u145e"+
    "\0\u14a0\0\u07bc\0\102\0\u14e2\0\102\0\102\0\102\0\u1524"+
    "\0\u07fe\0\102\0\102\0\u1566\0\u15a8\0\u0b16\0\u15ea\0\u162c"+
    "\0\u0bdc\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa"+
    "\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a"+
    "\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a"+
    "\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u145e\0\u207c\0\u20be\0\u07fe\0\u2100\0\u2142\0\u0108\0\u2184"+
    "\0\u0108\0\u0108\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u0108\0\u0108\0\u245a\0\u249c"+
    "\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac"+
    "\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u0108\0\u287a"+
    "\0\u07fe\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u07fe\0\u29c4\0\u2a06"+
    "\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u07fe"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4"+
    "\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4"+
    "\0\u0108\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2"+
    "\0\u3204\0\u3246\0\u3288\0\u32ca\0\u0108\0\u330c\0\u334e\0\u3390"+
    "\0\u33d2\0\u07fe\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u0108"+
    "\0\u07fe\0\u0108\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u0108\0\u3666"+
    "\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876"+
    "\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86"+
    "\0\u3ac8\0\u0108\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54"+
    "\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64"+
    "\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074"+
    "\0\u0108\0\u40b6\0\u40f8\0\u413a\0\u417c\0\u07fe\0\u41be\0\u4200"+
    "\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u438c\0\u43ce\0\u4410"+
    "\0\u4452\0\u4494\0\u44d6\0\u07fe\0\u4518\0\u455a\0\u459c\0\u0108"+
    "\0\u0108\0\u0108\0\u0108\0\u45de\0\u07fe\0\u4620\0\u4662\0\u46a4"+
    "\0\u46e6\0\u4728\0\u476a\0\u0108\0\u07fe\0\u0108\0\u0108\0\u47ac"+
    "\0\u47ee\0\u4830\0\u4872\0\u07fe\0\u07fe\0\u07fe\0\u07fe\0\u48b4"+
    "\0\u48f6\0\u0108\0\u4938\0\u497a\0\u0108\0\u49bc\0\u07fe\0\u0108"+
    "\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a\0\u4bcc"+
    "\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u0108\0\u4d58\0\u0108"+
    "\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u07fe\0\u4ee4\0\u4f26"+
    "\0\u07fe\0\u07fe\0\u0108\0\u0108\0\u4f68\0\u0108\0\u4faa\0\u0108"+
    "\0\u07fe\0\u07fe\0\u4fec\0\u502e\0\u0108\0\u5070\0\u0108";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\13\1\14\1\15\1\16\1\5\1\17"+
    "\1\20\1\21\1\5\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\2\1\51\1\52\1\53\1\54"+
    "\1\55\1\5\1\2\1\56\1\57\1\60\1\40\1\61"+
    "\1\40\1\62\1\63\1\64\1\65\1\40\1\5\1\66"+
    "\1\67\104\0\1\40\1\70\5\40\1\71\26\40\1\0"+
    "\1\40\1\0\1\40\10\0\1\72\5\0\2\40\2\0"+
    "\4\40\4\0\2\40\4\0\4\5\1\73\2\5\1\74"+
    "\26\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\36\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\4\5\1\76\4\5\1\77"+
    "\24\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\1\5\1\100"+
    "\1\5\1\101\16\5\1\102\10\5\1\103\2\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\6\40\1\104\6\40\1\105"+
    "\20\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\2\5\1\106"+
    "\1\5\1\107\31\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\6\5\1\110\27\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\22\5\1\111\13\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\4\5\1\112\31\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\4\40\1\113\4\40\1\114\24\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\4\0\2\5\1\115\33\5\1\0\1\5\1\0"+
    "\1\5\10\0\1\75\5\0\2\5\2\0\4\5\4\0"+
    "\2\5\4\0\7\5\1\116\26\5\1\0\1\5\1\0"+
    "\1\5\10\0\1\75\5\0\2\5\2\0\4\5\4\0"+
    "\2\5\4\0\2\5\1\117\4\5\1\120\26\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\4\5\1\121\31\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\15\5\1\122\20\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\11\40\1\123\24\40\1\0"+
    "\1\40\1\0\1\40\10\0\1\72\5\0\2\40\2\0"+
    "\4\40\4\0\2\40\4\0\1\40\1\124\1\40\1\125"+
    "\16\40\1\126\10\40\1\127\2\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\4\0\4\40\1\130\31\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\4\0\4\40\1\131\31\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\4\0\11\5\1\132\24\5\1\0\1\5\1\0"+
    "\1\5\10\0\1\75\5\0\2\5\2\0\4\5\4\0"+
    "\2\5\4\0\22\40\1\133\13\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\4\0\2\5\1\134\33\5\1\0\1\5\1\0"+
    "\1\5\10\0\1\75\5\0\2\5\2\0\4\5\4\0"+
    "\2\5\4\0\2\40\1\135\33\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\40\0\2\33\1\136\77\0\2\137\1\136\77\0"+
    "\2\140\44\0\2\5\1\141\33\5\1\0\1\5\1\0"+
    "\1\5\10\0\1\75\5\0\2\5\2\0\4\5\4\0"+
    "\2\5\4\0\36\142\1\0\1\142\1\143\2\142\15\0"+
    "\1\142\3\0\4\142\4\0\2\142\4\0\36\40\1\0"+
    "\1\40\1\0\1\40\10\0\1\72\5\0\2\40\2\0"+
    "\4\40\4\0\2\40\46\0\1\144\37\0\40\42\1\0"+
    "\2\42\1\0\13\42\1\0\1\42\3\0\4\42\4\0"+
    "\2\42\50\0\1\145\102\0\1\146\102\0\1\147\33\0"+
    "\36\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\1\40\1\150\2\40\4\0\2\40\4\0"+
    "\36\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\3\40\1\151\4\0\2\40\50\0\1\152"+
    "\57\0\1\66\53\0\1\153\3\0\2\40\1\154\33\40"+
    "\1\0\1\40\1\0\1\40\10\0\1\72\5\0\2\40"+
    "\2\0\4\40\4\0\2\40\4\0\22\40\1\155\13\40"+
    "\1\0\1\40\1\0\1\40\10\0\1\72\5\0\2\40"+
    "\2\0\4\40\4\0\2\40\4\0\36\156\1\0\1\156"+
    "\1\0\1\156\16\0\2\156\2\0\4\156\4\0\2\156"+
    "\4\0\4\5\1\157\31\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\21\5\1\160\14\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\36\161\1\0\1\161\1\0\1\161\16\0\2\161"+
    "\2\0\4\161\4\0\2\161\4\0\22\5\1\162\13\5"+
    "\1\0\1\5\1\0\1\5\10\0\1\75\5\0\2\5"+
    "\2\0\4\5\4\0\2\5\4\0\22\5\1\163\13\5"+
    "\1\0\1\5\1\0\1\5\10\0\1\75\5\0\2\5"+
    "\2\0\4\5\4\0\2\5\4\0\11\5\1\164\24\5"+
    "\1\0\1\5\1\0\1\5\10\0\1\75\5\0\2\5"+
    "\2\0\4\5\4\0\2\5\4\0\17\5\1\165\16\5"+
    "\1\0\1\5\1\0\1\5\10\0\1\75\5\0\2\5"+
    "\2\0\4\5\4\0\2\5\4\0\14\5\1\166\21\5"+
    "\1\0\1\5\1\0\1\5\10\0\1\75\5\0\2\5"+
    "\2\0\4\5\4\0\2\5\4\0\14\5\1\167\21\5"+
    "\1\0\1\5\1\0\1\5\10\0\1\75\5\0\2\5"+
    "\2\0\4\5\4\0\2\5\4\0\7\40\1\170\1\40"+
    "\1\171\24\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\16\40"+
    "\1\172\17\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\11\5"+
    "\1\173\24\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\2\5"+
    "\1\174\33\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\11\5"+
    "\1\175\24\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\3\5"+
    "\1\176\13\5\1\177\16\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\3\5\1\200\13\5\1\201\1\202\15\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\14\40\1\203\21\40\1\0"+
    "\1\40\1\0\1\40\10\0\1\72\5\0\2\40\2\0"+
    "\4\40\4\0\2\40\4\0\4\40\1\204\31\40\1\0"+
    "\1\40\1\0\1\40\10\0\1\72\5\0\2\40\2\0"+
    "\4\40\4\0\2\40\4\0\22\5\1\205\13\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\7\5\1\206\26\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\12\5\1\207\23\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\3\5\1\210\16\5\1\211"+
    "\13\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\6\5\1\212"+
    "\27\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\1\5\1\213"+
    "\2\5\1\214\31\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\22\40\1\215\13\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\11\40\1\216\24\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\17\40\1\217\16\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\14\40\1\220\21\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\14\40\1\221\21\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\4\40\1\222\31\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\3\40\1\223\13\40\1\224\16\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\4\0\4\5\1\225\31\5\1\0\1\5\1\0"+
    "\1\5\10\0\1\75\5\0\2\5\2\0\4\5\4\0"+
    "\2\5\4\0\17\40\1\226\16\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\4\0\17\5\1\227\16\5\1\0\1\5\1\0"+
    "\1\5\10\0\1\75\5\0\2\5\2\0\4\5\4\0"+
    "\2\5\4\0\17\40\1\230\16\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\40\0\1\231\1\140\44\0\1\5\1\232\34\5"+
    "\1\0\1\5\1\0\1\5\10\0\1\75\5\0\2\5"+
    "\2\0\4\5\4\0\2\5\46\0\1\233\37\0\26\40"+
    "\1\234\7\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\3\40"+
    "\1\235\32\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\3\40"+
    "\1\236\32\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\6\5"+
    "\1\237\27\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\2\5"+
    "\1\240\33\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\7\5"+
    "\1\241\26\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\7\5"+
    "\1\242\26\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\27\5"+
    "\1\243\6\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\6\5"+
    "\1\244\27\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\4\5"+
    "\1\245\2\5\1\246\26\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\11\5\1\247\24\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\10\40\1\250\3\40\1\251\21\40\1\0\1\40"+
    "\1\0\1\40\10\0\1\72\5\0\2\40\2\0\4\40"+
    "\4\0\2\40\4\0\20\40\1\252\1\40\1\253\13\40"+
    "\1\0\1\40\1\0\1\40\10\0\1\72\5\0\2\40"+
    "\2\0\4\40\4\0\2\40\4\0\1\40\1\254\34\40"+
    "\1\0\1\40\1\0\1\40\10\0\1\72\5\0\2\40"+
    "\2\0\4\40\4\0\2\40\4\0\36\5\1\0\1\5"+
    "\1\0\1\5\10\0\1\75\5\0\2\5\2\0\4\5"+
    "\4\0\1\5\1\255\4\0\1\5\1\256\34\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\22\5\1\257\13\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\14\5\1\260\21\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\1\5\1\261\4\5\1\262"+
    "\27\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\12\5\1\263"+
    "\1\5\1\264\21\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\6\5\1\265\27\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\7\5\1\266\26\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\7\40\1\267\26\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\22\40\1\270\13\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\21\5\1\271\14\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\1\5\1\272\34\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\4\5\1\273\31\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\4\5\1\274\31\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\3\5\1\275\32\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\12\5\1\276\23\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\7\5\1\277\26\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\20\5\1\300\15\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\7\40\1\301\26\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\27\40\1\302\6\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\6\40\1\303\27\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\7\40\1\304\26\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\11\40\1\305\24\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\6\40\1\306\27\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\12\40\1\307\1\40\1\310\21\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\4\0\6\40\1\311\27\40\1\0\1\40\1\0"+
    "\1\40\10\0\1\72\5\0\2\40\2\0\4\40\4\0"+
    "\2\40\4\0\22\5\1\312\13\5\1\0\1\5\1\0"+
    "\1\5\10\0\1\75\5\0\2\5\2\0\4\5\4\0"+
    "\2\5\4\0\1\40\1\313\4\40\1\314\27\40\1\0"+
    "\1\40\1\0\1\40\10\0\1\72\5\0\2\40\2\0"+
    "\4\40\4\0\2\40\4\0\4\5\1\315\31\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\4\0\4\40\1\316\31\40\1\0"+
    "\1\40\1\0\1\40\10\0\1\72\5\0\2\40\2\0"+
    "\4\40\4\0\2\40\4\0\3\5\1\317\32\5\1\0"+
    "\1\5\1\0\1\5\10\0\1\75\5\0\2\5\2\0"+
    "\4\5\4\0\2\5\46\0\1\55\37\0\4\40\1\320"+
    "\31\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\14\40\1\321"+
    "\21\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\6\5\1\322"+
    "\27\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\11\5\1\323"+
    "\24\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\11\5\1\324"+
    "\24\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\6\5\1\325"+
    "\27\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\22\5\1\326"+
    "\13\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\4\5\1\327"+
    "\31\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\11\40\1\330"+
    "\24\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\4\40\1\331"+
    "\31\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\2\40\1\332"+
    "\33\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\17\40\1\333"+
    "\16\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\11\40\1\334"+
    "\24\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\17\5\1\335"+
    "\16\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\2\5\1\336"+
    "\33\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\15\5\1\337"+
    "\20\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\4\5\1\340"+
    "\31\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\4\5\1\341"+
    "\31\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\6\5\1\342"+
    "\27\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\4\5\1\343"+
    "\31\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\1\5\1\344"+
    "\34\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\12\40\1\345"+
    "\23\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\14\40\1\346"+
    "\21\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\4\5\1\347"+
    "\31\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\4\5\1\350"+
    "\31\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\22\5\1\351"+
    "\13\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\22\5\1\352"+
    "\13\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\14\5\1\353"+
    "\21\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\2\5\1\354"+
    "\33\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\7\5\1\355"+
    "\26\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\11\40\1\356"+
    "\24\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\11\40\1\357"+
    "\24\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\22\40\1\360"+
    "\13\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\4\40\1\361"+
    "\31\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\4\40\1\362"+
    "\31\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\6\40\1\363"+
    "\27\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\4\40\1\364"+
    "\31\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\14\5\1\365"+
    "\21\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\15\40\1\366"+
    "\20\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\4\40\1\367"+
    "\31\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\6\5\1\370"+
    "\27\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\6\40\1\371"+
    "\27\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\7\5\1\372"+
    "\26\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\6\40\1\373"+
    "\27\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\11\5\1\374"+
    "\24\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\22\5\1\375"+
    "\13\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\16\5\1\376"+
    "\17\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\7\5\1\377"+
    "\26\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\17\5\1\u0100"+
    "\16\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\22\5\1\u0101"+
    "\13\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\4\40\1\u0102"+
    "\31\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\21\40\1\u0103"+
    "\14\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\12\40\1\u0104"+
    "\23\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\11\40\1\u0105"+
    "\24\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\17\40\1\u0104"+
    "\16\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\11\5\1\u0106"+
    "\24\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\22\5\1\u0107"+
    "\13\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\11\5\1\u0108"+
    "\24\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\27\5\1\u0109"+
    "\6\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\15\5\1\u010a"+
    "\20\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\27\5\1\u010b"+
    "\6\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\20\5\1\u010c"+
    "\15\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\7\40\1\u010d"+
    "\26\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\6\40\1\u010e"+
    "\27\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\22\5\1\u010f"+
    "\13\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\2\5\1\u0110"+
    "\33\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\2\5\1\u0111"+
    "\33\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\7\5\1\u0112"+
    "\26\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\6\5\1\u0113"+
    "\27\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\12\5\1\u0114"+
    "\23\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\22\40\1\u0115"+
    "\13\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\16\40\1\u0116"+
    "\17\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\17\40\1\u0117"+
    "\16\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\22\40\1\u0118"+
    "\13\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\15\40\1\u0119"+
    "\20\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\27\40\1\u011a"+
    "\6\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\6\5\1\u011b"+
    "\27\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\11\40\1\u011c"+
    "\24\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\27\40\1\u011d"+
    "\6\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\15\40\1\u011e"+
    "\20\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\14\5\1\u011f"+
    "\21\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\2\5\1\u0120"+
    "\33\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\11\5\1\u0121"+
    "\24\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\4\5\1\u0122"+
    "\31\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\12\5\1\u0123"+
    "\23\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\4\5\4\0\2\5\4\0\12\40\1\u0124"+
    "\23\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\11\40\1\332"+
    "\24\40\1\0\1\40\1\0\1\40\10\0\1\72\5\0"+
    "\2\40\2\0\4\40\4\0\2\40\4\0\2\40\1\u0125"+
    "\4\40\1\u0125\26\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\10\40\1\u0126\25\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\10\5\1\u0127\25\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\17\5\1\u0128\16\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\6\5\1\u0129\27\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\4\5\1\u012a\31\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\17\5\1\u012b\16\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\4\5\1\u012c\31\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\4\5\1\u012d\31\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\3\40\1\u012e\32\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\2\40\1\u012f\33\40\1\0\1\40\1\0\1\40\10\0"+
    "\1\72\5\0\2\40\2\0\4\40\4\0\2\40\4\0"+
    "\14\5\1\u0130\21\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\22\5\1\u0131\13\5\1\0\1\5\1\0\1\5\10\0"+
    "\1\75\5\0\2\5\2\0\4\5\4\0\2\5\4\0"+
    "\36\5\1\0\1\5\1\0\1\5\10\0\1\75\5\0"+
    "\2\5\2\0\1\u0132\3\5\4\0\2\5\4\0\15\5"+
    "\1\u0133\20\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\4\5"+
    "\1\u0134\31\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\2\40"+
    "\1\u0135\33\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\11\40"+
    "\1\u0136\24\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\4\40"+
    "\1\u0137\31\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\12\40"+
    "\1\u0138\23\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\17\40"+
    "\1\u0139\16\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\4\40"+
    "\1\u013a\31\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\2\5"+
    "\1\u013b\33\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\6\40"+
    "\1\u013c\27\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\4\40"+
    "\1\u013d\31\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\17\40"+
    "\1\u013e\16\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\27\5"+
    "\1\u013f\6\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\6\5"+
    "\1\u0140\27\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\6\5"+
    "\1\u0141\27\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\3\5"+
    "\1\u0142\32\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\4\5"+
    "\1\u0143\31\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\2\40"+
    "\1\u0144\33\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\3\40"+
    "\1\u0145\32\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\2\40"+
    "\1\u0146\33\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\2\5"+
    "\1\u0147\33\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\11\5"+
    "\1\u0148\24\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\22\5"+
    "\1\u0149\13\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\14\5"+
    "\1\u014a\21\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\22\5"+
    "\1\u014b\13\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\6\5"+
    "\1\u014c\27\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\3\40"+
    "\1\u014d\32\40\1\0\1\40\1\0\1\40\10\0\1\72"+
    "\5\0\2\40\2\0\4\40\4\0\2\40\4\0\4\5"+
    "\1\u014e\31\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\7\5"+
    "\1\u014f\26\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\4\5\4\0\2\5\4\0\24\5"+
    "\1\u0150\11\5\1\0\1\5\1\0\1\5\10\0\1\75"+
    "\5\0\2\5\2\0\3\5\1\u0151\4\0\1\u0152\1\5"+
    "\4\0\17\5\1\u0153\16\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\6\5\1\317\27\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\6\40\1\u0154\27\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\6\40\1\u0155\27\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\3\40\1\u0156\32\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\4\40\1\u0157\31\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\14\40\1\u0158\21\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\22\40\1\u0159\13\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\3\5\1\u015a\32\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\22\40\1\u015b\13\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\14\40\1\u015c\21\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\7\5\1\u015d\26\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\12\40\1\u015e\23\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\1\40\1\u015f\34\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\1\5\1\u0160\34\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\2\5\1\u0161\33\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\14\5\1\u0162\21\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\7\5\1\u0163\26\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\14\5\1\u0164\21\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\22\5\1\u0165\13\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\4\5\1\u0166\31\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\7\5\1\u0167\26\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\14\5\1\u0168\21\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\7\40\1\u0169\26\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\14\40\1\u016a\21\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\14\40\1\u016b\21\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\7\40\1\u016c\26\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\4\40\1\u016d\31\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\6\5\1\u016e\27\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\2\5\1\u016f\33\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\6\5\1\u0170\27\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\2\5\1\u0171\33\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\14\5\1\u0172\21\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\2\5\1\u0173\33\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\1\5\1\u0174\34\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\7\5\1\u0175\26\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\6\40\1\u0176\27\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\2\40\1\u0177\33\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\2\40\1\u0178\33\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\6\40\1\u0179\27\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\3\40\1\u017a\32\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\6\5\1\u017b\27\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\6\5\1\u017c\27\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\4\5\1\u017d\31\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\1\5\1\u017e\34\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\4\5\1\u017f\31\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\6\5\1\u0180\27\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\6\40\1\u0181\27\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\6\40\1\u0182\27\40\1\0\1\40\1\0\1\40"+
    "\10\0\1\72\5\0\2\40\2\0\4\40\4\0\2\40"+
    "\4\0\6\5\1\u0183\27\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\2\5\1\u0184\33\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\7\5\1\u0185\26\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\22\5\1\u0186\13\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\4\0\7\5\1\u0187\26\5\1\0\1\5\1\0\1\5"+
    "\10\0\1\75\5\0\2\5\2\0\4\5\4\0\2\5"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20658];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\43\1\12\11\2\1\2\11\1\1\2\11"+
    "\3\1\1\0\43\1\3\0\1\1\1\0\1\11\1\0"+
    "\3\11\2\1\2\11\57\1\1\0\354\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<token> tokens;
    public int tabulaciones;
public ArrayList<Simbolos> sim;

public void add(String nuevo) {

        boolean bandera = false;
        String a = nuevo;
       
        int numero = 0;
        if (sim.size() == 0) {
            Simbolos sim2 = new Simbolos();
            sim2.setCantidad(1);
            sim2.setValor(a);
            sim.add(sim2);
        } else {
            for (int x = 0; x < sim.size(); x++) {

                Simbolos sim1 = sim.get(x);

                if (sim1.getValor().equals(a)) {
                    bandera = true;
                    numero = x;

                    x = sim.size();
                } else {
                    bandera = false;
                }
            }
            if (bandera == true) {
                
                Simbolos val = sim.get(numero);
                int n = val.getCantidad();
                n = n + 1;
                val.setCantidad(n);
                sim.remove(numero);
                sim.add(val);
                   
            } else {
              
                Simbolos sim2 = new Simbolos();
                sim2.setCantidad(1);
                sim2.setValor(a);
                sim.add(sim2);
            }
        }
           
    }





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
      this.tokens = new ArrayList<>();
    this.sim = new ArrayList<>();
    this.tabulaciones = 0;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   System.out.println("Fin de archivo encontrado");
  return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Error Léxico \"" + yytext() + "\" ["+ (yyline+1) + ":"+ (yycolumn+1) + ":"+ yychar + "]");
            return new Symbol(sym.error);
            } 
            // fall through
          case 71: break;
          case 2: 
            { //tokens.add(new token("VARIABLE_CLASE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("VARIABLE CLASE");
            return new Symbol(sym.VARIABLE_CLASE, new token("VARIABLE_CLASE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 72: break;
          case 3: 
            { //tokens.add(new token("VARIABLE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("VARIABLE");
            return new Symbol(sym.VARIABLE, new token("VARIABLE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 73: break;
          case 4: 
            { //tokens.add(new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("NUMEROS DECIMALES");
            return new Symbol(sym.TIPO_DATO_CUP, new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 74: break;
          case 5: 
            { //tokens.add(new token("PUNTO", yytext(), this.tabulaciones, yyline, yycolumn));
             this.add("PUNTO");
            return new Symbol(sym.PUNTO, new token("PUNTO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 75: break;
          case 6: 
            { //this.tabulaciones = 0;
            } 
            // fall through
          case 76: break;
          case 7: 
            { //tokens.add(new token("PUNTO", yytext(), this.tabulaciones, yyline, yycolumn));
            //this.add("PUNTO");
            //return new Symbol(sym.PUNTO, new token("PUNTO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 77: break;
          case 8: 
            { //tokens.add(new token("IGUAL", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("IGUAL");
            return new Symbol(sym.IGUAL, new token("IGUAL", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 78: break;
          case 9: 
            { //tokens.add(new token("SUMA", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("SUMA");
            return new Symbol(sym.SUMA, new token("SUMA", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 79: break;
          case 10: 
            { //tokens.add(new token("RESTA", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("RESTA");
            return new Symbol(sym.RESTA, new token("RESTA", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 80: break;
          case 11: 
            { //tokens.add(new token("MULTIPLICACION", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("MULTIPLICACION");
            return new Symbol(sym.MULTIPLICACION, new token("MULTIPLICACION", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 81: break;
          case 12: 
            { //tokens.add(new token("DIVISION", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DIVISION");
            return new Symbol(sym.DIVISION, new token("DIVISION", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 82: break;
          case 13: 
            { //tokens.add(new token("MODULO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("MODULO");
            return new Symbol(sym.MODULO, new token("MODULO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 83: break;
          case 14: 
            { //tokens.add(new token("PARENTESIS1", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("PARENTESIS1");
            return new Symbol(sym.PARENTESIS1, new token("PARENTESIS1", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 84: break;
          case 15: 
            { //tokens.add(new token("PARENTESIS2", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("PARENTESIS2");
            return new Symbol(sym.PARENTESIS2, new token("PARENTESIS2", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 85: break;
          case 16: 
            { ////tokens.add(new token("CORCHETE1", yytext(), this.tabulaciones, yyline, yycolumn));
            //return new Symbol(sym.CORCHETE1, new token("CORCHETE1", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 86: break;
          case 17: 
            { ////tokens.add(new token("CORCHETE2", yytext(), this.tabulaciones, yyline, yycolumn));
            //return new Symbol(sym.CORCHETE2, new token("CORCHETE2", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 87: break;
          case 18: 
            { this.tabulaciones++;
            ////tokens.add(new token("TABULACION", yytext(), tabs));
            //return new Symbol(sym.TABULACION, new token("TABULACION", yytext(), tabs));
            } 
            // fall through
          case 88: break;
          case 19: 
            { //tokens.add(new token("COMA", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("COMA");
            return new Symbol(sym.COMA, new token("COMA", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 89: break;
          case 20: 
            { //tokens.add(new token("EXPONENCIACION", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("EXPONENCIACION");
            return new Symbol(sym.EXPONENCIACION, new token("EXPONENCIACION", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 90: break;
          case 21: 
            { //tokens.add(new token("MAYOR_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("MAYOR QUE");
            return new Symbol(sym.MAYOR_QUE, new token("MAYOR_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 91: break;
          case 22: 
            { //tokens.add(new token("MENOR_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("MENOR QUE");
            return new Symbol(sym.MENOR_QUE, new token("MENOR_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 92: break;
          case 23: 
            { //tokens.add(new token("DOS_PUNTOS", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DOS PUNTOS");
            return new Symbol(sym.DOS_PUNTOS, new token("DOS_PUNTOS", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 93: break;
          case 24: 
            { this.tabulaciones = 0;
            } 
            // fall through
          case 94: break;
          case 25: 
            { System.out.println("ERROR");
            ////tokens.add(new token("ERROR", yytext(), this.tabulaciones, yyline, yycolumn));
            //return new Symbol(sym.ERROR, new token("ERROR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 95: break;
          case 26: 
            { //tokens.add(new token("IF", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("IF");
            return new Symbol(sym.IF, new token("IF", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 96: break;
          case 27: 
            { //tokens.add(new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO_DATO_CUP");
            return new Symbol(sym.TIPO_DATO_CUP, new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 97: break;
          case 28: 
            { //tokens.add(new token("IGUAL_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("IGUAL QUE");
            return new Symbol(sym.IGUAL_QUE, new token("IGUAL_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 98: break;
          case 29: 
            { //tokens.add(new token("INCREMENTO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("INCREMENTO");
            return new Symbol(sym.INCREMENTO, new token("INCREMENTO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 99: break;
          case 30: 
            { //tokens.add(new token("DECREMENTO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DECREMENTO");
            return new Symbol(sym.DECREMENTO, new token("DECREMENTO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 100: break;
          case 31: 
            { //tokens.add(new token("OR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("OR");
            return new Symbol(sym.OR, new token("OR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 101: break;
          case 32: 
            { //tokens.add(new token("DISTINTO_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DISTINTO QUE");
            return new Symbol(sym.DISTINTO_QUE, new token("DISTINTO_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 102: break;
          case 33: 
            { //tokens.add(new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("NUMEROS REALES");
            return new Symbol(sym.TIPO_DATO_CUP, new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 103: break;
          case 34: 
            { //tokens.add(new token("AND", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("AND");
            return new Symbol(sym.AND, new token("AND", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 104: break;
          case 35: 
            { //tokens.add(new token("LEER", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("LEER");
            return new Symbol(sym.LEER, new token("LEER", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 105: break;
          case 36: 
            { //tokens.add(new token("SENO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("SENO");
            return new Symbol(sym.SENO, new token("SENO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 106: break;
          case 37: 
            { //tokens.add(new token("SINO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("SINO");
            return new Symbol(sym.SINO, new token("SINO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 107: break;
          case 38: 
            { //tokens.add(new token("RAIZ", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("RAIZ");
            return new Symbol(sym.RAIZ, new token("RAIZ", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 108: break;
          case 39: 
            { //tokens.add(new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO REAL");
            return new Symbol(sym.PALABRA_RESERVADA_TIPO, new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 109: break;
          case 40: 
            { ////tokens.add(new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            return new Symbol(sym.PALABRA_RESERVADA_TIPO, new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 110: break;
          case 41: 
            { //tokens.add(new token("CLASE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("CLASE");
            return new Symbol(sym.CLASE, new token("CLASE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 111: break;
          case 42: 
            { //tokens.add(new token("DESDE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DESDE");
            return new Symbol(sym.DESDE, new token("DESDE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 112: break;
          case 43: 
            { //tokens.add(new token("NUEVO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("NUEVO");
            return new Symbol(sym.NUEVO, new token("NUEVO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 113: break;
          case 44: 
            { //tokens.add(new token("HACER", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("HACER");
            return new Symbol(sym.HACER, new token("HACER", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 114: break;
          case 45: 
            { //tokens.add(new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO BOOLEANO");
            return new Symbol(sym.TIPO_DATO_CUP, new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 115: break;
          case 46: 
            { //tokens.add(new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO ENTERO");
            return new Symbol(sym.PALABRA_RESERVADA_TIPO, new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 116: break;
          case 47: 
            { //tokens.add(new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO CADENA");
            return new Symbol(sym.PALABRA_RESERVADA_TIPO, new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 117: break;
          case 48: 
            { //tokens.add(new token("COSENO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("COSENO");
            return new Symbol(sym.COSENO, new token("COSENO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 118: break;
          case 49: 
            { ////tokens.add(new token("INCLUIR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("INCLUIR");
            return new Symbol(sym.INCLUIR, new token("INCLUIR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 119: break;
          case 50: 
            { //tokens.add(new token("METODOS", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("METODOS");
            return new Symbol(sym.METODOS, new token("METODOS", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 120: break;
          case 51: 
            { //tokens.add(new token("ELIMINAR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("ELIMINAR");
            return new Symbol(sym.ELIMINAR, new token("ELIMINAR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 121: break;
          case 52: 
            { //tokens.add(new token("ESCRIBIR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("ESCRIBIR");
            return new Symbol(sym.ESCRIBIR, new token("ESCRIBIR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 122: break;
          case 53: 
            { //tokens.add(new token("ENTONCES", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("ENTONCES");
            return new Symbol(sym.ENTONCES, new token("ENTONCES", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 123: break;
          case 54: 
            { //tokens.add(new token("EXTIENDE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("EXTIENDE");
            return new Symbol(sym.EXTIENDE, new token("EXTIENDE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 124: break;
          case 55: 
            { //tokens.add(new token("PROPIEDADES_METODOS", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO DE PROPIEDAD");
            return new Symbol(sym.PROPIEDADES_METODOS, new token("PROPIEDADES_METODOS", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 125: break;
          case 56: 
            { //tokens.add(new token("DEVOLVER", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DEVOLVER");
            return new Symbol(sym.DEVOLVER, new token("DEVOLVER", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 126: break;
          case 57: 
            { //tokens.add(new token("MIENTRAS", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("MIENTRAS");
            return new Symbol(sym.MIENTRAS, new token("MIENTRAS", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 127: break;
          case 58: 
            { //tokens.add(new token("TANGENTE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TANGENTE");
            return new Symbol(sym.TANGENTE, new token("TANGENTE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 128: break;
          case 59: 
            { //tokens.add(new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO BOOLEANO");
            return new Symbol(sym.PALABRA_RESERVADA_TIPO, new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 129: break;
          case 60: 
            { //tokens.add(new token("LOGARITMO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("LOGARITMO");
            return new Symbol(sym.LOGARITMO, new token("LOGARITMO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 130: break;
          case 61: 
            { //tokens.add(new token("PRINCIPAL", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("PRINCIPAL");
            return new Symbol(sym.PRINCIPAL, new token("PRINCIPAL", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 131: break;
          case 62: 
            { //tokens.add(new token("INSTANCIAR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("INSTANCIAR");
            return new Symbol(sym.INSTANCIAR, new token("INSTANCIAR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 132: break;
          case 63: 
            { //tokens.add(new token("DESTRUCTOR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DESTRUCTOR");
            return new Symbol(sym.DESTRUCTOR, new token("DESTRUCTOR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 133: break;
          case 64: 
            { //tokens.add(new token("CONSTRUCTOR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("CONSTRUCTOR");
            return new Symbol(sym.CONSTRUCTOR, new token("CONSTRUCTOR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 134: break;
          case 65: 
            { //tokens.add(new token("PROPIEDADES", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("PROPIEDADES");
            return new Symbol(sym.PROPIEDADES, new token("PROPIEDADES", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 135: break;
          case 66: 
            { //tokens.add(new token("INCREMENTAR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("INCREMENTAR");

            return new Symbol(sym.INCREMENTAR, new token("INCREMENTAR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 136: break;
          case 67: 
            { //tokens.add(new token("DECREMENTAR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DECREMENTAR");
            return new Symbol(sym.DECREMENTAR, new token("DECREMENTAR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 137: break;
          case 68: 
            { //tokens.add(new token("CADENA_A_REAL", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("CADENAAREAL");
            return new Symbol(sym.CADENA_A_REAL, new token("CADENA_A_REAL", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 138: break;
          case 69: 
            { //tokens.add(new token("CADENA_A_ENTERO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("CADENAAENTERO");
            return new Symbol(sym.CADENA_A_ENTERO, new token("CADENA_A_ENTERO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 139: break;
          case 70: 
            { //tokens.add(new token("CADENA_A_BOOLEANO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("CADENAABOOLEANO");
            return new Symbol(sym.CADENA_A_BOOLEANO, new token("CADENA_A_BOOLEANO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
