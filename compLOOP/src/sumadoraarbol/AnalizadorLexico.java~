/* The following code was generated by JFlex 1.7.0 */

/* primera parte: no hace falta poner nada */
package sumadoraarbol;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/base/digitos.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\76\1\100\1\100\1\77\22\0\1\43\1\70\1\41"+
    "\2\0\1\57\2\0\1\51\1\52\1\56\1\54\1\53\1\55\1\37"+
    "\1\44\1\36\11\35\1\71\1\0\1\67\1\61\1\66\2\0\1\62"+
    "\1\74\1\1\1\27\1\25\2\42\1\33\1\31\2\42\1\26\1\14"+
    "\1\63\1\64\1\6\1\42\1\65\1\24\7\42\1\72\1\0\1\73"+
    "\1\0\1\50\1\0\1\3\1\17\1\20\1\13\1\5\1\40\1\22"+
    "\1\32\1\12\2\46\1\2\1\30\1\23\1\10\1\11\1\46\1\7"+
    "\1\4\1\15\1\16\1\21\1\46\1\34\1\46\1\75\1\0\1\47"+
    "\10\0\1\100\u0240\0\1\60\u1d61\0\1\100\1\100\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\1\2\4\3\1\2\5\3"+
    "\4\2\1\3\1\2\1\3\1\2\2\4\1\5\1\3"+
    "\1\1\1\2\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\2\1\22"+
    "\1\23\1\1\1\24\1\25\1\26\2\27\2\2\1\0"+
    "\2\3\1\30\1\3\1\31\4\3\2\2\5\3\2\2"+
    "\6\3\1\31\6\2\1\3\1\2\1\3\1\2\3\0"+
    "\1\3\1\0\1\32\1\0\1\33\1\34\1\35\1\2"+
    "\1\36\1\37\1\6\3\2\11\3\3\2\10\3\2\2"+
    "\10\3\10\2\1\3\1\2\1\3\1\2\1\40\1\3"+
    "\1\0\1\41\2\2\1\42\1\3\1\43\1\44\5\3"+
    "\5\2\1\45\1\46\10\3\2\2\6\3\1\47\1\3"+
    "\1\44\4\2\1\42\3\2\1\3\2\2\1\3\1\2"+
    "\1\3\1\50\1\2\6\3\5\2\4\3\1\51\3\3"+
    "\2\2\6\3\1\52\4\2\1\51\2\2\1\3\2\2"+
    "\2\53\1\54\1\2\3\3\1\55\2\3\4\2\7\3"+
    "\2\2\2\3\1\56\1\57\2\3\6\2\1\3\3\2"+
    "\5\3\3\2\2\3\1\60\4\3\1\61\1\2\5\3"+
    "\6\2\1\3\1\60\2\2\1\3\1\62\1\63\1\64"+
    "\1\65\1\2\1\66\1\2\5\3\1\67\1\70\1\71"+
    "\1\72\4\3\1\62\1\63\1\64\1\65\2\2\1\70"+
    "\2\2\1\73\1\2\2\74\10\3\5\2\1\75\1\3"+
    "\1\76\5\3\1\76\2\2\1\77\1\100\1\101\1\102"+
    "\1\3\1\103\1\3\1\77\1\102\1\101\2\3\1\104"+
    "\1\3\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\101\0\101\0\101\0\101\0\u08a2\0\u08e3"+
    "\0\101\0\101\0\101\0\u0924\0\u0965\0\u09a6\0\101\0\101"+
    "\0\u09e7\0\101\0\101\0\101\0\101\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba"+
    "\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2"+
    "\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca"+
    "\0\u130b\0\u134c\0\u138d\0\u13ce\0\u071c\0\u06db\0\u140f\0\u1450"+
    "\0\u079e\0\101\0\u1491\0\101\0\101\0\101\0\u14d2\0\u07df"+
    "\0\101\0\101\0\u1513\0\u1554\0\u0aeb\0\u1595\0\u15d6\0\u0bae"+
    "\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de"+
    "\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6"+
    "\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee"+
    "\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6"+
    "\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u140f"+
    "\0\u1ffe\0\u203f\0\u07df\0\u2080\0\u20c1\0\u0104\0\u2102\0\u0104"+
    "\0\u0104\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u0104\0\u0104\0\u23cd\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u0104\0\u27dd\0\u07df"+
    "\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u07df\0\u2922\0\u2963\0\u29a4"+
    "\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u07df\0\u2b6b"+
    "\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73"+
    "\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u0104"+
    "\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142"+
    "\0\u3183\0\u31c4\0\u3205\0\u0104\0\u3246\0\u3287\0\u32c8\0\u3309"+
    "\0\u07df\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u0104\0\u07df"+
    "\0\u0104\0\u348f\0\u34d0\0\u3511\0\u3552\0\u0104\0\u3593\0\u35d4"+
    "\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc"+
    "\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4"+
    "\0\u0104\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3"+
    "\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u0104"+
    "\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u07df\0\u40bf\0\u4100\0\u4141"+
    "\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349"+
    "\0\u438a\0\u43cb\0\u07df\0\u440c\0\u444d\0\u448e\0\u0104\0\u0104"+
    "\0\u0104\0\u0104\0\u44cf\0\u07df\0\u4510\0\u4551\0\u4592\0\u45d3"+
    "\0\u4614\0\u4655\0\u0104\0\u07df\0\u0104\0\u0104\0\u4696\0\u46d7"+
    "\0\u4718\0\u4759\0\u07df\0\u07df\0\u07df\0\u07df\0\u479a\0\u47db"+
    "\0\u0104\0\u481c\0\u485d\0\u0104\0\u489e\0\u07df\0\u0104\0\u48df"+
    "\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7"+
    "\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u0104\0\u4c2c\0\u0104\0\u4c6d"+
    "\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u07df\0\u4db2\0\u4df3\0\u07df"+
    "\0\u07df\0\u0104\0\u0104\0\u4e34\0\u0104\0\u4e75\0\u0104\0\u07df"+
    "\0\u07df\0\u4eb6\0\u4ef7\0\u0104\0\u4f38\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\13\1\14\1\15\1\16\1\5\1\17"+
    "\1\20\1\21\1\5\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\5\2\2"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\40\1\56\1\40\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\40\1\5\1\65\1\66\103\0"+
    "\1\40\1\67\5\40\1\70\26\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\4\40\6\0\2\40"+
    "\4\0\4\5\1\72\2\5\1\73\26\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\36\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\4\5"+
    "\1\75\4\5\1\76\24\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\1\5\1\77\1\5\1\100\16\5\1\101\10\5\1\102"+
    "\2\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\6\40\1\103\6\40"+
    "\1\104\20\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\2\5\1\105"+
    "\1\5\1\106\31\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\6\5"+
    "\1\107\27\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\22\5\1\110"+
    "\13\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\4\5\1\111\31\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\4\40\1\112\4\40\1\113"+
    "\24\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\2\5\1\114\33\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\7\5\1\115\26\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\2\5\1\116\4\5\1\117\26\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\4\5\1\120\31\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\15\5\1\121\20\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\11\40\1\122\24\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\4\40\6\0\2\40"+
    "\4\0\1\40\1\123\1\40\1\124\16\40\1\125\10\40"+
    "\1\126\2\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\4\40\1\127"+
    "\31\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\4\40\1\130\31\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\11\5\1\131\24\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\22\40\1\132\13\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\2\5\1\133\33\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\2\40\1\134\33\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\40\0"+
    "\2\33\1\135\76\0\2\136\1\135\76\0\2\137\43\0"+
    "\2\5\1\140\33\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\36\141"+
    "\1\0\1\141\1\142\2\141\2\0\1\141\13\0\4\141"+
    "\6\0\2\141\4\0\36\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\46\0"+
    "\1\143\36\0\36\42\1\0\1\42\1\0\2\42\2\0"+
    "\1\42\13\0\4\42\6\0\2\42\57\0\1\144\101\0"+
    "\1\145\104\0\1\146\20\0\36\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\1\40\1\147\2\40"+
    "\6\0\2\40\4\0\36\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\3\40\1\150\6\0\2\40"+
    "\64\0\1\151\42\0\1\65\52\0\1\152\3\0\2\40"+
    "\1\153\33\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\22\40\1\154"+
    "\13\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\36\155\1\0\1\155"+
    "\1\0\1\155\3\0\2\155\12\0\4\155\6\0\2\155"+
    "\4\0\4\5\1\156\31\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\21\5\1\157\14\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\36\160"+
    "\1\0\1\160\1\0\1\160\3\0\2\160\12\0\4\160"+
    "\6\0\2\160\4\0\22\5\1\161\13\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\22\5\1\162\13\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\11\5\1\163\24\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\17\5\1\164\16\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\14\5"+
    "\1\165\21\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\14\5\1\166"+
    "\21\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\7\40\1\167\1\40"+
    "\1\170\24\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\16\40\1\171"+
    "\17\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\11\5\1\172\24\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\2\5\1\173\33\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\11\5\1\174\24\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\3\5\1\175\13\5\1\176\16\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\3\5\1\177\13\5\1\200\1\201"+
    "\15\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\14\40\1\202\21\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\4\40\1\203\31\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\22\5\1\204\13\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\7\5\1\205\26\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\12\5\1\206\23\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\3\5\1\207\16\5\1\210\13\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\6\5\1\211\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\1\5\1\212\2\5\1\213\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\22\40\1\214\13\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\11\40\1\215\24\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\17\40"+
    "\1\216\16\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\14\40\1\217"+
    "\21\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\14\40\1\220\21\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\4\40\1\221\31\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\3\40\1\222\13\40\1\223\16\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\4\5\1\224\31\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\17\40\1\225\16\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\17\5\1\226\16\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\17\40\1\227\16\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\40\0"+
    "\1\230\1\137\43\0\1\5\1\231\34\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\46\0\1\232\36\0\26\40\1\233\7\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\3\40\1\234\32\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\3\40\1\235\32\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\4\40\6\0\2\40"+
    "\4\0\6\5\1\236\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\2\5\1\237\33\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\7\5"+
    "\1\240\26\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\7\5\1\241"+
    "\26\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\27\5\1\242\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\6\5\1\243\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\4\5\1\244\2\5\1\245\26\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\11\5\1\246\24\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\10\40\1\247\3\40\1\250\21\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\20\40\1\251\1\40\1\252"+
    "\13\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\1\40\1\253\34\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\36\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\1\5"+
    "\1\254\4\0\1\5\1\255\34\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\22\5\1\256\13\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\14\5\1\257\21\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\1\5"+
    "\1\260\4\5\1\261\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\12\5\1\262\1\5\1\263\21\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\6\5\1\264\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\7\5\1\265\26\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\7\40"+
    "\1\266\26\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\22\40\1\267"+
    "\13\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\21\5\1\270\14\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\1\5\1\271\34\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\4\5\1\272\31\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\4\5\1\273\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\3\5\1\274\32\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\12\5\1\275\23\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\7\5"+
    "\1\276\26\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\20\5\1\277"+
    "\15\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\7\40\1\300\26\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\27\40\1\301\6\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\6\40\1\302\27\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\7\40\1\303\26\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\4\40\6\0\2\40"+
    "\4\0\11\40\1\304\24\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\6\40\1\305\27\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\12\40"+
    "\1\306\1\40\1\307\21\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\6\40\1\310\27\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\22\5"+
    "\1\311\13\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\1\40\1\312"+
    "\4\40\1\313\27\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\4\5"+
    "\1\314\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\4\40\1\315"+
    "\31\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\3\5\1\316\32\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\46\0\1\43\36\0\4\40\1\317"+
    "\31\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\14\40\1\320\21\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\6\5\1\321\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\11\5\1\322\24\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\11\5\1\323\24\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\6\5\1\324\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\22\5\1\325\13\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\4\5"+
    "\1\326\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\11\40\1\327"+
    "\24\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\4\40\1\330\31\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\2\40\1\331\33\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\17\40\1\332\16\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\11\40\1\333\24\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\4\40\6\0\2\40"+
    "\4\0\17\5\1\334\16\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\2\5\1\335\33\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\15\5"+
    "\1\336\20\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\4\5\1\337"+
    "\31\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\4\5\1\340\31\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\6\5\1\341\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\4\5\1\342\31\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\1\5\1\343\34\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\12\40\1\344\23\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\14\40\1\345\21\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\4\5"+
    "\1\346\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\4\5\1\347"+
    "\31\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\22\5\1\350\13\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\22\5\1\351\13\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\14\5\1\352\21\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\2\5\1\353\33\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\7\5\1\354\26\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\11\40\1\355\24\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\11\40"+
    "\1\356\24\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\22\40\1\357"+
    "\13\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\4\40\1\360\31\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\4\40\1\361\31\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\6\40\1\362\27\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\4\40\1\363\31\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\4\40\6\0\2\40"+
    "\4\0\14\5\1\364\21\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\15\40\1\365\20\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\4\40"+
    "\1\366\31\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\6\5\1\367"+
    "\27\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\6\40\1\370\27\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\7\5\1\371\26\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\6\40\1\372\27\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\11\5\1\373\24\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\22\5\1\374\13\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\16\5\1\375\17\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\7\5"+
    "\1\376\26\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\17\5\1\377"+
    "\16\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\22\5\1\u0100\13\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\4\40\1\u0101\31\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\21\40\1\u0102\14\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\12\40\1\u0103\23\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\4\40\6\0\2\40"+
    "\4\0\11\40\1\u0104\24\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\17\40\1\u0103\16\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\11\5"+
    "\1\u0105\24\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\22\5\1\u0106"+
    "\13\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\11\5\1\u0107\24\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\27\5\1\u0108\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\15\5\1\u0109\20\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\27\5\1\u010a\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\20\5\1\u010b\15\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\7\40\1\u010c\26\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\6\40"+
    "\1\u010d\27\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\22\5\1\u010e"+
    "\13\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\2\5\1\u010f\33\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\2\5\1\u0110\33\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\7\5\1\u0111\26\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\6\5\1\u0112\27\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\12\5\1\u0113\23\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\22\40\1\u0114\13\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\16\40"+
    "\1\u0115\17\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\17\40\1\u0116"+
    "\16\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\22\40\1\u0117\13\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\15\40\1\u0118\20\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\27\40\1\u0119\6\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\6\5\1\u011a\27\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\11\40\1\u011b\24\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\27\40\1\u011c\6\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\15\40"+
    "\1\u011d\20\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\14\5\1\u011e"+
    "\21\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\2\5\1\u011f\33\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\11\5\1\u0120\24\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\4\5\1\u0121\31\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\12\5\1\u0122\23\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\12\40\1\u0123\23\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\11\40\1\331\24\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\2\40"+
    "\1\u0124\4\40\1\u0124\26\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\10\40\1\u0125\25\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\10\5"+
    "\1\u0126\25\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\17\5\1\u0127"+
    "\16\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\6\5\1\u0128\27\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\4\5\1\u0129\31\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\17\5\1\u012a\16\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\4\5\1\u012b\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\4\5\1\u012c\31\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\3\40\1\u012d\32\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\2\40"+
    "\1\u012e\33\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\14\5\1\u012f"+
    "\21\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\22\5\1\u0130\13\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\36\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\1\u0131\3\5\6\0"+
    "\2\5\4\0\15\5\1\u0132\20\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\4\5\1\u0133\31\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\2\40\1\u0134\33\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\11\40"+
    "\1\u0135\24\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\4\40\1\u0136"+
    "\31\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\12\40\1\u0137\23\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\17\40\1\u0138\16\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\4\40\1\u0139\31\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\2\5\1\u013a\33\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\6\40\1\u013b\27\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\4\40\1\u013c\31\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\17\40"+
    "\1\u013d\16\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\27\5\1\u013e"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\6\5\1\u013f\27\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\6\5\1\u0140\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\3\5\1\u0141\32\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\4\5\1\u0142\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\2\40\1\u0143\33\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\3\40\1\u0144\32\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\2\40"+
    "\1\u0145\33\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\2\5\1\u0146"+
    "\33\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\11\5\1\u0147\24\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\22\5\1\u0148\13\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\14\5\1\u0149\21\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\22\5\1\u014a\13\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\6\5\1\u014b\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\3\40\1\u014c\32\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\4\5"+
    "\1\u014d\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\7\5\1\u014e"+
    "\26\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\24\5\1\u014f\11\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\3\5\1\u0150\6\0\1\u0151\1\5\4\0\17\5\1\u0152"+
    "\16\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\6\5\1\316\27\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\6\40\1\u0153\27\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\6\40\1\u0154\27\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\3\40\1\u0155\32\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\4\40\6\0\2\40"+
    "\4\0\4\40\1\u0156\31\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\14\40\1\u0157\21\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\22\40"+
    "\1\u0158\13\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\3\5\1\u0159"+
    "\32\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\22\40\1\u015a\13\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\14\40\1\u015b\21\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\7\5\1\u015c\26\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\12\40\1\u015d\23\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\4\40\6\0\2\40"+
    "\4\0\1\40\1\u015e\34\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\1\5\1\u015f\34\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\2\5"+
    "\1\u0160\33\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\14\5\1\u0161"+
    "\21\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\7\5\1\u0162\26\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\14\5\1\u0163\21\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\22\5\1\u0164\13\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\4\5\1\u0165\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\7\5\1\u0166\26\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\14\5\1\u0167\21\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\7\40"+
    "\1\u0168\26\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\14\40\1\u0169"+
    "\21\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\14\40\1\u016a\21\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\71\11\0"+
    "\4\40\6\0\2\40\4\0\7\40\1\u016b\26\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\71\11\0\4\40"+
    "\6\0\2\40\4\0\4\40\1\u016c\31\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\71\11\0\4\40\6\0"+
    "\2\40\4\0\6\5\1\u016d\27\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\2\5\1\u016e\33\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\6\5\1\u016f\27\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\2\5"+
    "\1\u0170\33\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\74\11\0\4\5\6\0\2\5\4\0\14\5\1\u0171"+
    "\21\5\1\0\1\5\1\0\1\5\3\0\2\5\1\74"+
    "\11\0\4\5\6\0\2\5\4\0\2\5\1\u0172\33\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\1\5\1\u0173\34\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\7\5\1\u0174\26\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\6\40\1\u0175\27\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\71\11\0\4\40\6\0\2\40"+
    "\4\0\2\40\1\u0176\33\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\71\11\0\4\40\6\0\2\40\4\0"+
    "\2\40\1\u0177\33\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\71\11\0\4\40\6\0\2\40\4\0\6\40"+
    "\1\u0178\27\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\3\40\1\u0179"+
    "\32\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\6\5\1\u017a\27\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\6\5\1\u017b\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\4\5\1\u017c\31\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\1\5\1\u017d\34\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\4\5\1\u017e\31\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\4\0"+
    "\6\5\1\u017f\27\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\74\11\0\4\5\6\0\2\5\4\0\6\40"+
    "\1\u0180\27\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\71\11\0\4\40\6\0\2\40\4\0\6\40\1\u0181"+
    "\27\40\1\0\1\40\1\0\1\40\3\0\2\40\1\71"+
    "\11\0\4\40\6\0\2\40\4\0\6\5\1\u0182\27\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\74\11\0"+
    "\4\5\6\0\2\5\4\0\2\5\1\u0183\33\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\74\11\0\4\5"+
    "\6\0\2\5\4\0\7\5\1\u0184\26\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\74\11\0\4\5\6\0"+
    "\2\5\4\0\22\5\1\u0185\13\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\74\11\0\4\5\6\0\2\5"+
    "\4\0\7\5\1\u0186\26\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\74\11\0\4\5\6\0\2\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20345];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\40\1\4\11\2\1\3\11\3\1\2\11"+
    "\1\1\4\11\3\1\1\0\43\1\3\0\1\1\1\0"+
    "\1\11\1\0\3\11\2\1\2\11\57\1\1\0\354\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<token> tokens;
    public int tabulaciones;
public ArrayList<Simbolos> sim;

public void add(String nuevo) {

        boolean bandera = false;
        String a = nuevo;
       
        int numero = 0;
        if (sim.size() == 0) {
            Simbolos sim2 = new Simbolos();
            sim2.setCantidad(1);
            sim2.setValor(a);
            sim.add(sim2);
        } else {
            for (int x = 0; x < sim.size(); x++) {

                Simbolos sim1 = sim.get(x);

                if (sim1.getValor().equals(a)) {
                    bandera = true;
                    numero = x;

                    x = sim.size();
                } else {
                    bandera = false;
                }
            }
            if (bandera == true) {
                
                Simbolos val = sim.get(numero);
                int n = val.getCantidad();
                n = n + 1;
                val.setCantidad(n);
                sim.remove(numero);
                sim.add(val);
                   
            } else {
              
                Simbolos sim2 = new Simbolos();
                sim2.setCantidad(1);
                sim2.setValor(a);
                sim.add(sim2);
            }
        }
           
    }





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
      this.tokens = new ArrayList<>();
    this.sim = new ArrayList<>();
    this.tabulaciones = 0;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   System.out.println("Fin de archivo encontrado");
  return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Error Léxico \"" + yytext() + "\" ["+ (yyline+1) + ":"+ (yycolumn+1) + ":"+ yychar + "]");
            return new Symbol(sym.error);
            } 
            // fall through
          case 70: break;
          case 2: 
            { //tokens.add(new token("VARIABLE_CLASE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("VARIABLE CLASE");
            return new Symbol(sym.VARIABLE_CLASE, new token("VARIABLE_CLASE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 71: break;
          case 3: 
            { //tokens.add(new token("VARIABLE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("VARIABLE");
            return new Symbol(sym.VARIABLE, new token("VARIABLE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 72: break;
          case 4: 
            { //tokens.add(new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("NUMEROS DECIMALES");
            return new Symbol(sym.TIPO_DATO_CUP, new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 73: break;
          case 5: 
            { //tokens.add(new token("PUNTO", yytext(), this.tabulaciones, yyline, yycolumn));
             this.add("PUNTO");
            return new Symbol(sym.PUNTO, new token("PUNTO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 74: break;
          case 6: 
            { //this.tabulaciones = 0;
            } 
            // fall through
          case 75: break;
          case 7: 
            { //tokens.add(new token("PUNTO", yytext(), this.tabulaciones, yyline, yycolumn));
            //this.add("PUNTO");
            //return new Symbol(sym.PUNTO, new token("PUNTO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 76: break;
          case 8: 
            { this.tabulaciones++;
            ////tokens.add(new token("TABULACION", yytext(), tabs));
            //return new Symbol(sym.TABULACION, new token("TABULACION", yytext(), tabs));
            } 
            // fall through
          case 77: break;
          case 9: 
            { //tokens.add(new token("PARENTESIS1", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("PARENTESIS1");
            return new Symbol(sym.PARENTESIS1, new token("PARENTESIS1", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 78: break;
          case 10: 
            { //tokens.add(new token("PARENTESIS2", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("PARENTESIS2");
            return new Symbol(sym.PARENTESIS2, new token("PARENTESIS2", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 79: break;
          case 11: 
            { //tokens.add(new token("COMA", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("COMA");
            return new Symbol(sym.COMA, new token("COMA", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 80: break;
          case 12: 
            { //tokens.add(new token("SUMA", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("SUMA");
            return new Symbol(sym.SUMA, new token("SUMA", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 81: break;
          case 13: 
            { //tokens.add(new token("RESTA", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("RESTA");
            return new Symbol(sym.RESTA, new token("RESTA", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 82: break;
          case 14: 
            { //tokens.add(new token("MULTIPLICACION", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("MULTIPLICACION");
            return new Symbol(sym.MULTIPLICACION, new token("MULTIPLICACION", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 83: break;
          case 15: 
            { //tokens.add(new token("MODULO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("MODULO");
            return new Symbol(sym.MODULO, new token("MODULO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 84: break;
          case 16: 
            { //tokens.add(new token("EXPONENCIACION", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("EXPONENCIACION");
            return new Symbol(sym.EXPONENCIACION, new token("EXPONENCIACION", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 85: break;
          case 17: 
            { //tokens.add(new token("IGUAL", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("IGUAL");
            return new Symbol(sym.IGUAL, new token("IGUAL", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 86: break;
          case 18: 
            { //tokens.add(new token("MAYOR_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("MAYOR QUE");
            return new Symbol(sym.MAYOR_QUE, new token("MAYOR_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 87: break;
          case 19: 
            { //tokens.add(new token("MENOR_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("MENOR QUE");
            return new Symbol(sym.MENOR_QUE, new token("MENOR_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 88: break;
          case 20: 
            { //tokens.add(new token("DOS_PUNTOS", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DOS PUNTOS");
            return new Symbol(sym.DOS_PUNTOS, new token("DOS_PUNTOS", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 89: break;
          case 21: 
            { ////tokens.add(new token("CORCHETE1", yytext(), this.tabulaciones, yyline, yycolumn));
            //return new Symbol(sym.CORCHETE1, new token("CORCHETE1", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 90: break;
          case 22: 
            { ////tokens.add(new token("CORCHETE2", yytext(), this.tabulaciones, yyline, yycolumn));
            //return new Symbol(sym.CORCHETE2, new token("CORCHETE2", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 91: break;
          case 23: 
            { this.tabulaciones = 0;
            } 
            // fall through
          case 92: break;
          case 24: 
            { System.out.println("ERROR");
            ////tokens.add(new token("ERROR", yytext(), this.tabulaciones, yyline, yycolumn));
            //return new Symbol(sym.ERROR, new token("ERROR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 93: break;
          case 25: 
            { //tokens.add(new token("IF", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("IF");
            return new Symbol(sym.IF, new token("IF", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 94: break;
          case 26: 
            { //tokens.add(new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO_DATO_CUP");
            return new Symbol(sym.TIPO_DATO_CUP, new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 95: break;
          case 27: 
            { //tokens.add(new token("INCREMENTO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("INCREMENTO");
            return new Symbol(sym.INCREMENTO, new token("INCREMENTO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 96: break;
          case 28: 
            { //tokens.add(new token("DECREMENTO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DECREMENTO");
            return new Symbol(sym.DECREMENTO, new token("DECREMENTO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 97: break;
          case 29: 
            { //tokens.add(new token("IGUAL_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("IGUAL QUE");
            return new Symbol(sym.IGUAL_QUE, new token("IGUAL_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 98: break;
          case 30: 
            { //tokens.add(new token("OR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("OR");
            return new Symbol(sym.OR, new token("OR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 99: break;
          case 31: 
            { //tokens.add(new token("DISTINTO_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DISTINTO QUE");
            return new Symbol(sym.DISTINTO_QUE, new token("DISTINTO_QUE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 100: break;
          case 32: 
            { //tokens.add(new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("NUMEROS REALES");
            return new Symbol(sym.TIPO_DATO_CUP, new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 101: break;
          case 33: 
            { //tokens.add(new token("AND", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("AND");
            return new Symbol(sym.AND, new token("AND", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 102: break;
          case 34: 
            { //tokens.add(new token("LEER", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("LEER");
            return new Symbol(sym.LEER, new token("LEER", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 103: break;
          case 35: 
            { //tokens.add(new token("SENO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("SENO");
            return new Symbol(sym.SENO, new token("SENO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 104: break;
          case 36: 
            { //tokens.add(new token("SINO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("SINO");
            return new Symbol(sym.SINO, new token("SINO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 105: break;
          case 37: 
            { //tokens.add(new token("RAIZ", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("RAIZ");
            return new Symbol(sym.RAIZ, new token("RAIZ", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 106: break;
          case 38: 
            { //tokens.add(new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO REAL");
            return new Symbol(sym.PALABRA_RESERVADA_TIPO, new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 107: break;
          case 39: 
            { ////tokens.add(new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            //return new Symbol(sym.PALABRA_RESERVADA_TIPO, new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 108: break;
          case 40: 
            { //tokens.add(new token("CLASE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("CLASE");
            return new Symbol(sym.CLASE, new token("CLASE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 109: break;
          case 41: 
            { //tokens.add(new token("DESDE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DESDE");
            return new Symbol(sym.DESDE, new token("DESDE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 110: break;
          case 42: 
            { //tokens.add(new token("NUEVO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("NUEVO");
            return new Symbol(sym.NUEVO, new token("NUEVO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 111: break;
          case 43: 
            { //tokens.add(new token("HACER", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("HACER");
            return new Symbol(sym.HACER, new token("HACER", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 112: break;
          case 44: 
            { //tokens.add(new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO BOOLEANO");
            return new Symbol(sym.TIPO_DATO_CUP, new token("TIPO_DATO_CUP", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 113: break;
          case 45: 
            { //tokens.add(new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO ENTERO");
            return new Symbol(sym.PALABRA_RESERVADA_TIPO, new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 114: break;
          case 46: 
            { //tokens.add(new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO CADENA");
            return new Symbol(sym.PALABRA_RESERVADA_TIPO, new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 115: break;
          case 47: 
            { //tokens.add(new token("COSENO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("COSENO");
            return new Symbol(sym.COSENO, new token("COSENO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 116: break;
          case 48: 
            { ////tokens.add(new token("INCLUIR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("INCLUIR");
            return new Symbol(sym.INCLUIR, new token("INCLUIR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 117: break;
          case 49: 
            { //tokens.add(new token("METODOS", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("METODOS");
            return new Symbol(sym.METODOS, new token("METODOS", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 118: break;
          case 50: 
            { //tokens.add(new token("ELIMINAR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("ELIMINAR");
            return new Symbol(sym.ELIMINAR, new token("ELIMINAR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 119: break;
          case 51: 
            { //tokens.add(new token("ESCRIBIR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("ESCRIBIR");
            return new Symbol(sym.ESCRIBIR, new token("ESCRIBIR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 120: break;
          case 52: 
            { //tokens.add(new token("ENTONCES", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("ENTONCES");
            return new Symbol(sym.ENTONCES, new token("ENTONCES", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 121: break;
          case 53: 
            { //tokens.add(new token("EXTIENDE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("EXTIENDE");
            return new Symbol(sym.EXTIENDE, new token("EXTIENDE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 122: break;
          case 54: 
            { //tokens.add(new token("PROPIEDADES_METODOS", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO DE PROPIEDAD");
            return new Symbol(sym.PROPIEDADES_METODOS, new token("PROPIEDADES_METODOS", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 123: break;
          case 55: 
            { //tokens.add(new token("DEVOLVER", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DEVOLVER");
            return new Symbol(sym.DEVOLVER, new token("DEVOLVER", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 124: break;
          case 56: 
            { //tokens.add(new token("MIENTRAS", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("MIENTRAS");
            return new Symbol(sym.MIENTRAS, new token("MIENTRAS", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 125: break;
          case 57: 
            { //tokens.add(new token("TANGENTE", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TANGENTE");
            return new Symbol(sym.TANGENTE, new token("TANGENTE", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 126: break;
          case 58: 
            { //tokens.add(new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("TIPO BOOLEANO");
            return new Symbol(sym.PALABRA_RESERVADA_TIPO, new token("PALABRA_RESERVADA_TIPO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 127: break;
          case 59: 
            { //tokens.add(new token("LOGARITMO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("LOGARITMO");
            return new Symbol(sym.LOGARITMO, new token("LOGARITMO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 128: break;
          case 60: 
            { //tokens.add(new token("PRINCIPAL", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("PRINCIPAL");
            return new Symbol(sym.PRINCIPAL, new token("PRINCIPAL", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 129: break;
          case 61: 
            { //tokens.add(new token("INSTANCIAR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("INSTANCIAR");
            return new Symbol(sym.INSTANCIAR, new token("INSTANCIAR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 130: break;
          case 62: 
            { //tokens.add(new token("DESTRUCTOR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DESTRUCTOR");
            return new Symbol(sym.DESTRUCTOR, new token("DESTRUCTOR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 131: break;
          case 63: 
            { //tokens.add(new token("CONSTRUCTOR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("CONSTRUCTOR");
            return new Symbol(sym.CONSTRUCTOR, new token("CONSTRUCTOR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 132: break;
          case 64: 
            { //tokens.add(new token("PROPIEDADES", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("PROPIEDADES");
            return new Symbol(sym.PROPIEDADES, new token("PROPIEDADES", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 133: break;
          case 65: 
            { //tokens.add(new token("INCREMENTAR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("INCREMENTAR");

            return new Symbol(sym.INCREMENTAR, new token("INCREMENTAR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 134: break;
          case 66: 
            { //tokens.add(new token("DECREMENTAR", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("DECREMENTAR");
            return new Symbol(sym.DECREMENTAR, new token("DECREMENTAR", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 135: break;
          case 67: 
            { //tokens.add(new token("CADENA_A_REAL", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("CADENAAREAL");
            return new Symbol(sym.CADENA_A_REAL, new token("CADENA_A_REAL", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 136: break;
          case 68: 
            { //tokens.add(new token("CADENA_A_ENTERO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("CADENAAENTERO");
            return new Symbol(sym.CADENA_A_ENTERO, new token("CADENA_A_ENTERO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 137: break;
          case 69: 
            { //tokens.add(new token("CADENA_A_BOOLEANO", yytext(), this.tabulaciones, yyline, yycolumn));
            this.add("CADENAABOOLEANO");
            return new Symbol(sym.CADENA_A_BOOLEANO, new token("CADENA_A_BOOLEANO", yytext(), this.tabulaciones, yyline, yycolumn));
            } 
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
