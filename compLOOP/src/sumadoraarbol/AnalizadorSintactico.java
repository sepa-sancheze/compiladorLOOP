
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sumadoraarbol;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\045" +
    "\004\000\002\045\003\000\002\004\003\000\002\003\005" +
    "\000\002\005\006\000\002\005\004\000\002\006\007\000" +
    "\002\006\006\000\002\010\005\000\002\010\004\000\002" +
    "\010\004\000\002\007\007\000\002\007\006\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\043\010\000\002" +
    "\043\007\000\002\012\005\000\002\012\004\000\002\012" +
    "\003\000\002\012\006\000\002\012\004\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\021\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\004\000\002\022\004\000\002\022\004" +
    "\000\002\022\004\000\002\022\007\000\002\022\004\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\004\000\002\017\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\004\000" +
    "\002\020\004\000\002\024\003\000\002\024\003\000\002" +
    "\025\004\000\002\026\004\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\013\005\000\002\013\003\000\002\031\003\000" +
    "\002\031\003\000\002\023\007\000\002\023\006\000\002" +
    "\014\007\000\002\014\006\000\002\014\004\000\002\027" +
    "\004\000\002\027\004\000\002\033\004\000\002\033\004" +
    "\000\002\032\011\000\002\034\006\000\002\036\004\000" +
    "\002\036\005\000\002\036\004\000\002\036\003\000\002" +
    "\035\011\000\002\035\010\000\002\044\006\000\002\044" +
    "\006\000\002\044\006\000\002\044\006\000\002\044\006" +
    "\000\002\044\006\000\002\044\006\000\002\044\006\000" +
    "\002\037\011\000\002\037\010\000\002\015\004\000\002" +
    "\015\003\000\002\040\007\000\002\040\006\000\002\041" +
    "\006\000\002\042\011\000\002\042\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\004\004\011\001\002\000\006\002\000\004" +
    "\011\001\002\000\006\002\ufffe\004\ufffe\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\004\002\364\001\002\000" +
    "\004\005\016\001\002\000\004\072\012\001\002\000\006" +
    "\005\ufffa\026\013\001\002\000\004\072\014\001\002\000" +
    "\004\005\ufffb\001\002\000\004\006\030\001\002\000\004" +
    "\065\017\001\002\000\004\035\020\001\002\000\006\044" +
    "\023\072\021\001\002\000\004\071\027\001\002\000\006" +
    "\005\016\006\ufff8\001\002\000\004\071\024\001\002\000" +
    "\012\005\ufff5\006\ufff5\044\023\072\021\001\002\000\006" +
    "\005\ufff7\006\ufff7\001\002\000\004\006\ufff9\001\002\000" +
    "\006\005\ufff6\006\ufff6\001\002\000\004\065\032\001\002" +
    "\000\006\002\ufffc\004\ufffc\001\002\000\004\035\033\001" +
    "\002\000\032\007\050\012\042\013\060\015\056\016\054" +
    "\021\065\025\066\042\044\043\052\044\061\071\047\072" +
    "\055\001\002\000\046\002\uffe6\004\uffe6\006\uffe6\007\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\021" +
    "\uffe6\022\uffe6\025\uffe6\042\uffe6\043\uffe6\044\uffe6\071\uffe6" +
    "\072\uffe6\001\002\000\046\002\uffe2\004\uffe2\006\uffe2\007" +
    "\050\011\uffe2\012\042\013\060\014\uffe2\015\056\016\054" +
    "\021\065\022\uffe2\025\066\042\044\043\052\044\061\071" +
    "\047\072\055\001\002\000\046\002\uffe7\004\uffe7\006\uffe7" +
    "\007\050\011\uffe7\012\042\013\060\014\uffe7\015\056\016" +
    "\054\021\065\022\uffe7\025\066\042\044\043\052\044\061" +
    "\071\047\072\055\001\002\000\032\007\050\012\042\013" +
    "\060\015\056\016\054\021\065\025\066\042\044\043\052" +
    "\044\061\071\047\072\055\001\002\000\010\002\ufff3\004" +
    "\ufff3\006\030\001\002\000\032\007\050\012\042\013\060" +
    "\015\056\016\054\021\065\025\066\042\044\043\052\044" +
    "\061\071\047\072\055\001\002\000\004\071\357\001\002" +
    "\000\046\002\uffe3\004\uffe3\006\uffe3\007\050\011\uffe3\012" +
    "\042\013\060\014\uffe3\015\056\016\054\021\065\022\uffe3" +
    "\025\066\042\044\043\052\044\061\071\047\072\055\001" +
    "\002\000\046\002\uff8d\004\uff8d\006\uff8d\007\uff8d\011\uff8d" +
    "\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\021\uff8d\022" +
    "\uff8d\025\uff8d\042\uff8d\043\uff8d\044\uff8d\071\uff8d\072\uff8d" +
    "\001\002\000\046\002\uffb6\004\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\021\uffb6" +
    "\022\uffb6\025\uffb6\042\uffb6\043\uffb6\044\uffb6\071\uffb6\072" +
    "\uffb6\001\002\000\046\002\uffdd\004\uffdd\006\uffdd\007\050" +
    "\011\uffdd\012\042\013\060\014\uffdd\015\056\016\054\021" +
    "\065\022\uffdd\025\066\042\044\043\052\044\061\071\047" +
    "\072\055\001\002\000\072\002\uffd8\004\uffd8\006\uffd8\007" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\021\uffd8\022\uffd8\025\uffd8\032\346\033\174\034\205\041" +
    "\100\042\uffd8\043\uffd8\044\uffd8\045\175\046\203\047\200" +
    "\050\202\051\176\052\201\071\uffd8\072\uffd8\001\002\000" +
    "\006\043\074\071\077\001\002\000\046\002\uffde\004\uffde" +
    "\006\uffde\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\021\uffde\022\uffde\025\uffde\042\uffde\043\uffde" +
    "\044\uffde\071\uffde\072\uffde\001\002\000\022\033\174\034" +
    "\205\045\175\046\203\047\200\050\202\051\176\052\201" +
    "\001\002\000\046\002\uffb5\004\uffb5\006\uffb5\007\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\021\uffb5" +
    "\022\uffb5\025\uffb5\042\uffb5\043\uffb5\044\uffb5\071\uffb5\072" +
    "\uffb5\001\002\000\004\027\326\001\002\000\006\041\244" +
    "\071\320\001\002\000\004\027\312\001\002\000\046\002" +
    "\uffdf\004\uffdf\006\uffdf\007\050\011\uffdf\012\042\013\060" +
    "\014\uffdf\015\056\016\054\021\065\022\uffdf\025\066\042" +
    "\044\043\052\044\061\071\047\072\055\001\002\000\006" +
    "\043\235\071\236\001\002\000\010\017\263\043\235\071" +
    "\264\001\002\000\046\002\uffe0\004\uffe0\006\uffe0\007\050" +
    "\011\uffe0\012\042\013\060\014\uffe0\015\056\016\054\021" +
    "\065\022\uffe0\025\066\042\044\043\052\044\061\071\047" +
    "\072\055\001\002\000\046\002\uffe4\004\uffe4\006\uffe4\007" +
    "\050\011\uffe4\012\042\013\060\014\uffe4\015\056\016\054" +
    "\021\065\022\uffe4\025\066\042\044\043\052\044\061\071" +
    "\047\072\055\001\002\000\046\002\uffe5\004\uffe5\006\uffe5" +
    "\007\050\011\uffe5\012\042\013\060\014\uffe5\015\056\016" +
    "\054\021\065\022\uffe5\025\066\042\044\043\052\044\061" +
    "\071\047\072\055\001\002\000\010\044\126\071\127\072" +
    "\125\001\002\000\032\007\050\012\042\013\060\015\056" +
    "\016\054\021\065\025\066\042\044\043\052\044\061\071" +
    "\047\072\055\001\002\000\046\002\uffe1\004\uffe1\006\uffe1" +
    "\007\050\011\uffe1\012\042\013\060\014\uffe1\015\056\016" +
    "\054\021\065\022\uffe1\025\066\042\044\043\052\044\061" +
    "\071\047\072\055\001\002\000\046\002\uffef\004\uffef\006" +
    "\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\021\uffef\022\uffef\025\uffef\042\uffef\043\uffef\044" +
    "\uffef\071\uffef\072\uffef\001\002\000\004\022\072\001\002" +
    "\000\006\043\074\071\077\001\002\000\046\002\uff9f\004" +
    "\uff9f\006\uff9f\007\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\021\uff9f\022\uff9f\025\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\071\uff9f\072\uff9f\001\002\000\066\002\uffaa" +
    "\004\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\021\uffaa\022\uffaa\025\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\071\uffaa\072\uffaa\001\002" +
    "\000\054\002\uffac\004\uffac\006\uffac\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\021\uffac" +
    "\022\uffac\025\uffac\042\uffac\043\uffac\044\uffac\057\uffac\060" +
    "\uffac\071\uffac\072\uffac\001\002\000\014\052\117\053\116" +
    "\054\114\055\120\056\115\001\002\000\016\041\100\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\001\002\000\004" +
    "\071\101\001\002\000\004\027\102\001\002\000\012\030" +
    "\104\031\103\044\106\071\107\001\002\000\010\031\103" +
    "\044\106\071\107\001\002\000\054\002\uffdb\004\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\021\uffdb\022\uffdb\025\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\057\uffdb\060\uffdb\071\uffdb\072\uffdb\001\002" +
    "\000\004\030\112\001\002\000\004\071\110\001\002\000" +
    "\004\030\uff9b\001\002\000\012\030\uff9c\031\103\044\106" +
    "\071\107\001\002\000\004\030\uff9d\001\002\000\054\002" +
    "\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\021\uffdc\022\uffdc\025" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\057\uffdc\060\uffdc\071\uffdc" +
    "\072\uffdc\001\002\000\004\030\uff9e\001\002\000\006\043" +
    "\uffb1\071\uffb1\001\002\000\006\043\uffb0\071\uffb0\001\002" +
    "\000\006\043\uffb2\071\uffb2\001\002\000\006\043\uffae\071" +
    "\uffae\001\002\000\006\043\uffaf\071\uffaf\001\002\000\006" +
    "\043\074\071\123\001\002\000\054\002\uffad\004\uffad\006" +
    "\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\021\uffad\022\uffad\025\uffad\042\uffad\043" +
    "\uffad\044\uffad\057\uffad\060\uffad\071\uffad\072\uffad\001\002" +
    "\000\054\002\uffab\004\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\021\uffab" +
    "\022\uffab\025\uffab\042\uffab\043\uffab\044\uffab\057\uffab\060" +
    "\uffab\071\uffab\072\uffab\001\002\000\004\022\247\001\002" +
    "\000\004\041\244\001\002\000\006\043\235\071\236\001" +
    "\002\000\006\022\uffd8\032\131\001\002\000\046\002\uffd6" +
    "\004\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\021\uffd6\022\uffd6\025\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\071\uffd6\072\uffd6\001\002\000\036\023" +
    "\150\024\152\036\135\037\144\040\134\043\142\061\141" +
    "\062\151\063\133\064\147\066\143\067\145\070\136\071" +
    "\137\001\002\000\046\002\uffc5\004\uffc5\006\uffc5\007\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\021" +
    "\uffc5\022\uffc5\025\uffc5\042\uffc5\043\uffc5\044\uffc5\071\uffc5" +
    "\072\uffc5\001\002\000\004\027\231\001\002\000\006\043" +
    "\227\071\230\001\002\000\004\027\223\001\002\000\004" +
    "\027\220\001\002\000\104\002\uffca\004\uffca\006\uffca\007" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\021\uffca\022\uffca\023\216\024\217\025\uffca\033\174\034" +
    "\205\041\100\042\uffca\043\uffca\044\uffca\045\175\046\203" +
    "\047\200\050\202\051\176\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\071\uffca\072\uffca\001\002\000\046\002\uffc8" +
    "\004\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\021\uffc8\022\uffc8\025\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\071\uffc8\072\uffc8\001\002\000\004\027" +
    "\212\001\002\000\076\002\uffc9\004\uffc9\006\uffc9\007\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\021" +
    "\uffc9\022\uffc9\025\uffc9\033\174\034\205\042\uffc9\043\uffc9" +
    "\044\uffc9\045\175\046\203\047\200\050\202\051\176\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\071\uffc9\072\uffc9" +
    "\001\002\000\004\027\171\001\002\000\004\072\166\001" +
    "\002\000\004\027\163\001\002\000\046\002\uffc7\004\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\021\uffc7\022\uffc7\025\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\071\uffc7\072\uffc7\001\002\000\004\027\160\001" +
    "\002\000\004\071\157\001\002\000\004\027\154\001\002" +
    "\000\004\071\153\001\002\000\046\002\uffd1\004\uffd1\006" +
    "\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\021\uffd1\022\uffd1\025\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\071\uffd1\072\uffd1\001\002\000\004\071\155\001\002" +
    "\000\004\030\156\001\002\000\046\002\uff93\004\uff93\006" +
    "\uff93\007\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93" +
    "\016\uff93\021\uff93\022\uff93\025\uff93\042\uff93\043\uff93\044" +
    "\uff93\071\uff93\072\uff93\001\002\000\046\002\uffd0\004\uffd0" +
    "\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\021\uffd0\022\uffd0\025\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\071\uffd0\072\uffd0\001\002\000\004\071\161\001" +
    "\002\000\004\030\162\001\002\000\046\002\uff91\004\uff91" +
    "\006\uff91\007\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\021\uff91\022\uff91\025\uff91\042\uff91\043\uff91" +
    "\044\uff91\071\uff91\072\uff91\001\002\000\004\071\164\001" +
    "\002\000\004\030\165\001\002\000\046\002\uff97\004\uff97" +
    "\006\uff97\007\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\021\uff97\022\uff97\025\uff97\042\uff97\043\uff97" +
    "\044\uff97\071\uff97\072\uff97\001\002\000\004\027\167\001" +
    "\002\000\004\030\170\001\002\000\046\002\uffc6\004\uffc6" +
    "\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\021\uffc6\022\uffc6\025\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\071\uffc6\072\uffc6\001\002\000\004\071\172\001" +
    "\002\000\004\030\173\001\002\000\046\002\uff96\004\uff96" +
    "\006\uff96\007\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\021\uff96\022\uff96\025\uff96\042\uff96\043\uff96" +
    "\044\uff96\071\uff96\072\uff96\001\002\000\006\043\uffbe\071" +
    "\uffbe\001\002\000\006\043\uffc4\071\uffc4\001\002\000\006" +
    "\043\uffbf\071\uffbf\001\002\000\046\002\uffbb\004\uffbb\006" +
    "\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\021\uffbb\022\uffbb\025\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\071\uffbb\072\uffbb\001\002\000\006\043\uffc2\071\uffc2" +
    "\001\002\000\006\043\uffc0\071\uffc0\001\002\000\006\043" +
    "\uffc1\071\uffc1\001\002\000\006\043\uffc3\071\uffc3\001\002" +
    "\000\006\043\206\071\207\001\002\000\006\043\uffbd\071" +
    "\uffbd\001\002\000\066\002\uffb8\004\uffb8\006\uffb8\007\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\021" +
    "\uffb8\022\uffb8\025\uffb8\033\174\034\205\042\uffb8\043\uffb8" +
    "\044\uffb8\045\175\046\203\047\200\050\202\051\176\052" +
    "\201\071\uffb8\072\uffb8\001\002\000\066\002\uffb7\004\uffb7" +
    "\006\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\021\uffb7\022\uffb7\025\uffb7\033\174\034\205" +
    "\042\uffb7\043\uffb7\044\uffb7\045\175\046\203\047\200\050" +
    "\202\051\176\052\201\071\uffb7\072\uffb7\001\002\000\046" +
    "\002\uffba\004\uffba\006\uffba\007\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\021\uffba\022\uffba\025\uffba" +
    "\042\uffba\043\uffba\044\uffba\071\uffba\072\uffba\001\002\000" +
    "\046\002\uffb9\004\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\021\uffb9\022\uffb9\025" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\071\uffb9\072\uffb9\001\002" +
    "\000\004\071\213\001\002\000\004\030\214\001\002\000" +
    "\046\002\uff92\004\uff92\006\uff92\007\uff92\011\uff92\012\uff92" +
    "\013\uff92\014\uff92\015\uff92\016\uff92\021\uff92\022\uff92\025" +
    "\uff92\042\uff92\043\uff92\044\uff92\071\uff92\072\uff92\001\002" +
    "\000\046\002\uffbc\004\uffbc\006\uffbc\007\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\021\uffbc\022\uffbc" +
    "\025\uffbc\042\uffbc\043\uffbc\044\uffbc\071\uffbc\072\uffbc\001" +
    "\002\000\046\002\uffce\004\uffce\006\uffce\007\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\021\uffce\022" +
    "\uffce\025\uffce\042\uffce\043\uffce\044\uffce\071\uffce\072\uffce" +
    "\001\002\000\046\002\uffcf\004\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\021\uffcf" +
    "\022\uffcf\025\uffcf\042\uffcf\043\uffcf\044\uffcf\071\uffcf\072" +
    "\uffcf\001\002\000\004\071\221\001\002\000\004\030\222" +
    "\001\002\000\046\002\uff98\004\uff98\006\uff98\007\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\021\uff98" +
    "\022\uff98\025\uff98\042\uff98\043\uff98\044\uff98\071\uff98\072" +
    "\uff98\001\002\000\004\071\224\001\002\000\004\030\225" +
    "\001\002\000\046\002\uff95\004\uff95\006\uff95\007\uff95\011" +
    "\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\021\uff95" +
    "\022\uff95\025\uff95\042\uff95\043\uff95\044\uff95\071\uff95\072" +
    "\uff95\001\002\000\046\002\uffcb\004\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\021" +
    "\uffcb\022\uffcb\025\uffcb\042\uffcb\043\uffcb\044\uffcb\071\uffcb" +
    "\072\uffcb\001\002\000\066\002\uffcc\004\uffcc\006\uffcc\007" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\021\uffcc\022\uffcc\025\uffcc\033\174\034\205\042\uffcc\043" +
    "\uffcc\044\uffcc\045\175\046\203\047\200\050\202\051\176" +
    "\052\201\071\uffcc\072\uffcc\001\002\000\066\002\uffcd\004" +
    "\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\021\uffcd\022\uffcd\025\uffcd\033\174\034" +
    "\205\042\uffcd\043\uffcd\044\uffcd\045\175\046\203\047\200" +
    "\050\202\051\176\052\201\071\uffcd\072\uffcd\001\002\000" +
    "\004\071\232\001\002\000\004\030\233\001\002\000\046" +
    "\002\uff94\004\uff94\006\uff94\007\uff94\011\uff94\012\uff94\013" +
    "\uff94\014\uff94\015\uff94\016\uff94\021\uff94\022\uff94\025\uff94" +
    "\042\uff94\043\uff94\044\uff94\071\uff94\072\uff94\001\002\000" +
    "\050\002\uffd9\004\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\021\uffd9\022\uffd9\025" +
    "\uffd9\032\131\042\uffd9\043\uffd9\044\uffd9\071\uffd9\072\uffd9" +
    "\001\002\000\052\002\uffd2\004\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\021\uffd2" +
    "\022\uffd2\025\uffd2\031\241\032\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\071\uffd2\072\uffd2\001\002\000\052\002\uffd3\004\uffd3" +
    "\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\021\uffd3\022\uffd3\025\uffd3\031\237\032\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\071\uffd3\072\uffd3\001\002\000" +
    "\006\043\235\071\236\001\002\000\050\002\uffd5\004\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\021\uffd5\022\uffd5\025\uffd5\032\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\071\uffd5\072\uffd5\001\002\000\006\043" +
    "\235\071\236\001\002\000\050\002\uffd4\004\uffd4\006\uffd4" +
    "\007\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\021\uffd4\022\uffd4\025\uffd4\032\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\071\uffd4\072\uffd4\001\002\000\046\002\uffda\004" +
    "\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\021\uffda\022\uffda\025\uffda\042\uffda\043" +
    "\uffda\044\uffda\071\uffda\072\uffda\001\002\000\004\071\245" +
    "\001\002\000\004\032\131\001\002\000\046\002\uffd7\004" +
    "\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\021\uffd7\022\uffd7\025\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\071\uffd7\072\uffd7\001\002\000\006\043\074" +
    "\071\077\001\002\000\006\057\253\060\252\001\002\000" +
    "\004\025\256\001\002\000\004\043\255\001\002\000\004" +
    "\043\254\001\002\000\004\025\uffa2\001\002\000\004\025" +
    "\uffa1\001\002\000\032\007\050\012\042\013\060\015\056" +
    "\016\054\021\065\025\066\042\044\043\052\044\061\071" +
    "\047\072\055\001\002\000\046\002\uffa0\004\uffa0\006\uffa0" +
    "\007\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\021\uffa0\022\uffa0\025\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\071\uffa0\072\uffa0\001\002\000\046\002\uffe9\004\uffe9\006" +
    "\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\021\uffe9\022\uffe9\025\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\071\uffe9\072\uffe9\001\002\000\046\002\uffec\004\uffec" +
    "\006\uffec\007\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\021\uffec\022\uffec\025\uffec\042\uffec\043\uffec" +
    "\044\uffec\071\uffec\072\uffec\001\002\000\046\002\ufff0\004" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\021\ufff0\022\ufff0\025\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\071\ufff0\072\ufff0\001\002\000\004\027\300" +
    "\001\002\000\054\002\uffd3\004\uffd3\006\uffd3\007\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\021\uffd3" +
    "\022\uffd3\025\uffd3\027\265\031\237\032\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\071\uffd3\072\uffd3\001\002\000\012\030\266" +
    "\031\103\044\106\071\107\001\002\000\032\007\050\012" +
    "\042\013\060\015\056\016\054\021\065\025\066\042\044" +
    "\043\052\044\061\071\047\072\055\001\002\000\004\030" +
    "\270\001\002\000\032\007\050\012\042\013\060\015\056" +
    "\016\054\021\065\025\066\042\044\043\052\044\061\071" +
    "\047\072\055\001\002\000\004\014\273\001\002\000\046" +
    "\002\uff9a\004\uff9a\006\uff9a\007\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\021\uff9a\022\uff9a\025\uff9a" +
    "\042\uff9a\043\uff9a\044\uff9a\071\uff9a\072\uff9a\001\002\000" +
    "\006\043\274\071\275\001\002\000\046\002\uffa4\004\uffa4" +
    "\006\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\021\uffa4\022\uffa4\025\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\071\uffa4\072\uffa4\001\002\000\046\002\uffa3\004" +
    "\uffa3\006\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\021\uffa3\022\uffa3\025\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\071\uffa3\072\uffa3\001\002\000\004\014\273" +
    "\001\002\000\046\002\uff99\004\uff99\006\uff99\007\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\021\uff99" +
    "\022\uff99\025\uff99\042\uff99\043\uff99\044\uff99\071\uff99\072" +
    "\uff99\001\002\000\012\030\301\031\103\044\106\071\107" +
    "\001\002\000\032\007\050\012\042\013\060\015\056\016" +
    "\054\021\065\025\066\042\044\043\052\044\061\071\047" +
    "\072\055\001\002\000\004\030\303\001\002\000\032\007" +
    "\050\012\042\013\060\015\056\016\054\021\065\025\066" +
    "\042\044\043\052\044\061\071\047\072\055\001\002\000" +
    "\004\014\273\001\002\000\046\002\uff89\004\uff89\006\uff89" +
    "\007\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016" +
    "\uff89\021\uff89\022\uff89\025\uff89\042\uff89\043\uff89\044\uff89" +
    "\071\uff89\072\uff89\001\002\000\004\014\273\001\002\000" +
    "\046\002\uff88\004\uff88\006\uff88\007\uff88\011\uff88\012\uff88" +
    "\013\uff88\014\uff88\015\uff88\016\uff88\021\uff88\022\uff88\025" +
    "\uff88\042\uff88\043\uff88\044\uff88\071\uff88\072\uff88\001\002" +
    "\000\046\002\uffb3\004\uffb3\006\uffb3\007\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\021\uffb3\022\uffb3" +
    "\025\uffb3\042\uffb3\043\uffb3\044\uffb3\071\uffb3\072\uffb3\001" +
    "\002\000\046\002\ufff1\004\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\021\ufff1\022" +
    "\ufff1\025\ufff1\042\ufff1\043\ufff1\044\ufff1\071\ufff1\072\ufff1" +
    "\001\002\000\012\030\313\031\103\044\106\071\107\001" +
    "\002\000\032\007\050\012\042\013\060\015\056\016\054" +
    "\021\065\025\066\042\044\043\052\044\061\071\047\072" +
    "\055\001\002\000\004\030\315\001\002\000\032\007\050" +
    "\012\042\013\060\015\056\016\054\021\065\025\066\042" +
    "\044\043\052\044\061\071\047\072\055\001\002\000\032" +
    "\007\uff8c\012\uff8c\013\uff8c\015\uff8c\016\uff8c\021\uff8c\025" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\071\uff8c\072\uff8c\001\002" +
    "\000\032\007\uff8b\012\uff8b\013\uff8b\015\uff8b\016\uff8b\021" +
    "\uff8b\025\uff8b\042\uff8b\043\uff8b\044\uff8b\071\uff8b\072\uff8b" +
    "\001\002\000\004\032\321\001\002\000\004\020\322\001" +
    "\002\000\004\072\323\001\002\000\004\027\324\001\002" +
    "\000\004\030\325\001\002\000\046\002\uff90\004\uff90\006" +
    "\uff90\007\uff90\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90" +
    "\016\uff90\021\uff90\022\uff90\025\uff90\042\uff90\043\uff90\044" +
    "\uff90\071\uff90\072\uff90\001\002\000\004\030\327\001\002" +
    "\000\004\042\044\001\002\000\032\007\uff8a\012\uff8a\013" +
    "\uff8a\015\uff8a\016\uff8a\021\uff8a\025\uff8a\042\uff8a\043\uff8a" +
    "\044\uff8a\071\uff8a\072\uff8a\001\002\000\004\010\332\001" +
    "\002\000\032\007\050\012\042\013\060\015\056\016\054" +
    "\021\065\025\066\042\044\043\052\044\061\071\047\072" +
    "\055\001\002\000\046\002\uffa8\004\uffa8\006\uffa8\007\uffa8" +
    "\011\335\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\021" +
    "\uffa8\022\uffa8\025\uffa8\042\uffa8\043\uffa8\044\uffa8\071\uffa8" +
    "\072\uffa8\001\002\000\046\002\uffa9\004\uffa9\006\uffa9\007" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\021\uffa9\022\uffa9\025\uffa9\042\uffa9\043\uffa9\044\uffa9\071" +
    "\uffa9\072\uffa9\001\002\000\032\007\050\012\042\013\060" +
    "\015\056\016\054\021\065\025\066\042\044\043\341\044" +
    "\061\071\340\072\055\001\002\000\050\002\uffe7\004\uffe7" +
    "\006\uffe7\007\050\010\uffac\011\uffe7\012\042\013\060\014" +
    "\uffe7\015\056\016\054\021\065\022\uffe7\025\066\042\044" +
    "\043\052\044\061\071\047\072\055\001\002\000\046\002" +
    "\uffa5\004\uffa5\006\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\021\uffa5\022\uffa5\025\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\071\uffa5\072\uffa5\001\002\000\074" +
    "\002\uffd8\004\uffd8\006\uffd8\007\uffd8\012\uffd8\013\uffd8\015" +
    "\uffd8\016\uffd8\021\uffd8\025\uffd8\032\346\033\174\034\205" +
    "\041\100\042\uffd8\043\uffd8\044\uffd8\045\175\046\203\047" +
    "\200\050\202\051\176\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\071\uffd8\072\uffd8\001\002\000\032\033\174\034" +
    "\205\045\175\046\203\047\200\050\202\051\176\052\uffaa" +
    "\053\uffaa\054\uffaa\055\uffaa\056\uffaa\001\002\000\004\010" +
    "\343\001\002\000\032\007\050\012\042\013\060\015\056" +
    "\016\054\021\065\025\066\042\044\043\052\044\061\071" +
    "\047\072\055\001\002\000\046\002\uffa6\004\uffa6\006\uffa6" +
    "\007\uffa6\011\335\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\021\uffa6\022\uffa6\025\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\071\uffa6\072\uffa6\001\002\000\046\002\uffa7\004\uffa7\006" +
    "\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\021\uffa7\022\uffa7\025\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\071\uffa7\072\uffa7\001\002\000\040\020\347\023\150" +
    "\024\152\036\135\037\144\040\134\043\142\061\141\062" +
    "\151\063\133\064\147\066\143\067\145\070\136\071\137" +
    "\001\002\000\004\072\350\001\002\000\004\027\351\001" +
    "\002\000\004\030\352\001\002\000\046\002\uff8f\004\uff8f" +
    "\006\uff8f\007\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\021\uff8f\022\uff8f\025\uff8f\042\uff8f\043\uff8f" +
    "\044\uff8f\071\uff8f\072\uff8f\001\002\000\046\002\uffe8\004" +
    "\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\021\uffe8\022\uffe8\025\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\071\uffe8\072\uffe8\001\002\000\046\002\ufff2" +
    "\004\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\025\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\071\ufff2\072\ufff2\001\002\000\046\002" +
    "\uff8e\004\uff8e\006\uff8e\007\uff8e\011\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\021\uff8e\022\uff8e\025\uff8e\042" +
    "\uff8e\043\uff8e\044\uff8e\071\uff8e\072\uff8e\001\002\000\046" +
    "\002\uffed\004\uffed\006\uffed\007\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\021\uffed\022\uffed\025\uffed" +
    "\042\uffed\043\uffed\044\uffed\071\uffed\072\uffed\001\002\000" +
    "\046\002\uffb4\004\uffb4\006\uffb4\007\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\021\uffb4\022\uffb4\025" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\071\uffb4\072\uffb4\001\002" +
    "\000\046\002\uffeb\004\uffeb\006\uffeb\007\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\021\uffeb\022\uffeb" +
    "\025\uffeb\042\uffeb\043\uffeb\044\uffeb\071\uffeb\072\uffeb\001" +
    "\002\000\006\002\ufff4\004\ufff4\001\002\000\046\002\uffea" +
    "\004\uffea\006\uffea\007\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\021\uffea\022\uffea\025\uffea\042\uffea" +
    "\043\uffea\044\uffea\071\uffea\072\uffea\001\002\000\046\002" +
    "\uffee\004\uffee\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\021\uffee\022\uffee\025\uffee\042" +
    "\uffee\043\uffee\044\uffee\071\uffee\072\uffee\001\002\000\004" +
    "\002\001\001\002\000\006\002\uffff\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\014\002\006\003\005\004\004\005\007\045" +
    "\003\001\001\000\010\003\005\004\364\005\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\021" +
    "\001\001\000\002\001\001\000\004\006\025\001\001\000" +
    "\002\001\001\000\004\010\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\011\037\012\045" +
    "\015\063\017\050\023\061\024\056\025\044\026\052\032" +
    "\066\034\034\035\042\037\062\040\040\041\036\042\033" +
    "\043\035\001\001\000\002\001\001\000\042\011\362\012" +
    "\045\015\063\017\050\023\061\024\056\025\044\026\052" +
    "\032\066\034\034\035\042\037\062\040\040\041\036\042" +
    "\033\043\035\001\001\000\042\011\352\012\045\015\063" +
    "\017\050\023\061\024\056\025\044\026\052\032\066\034" +
    "\034\035\042\037\062\040\040\041\036\042\033\043\035" +
    "\001\001\000\042\011\361\012\045\015\063\017\050\023" +
    "\061\024\056\025\044\026\052\032\066\034\034\035\042" +
    "\037\062\040\040\041\036\042\033\043\035\001\001\000" +
    "\004\007\360\001\001\000\042\011\357\012\045\015\063" +
    "\017\050\023\061\024\056\025\044\026\052\032\066\034" +
    "\034\035\042\037\062\040\040\041\036\042\033\043\035" +
    "\001\001\000\002\001\001\000\042\011\355\012\045\015" +
    "\063\017\050\023\061\024\056\025\044\026\052\032\066" +
    "\034\034\035\042\037\062\040\040\041\036\042\033\043" +
    "\035\001\001\000\004\015\354\001\001\000\002\001\001" +
    "\000\042\011\353\012\045\015\063\017\050\023\061\024" +
    "\056\025\044\026\052\032\066\034\034\035\042\037\062" +
    "\040\040\041\036\042\033\043\035\001\001\000\010\016" +
    "\203\020\214\022\127\001\001\000\010\013\330\031\075" +
    "\043\074\001\001\000\002\001\001\000\006\016\203\020" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\011\310\012\045\015" +
    "\063\017\050\023\061\024\056\025\044\026\052\032\066" +
    "\034\034\035\042\037\062\040\040\041\036\042\033\043" +
    "\035\001\001\000\004\021\307\001\001\000\004\021\233" +
    "\001\001\000\042\011\261\012\045\015\063\017\050\023" +
    "\061\024\056\025\044\026\052\032\066\034\034\035\042" +
    "\037\062\040\040\041\036\042\033\043\035\001\001\000" +
    "\042\011\260\012\045\015\063\017\050\023\061\024\056" +
    "\025\044\026\052\032\066\034\034\035\042\037\062\040" +
    "\040\041\036\042\033\043\035\001\001\000\042\011\257" +
    "\012\045\015\063\017\050\023\061\024\056\025\044\026" +
    "\052\032\066\034\034\035\042\037\062\040\040\041\036" +
    "\042\033\043\035\001\001\000\004\012\123\001\001\000" +
    "\042\011\070\012\045\015\063\017\050\023\061\024\056" +
    "\025\044\026\052\032\066\034\034\035\042\037\062\040" +
    "\040\041\036\042\033\043\035\001\001\000\042\011\067" +
    "\012\045\015\063\017\050\023\061\024\056\025\044\026" +
    "\052\032\066\034\034\035\042\037\062\040\040\041\036" +
    "\042\033\043\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\072\031\075\043\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\104\001\001\000\004\036\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\233\001\001\000\004\022\127\001\001\000\002" +
    "\001\001\000\014\013\145\017\137\031\075\043\074\044" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\203\020\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\203\020\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\203\020\210" +
    "\001\001\000\006\016\203\020\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\203\020\176\001\001" +
    "\000\006\016\203\020\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\237\001" +
    "\001\000\002\001\001\000\004\021\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\245\001\001\000\002\001\001\000\010\013\247\031\075" +
    "\043\074\001\001\000\004\033\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\011\256\012\045\015\063\017" +
    "\050\023\061\024\056\025\044\026\052\032\066\034\034" +
    "\035\042\037\062\040\040\041\036\042\033\043\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\266\001\001\000\042\011\275\012\045\015\063" +
    "\017\050\023\061\024\056\025\044\026\052\032\066\034" +
    "\034\035\042\037\062\040\040\041\036\042\033\043\035" +
    "\001\001\000\002\001\001\000\042\011\270\012\045\015" +
    "\063\017\050\023\061\024\056\025\044\026\052\032\066" +
    "\034\034\035\042\037\062\040\040\041\036\042\033\043" +
    "\035\001\001\000\004\027\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\276\001\001\000\002\001\001\000\004\036\301" +
    "\001\001\000\042\011\305\012\045\015\063\017\050\023" +
    "\061\024\056\025\044\026\052\032\066\034\034\035\042" +
    "\037\062\040\040\041\036\042\033\043\035\001\001\000" +
    "\002\001\001\000\042\011\303\012\045\015\063\017\050" +
    "\023\061\024\056\025\044\026\052\032\066\034\034\035" +
    "\042\037\062\040\040\041\036\042\033\043\035\001\001" +
    "\000\004\027\304\001\001\000\002\001\001\000\004\027" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\313\001\001\000\042\011\316\012" +
    "\045\015\063\017\050\023\061\024\056\025\044\026\052" +
    "\032\066\034\034\035\042\037\062\040\040\041\036\042" +
    "\033\043\035\001\001\000\002\001\001\000\042\011\315" +
    "\012\045\015\063\017\050\023\061\024\056\025\044\026" +
    "\052\032\066\034\034\035\042\037\062\040\040\041\036" +
    "\042\033\043\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\011\332\012\045\015\063\017" +
    "\050\023\061\024\056\025\044\026\052\032\066\034\034" +
    "\035\042\037\062\040\040\041\036\042\033\043\035\001" +
    "\001\000\004\014\333\001\001\000\002\001\001\000\046" +
    "\011\336\012\045\013\341\015\063\017\050\023\061\024" +
    "\056\025\044\026\052\031\075\032\066\034\034\035\042" +
    "\037\062\040\040\041\036\042\033\043\335\001\001\000" +
    "\042\011\352\012\045\015\063\017\050\023\061\024\056" +
    "\025\044\026\052\032\066\034\034\035\042\037\062\040" +
    "\040\041\036\042\033\043\035\001\001\000\002\001\001" +
    "\000\010\016\203\020\214\022\127\001\001\000\006\016" +
    "\203\020\176\001\001\000\002\001\001\000\042\011\343" +
    "\012\045\015\063\017\050\023\061\024\056\025\044\026" +
    "\052\032\066\034\034\035\042\037\062\040\040\041\036" +
    "\042\033\043\035\001\001\000\004\014\344\001\001\000" +
    "\002\001\001\000\014\013\145\017\137\031\075\043\074" +
    "\044\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    arbolSintactico = new Arbol();

    }


    
    public Arbol arbolSintactico;

    @Override
    public void syntax_error(Symbol sy) {
        token t=(token)sy.value;
        done_parsing();
        report_error("Error sintáctico cerca de " + t.getLexema() + ", F=" + t.getLinea() + ", C=" + t.getColumna() + ". ",null);
        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {


    Nodo principal = new Nodo(Nodo.TIPO_IDENTIFICADOR,"PRINCIPAL");
    Nodo propiedad = new Nodo(Nodo.TIPO_IDENTIFICADOR,"PROPIEDADES");
    Nodo metodos = new Nodo(Nodo.TIPO_IDENTIFICADOR,"METODOS");
    Nodo parametros = new Nodo(Nodo.TIPO_IDENTIFICADOR,"PARAMETROS");
    Nodo func = new Nodo(Nodo.TIPO_IDENTIFICADOR,"FUNCION");
    boolean banderaFuncion = false;
    int contPrincipal = 0;

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CLASE_GENERAL_CUP 
            {
              Object RESULT =null;
		int clasegeneralleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int clasegeneralright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo clasegeneral = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE_GENERAL_CUP ::= CLASE_GENERAL_CUP CLASES_CUP 
            {
              Nodo RESULT =null;
		int clasegeneralleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int clasegeneralright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo clasegeneral = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int clase1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int clase1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo clase1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    //Nodo clase = new Nodo(Nodo.TIPO_IDENTIFICADOR,"CLASE");
                                    //clase.agregarHijo(clasegeneral);
                                    //clase.agregarHijo(clase1);
                                    //RESULT=clase;
                                    parser.arbolSintactico.agregarHijo(clase1);
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASE_GENERAL_CUP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE_GENERAL_CUP ::= CLASES_CUP 
            {
              Nodo RESULT =null;
		int clase1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int clase1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo clase1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    parser.arbolSintactico.agregarHijo(clase1);
                                    //Nodo clase = new Nodo(Nodo.TIPO_IDENTIFICADOR,"CLASE");
                                    //clase.agregarHijo(clase1);
                                    //RESULT=clase;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASE_GENERAL_CUP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASES_CUP ::= DECLARACION_CLASES_CUP 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo clase = new Nodo(Nodo.TIPO_IDENTIFICADOR,"CLASE");
                                    clase.agregarHijo(dec);
                                    RESULT=clase;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASES_CUP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION_CLASES_CUP ::= ENCABEZADO_CUP PROPIEDADES_CUP METODOS_CUP 
            {
              Nodo RESULT =null;
		int encabezadoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int encabezadoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo encabezado = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int propiedadesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int propiedadesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo propiedades = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo metodo = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo decclase = new Nodo(Nodo.TIPO_IDENTIFICADOR,"MIEMBROS");                                
                                    decclase.agregarHijo(encabezado);
                                    decclase.agregarHijo(propiedades);
                                    decclase.agregarHijo(metodo);
                                    RESULT=decclase;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_CLASES_CUP",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENCABEZADO_CUP ::= CLASE VARIABLE_CLASE EXTIENDE VARIABLE_CLASE 
            {
              Nodo RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object clase = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int identificadorclaseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int identificadorclaseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token identificadorclase = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int extiendeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int extienderight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object extiende = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int identificadorclase1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int identificadorclase1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token identificadorclase1 = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo encabezado = new Nodo(Nodo.TIPO_IDENTIFICADOR,"ENCABEZADO");
                                    Nodo clase1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.CLASE);
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR_CLASE,identificadorclase.getLexema());
                                    Nodo extiende1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.EXTIENDE);
                                    Nodo identificador1 = new Nodo(Nodo.TIPO_IDENTIFICADOR_CLASE, identificadorclase1.getLexema());
                                    encabezado.agregarHijo(clase1);
                                    encabezado.agregarHijo(identificador);
                                    encabezado.agregarHijo(extiende1);
                                    encabezado.agregarHijo(identificador1);
                                    RESULT=encabezado;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO_CUP",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ENCABEZADO_CUP ::= CLASE VARIABLE_CLASE 
            {
              Nodo RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object clase = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token identificador = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo encabezado = new Nodo(Nodo.TIPO_IDENTIFICADOR,"NOMBRE");
                                    Nodo clase1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.CLASE);
                                    Nodo identificador1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, identificador.getLexema());                                                                
                                    encabezado.agregarHijo(clase1);
                                    encabezado.agregarHijo(identificador1);
                                    RESULT=encabezado;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO_CUP",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROPIEDADES_CUP ::= PROPIEDADES PROPIEDADES_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES_CUP PROPIEDADES_CUP 
            {
              Nodo RESULT =null;
		int propiedadesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int propiedadesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object propiedades = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int propmetodosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int propmetodosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object propmetodos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int dospuntosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dospuntosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object dospuntos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variablespropiedadesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variablespropiedadesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo variablespropiedades = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int propiedad2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int propiedad2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo propiedad2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    RESULT=propiedad;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDADES_CUP",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROPIEDADES_CUP ::= PROPIEDADES PROPIEDADES_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES_CUP 
            {
              Nodo RESULT =null;
		int propiedadesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int propiedadesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object propiedades = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int propmetodosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int propmetodosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object propmetodos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int dospuntosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dospuntosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object dospuntos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variablespropiedadesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variablespropiedadesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo variablespropiedades = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    RESULT=propiedad;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDADES_CUP",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLES_PROPIEDADES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE VARIABLES_PROPIEDADES_CUP 
            {
              Nodo RESULT =null;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token identificador = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variablespropiedades2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variablespropiedades2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo variablespropiedades2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo identificador1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,identificador.getLexema());
                                    propiedad.agregarHijo(identificador1);
                                    //RESULT=identificador1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES_CUP",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLES_PROPIEDADES_CUP ::= VARIABLE_CLASE VARIABLE 
            {
              Nodo RESULT =null;
		int variablecleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variablecright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variablec = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema() );   
                                    propiedad.agregarHijo(variable1);
                                    //RESULT=variable1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES_CUP",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLES_PROPIEDADES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE 
            {
              Nodo RESULT =null;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token identificador = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		                      
                                    Nodo identificador1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,identificador.getLexema() );  
                                    propiedad.agregarHijo(identificador1);
                                    //RESULT=identificador1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES_CUP",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // METODOS_CUP ::= METODOS PROPIEDADES_METODOS DOS_PUNTOS CODIGO_METODOS_CUP METODOS_CUP 
            {
              Nodo RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object metodo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int propmetodosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int propmetodosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object propmetodos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int dospuntosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dospuntosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object dospuntos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int codigosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int codigosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo codigos = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int metodos2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int metodos2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo metodos2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    RESULT=metodos;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("METODOS_CUP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // METODOS_CUP ::= METODOS PROPIEDADES_METODOS DOS_PUNTOS CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object metodo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int propmetodosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int propmetodosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object propmetodos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int dospuntosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dospuntosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object dospuntos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    RESULT=metodos;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("METODOS_CUP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CODIGO_METODOS_CUP ::= DECLARACION_VARIABLES_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo declaracion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    if(contPrincipal == 0){
                                        Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DECLA_VAR");
                                        codigo.agregarHijo(declaracion);
                                        RESULT=codigo;
                                    }else{
                                        System.out.println("DECLA_VAR principal");
                                    }
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CODIGO_METODOS_CUP ::= LECTURA_ESCRITURA_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int leerescribirleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int leerescribirright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo leerescribir = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    if(contPrincipal == 0){
                                        Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "R/W");
                                        codigo.agregarHijo(leerescribir);
                                        //func.agregarHijo(codigo);
                                        RESULT=codigo;
                                    }else{}
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CODIGO_METODOS_CUP ::= ESTRUCTURA_SELECTIVA_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int estructuraselectivaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int estructuraselectivaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo estructuraselectiva = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    if(contPrincipal == 0){
                                        Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "SELECTIVA");
                                        codigo.agregarHijo(estructuraselectiva);
                                        func.agregarHijo(codigo);
                                        RESULT=codigo;
                                    }else{}
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CODIGO_METODOS_CUP ::= DESDE_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo desde = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DESDE");
                                    codigo.agregarHijo(desde);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CODIGO_METODOS_CUP ::= HACER_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int hacerleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int hacerright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo hacer = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "HACER");
                                    codigo.agregarHijo(hacer);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CODIGO_METODOS_CUP ::= FUNCIONES_SUELTAS_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo funciones = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		

                                    parametros = new Nodo(Nodo.TIPO_IDENTIFICADOR,"PARAMETROS");
                                    Nodo codigo = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    metodos.agregarHijo(func);
                                    RESULT=func;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CODIGO_METODOS_CUP ::= INSTANCIACION_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int instanciacionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int instanciacionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo instanciacion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "INSTANCIACION");
                                    codigo.agregarHijo(instanciacion);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CODIGO_METODOS_CUP ::= CONSTRUCTOR_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int constructorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int constructorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo constructor = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "CONSTRUCTOR");
                                    codigo.agregarHijo(constructor);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CODIGO_METODOS_CUP ::= DESTRUCTOR_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int destructorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int destructorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo destructor = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DESTRUCTOR");
                                    codigo.agregarHijo(destructor);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CODIGO_METODOS_CUP ::= VARIAS_VARIABLES_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int variasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo varias = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLES");
                                    codigo.agregarHijo(varias);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CODIGO_METODOS_CUP ::= LLAMADA_METODO_CLASE_CUP CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigos1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigos1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "CALL_CLASE");
                                    codigo.agregarHijo(llamada);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CODIGO_METODOS_CUP ::= LLAMADA_METODO_CLASE_CUP 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "CALL_METOD");
                                    codigo.agregarHijo(llamada);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CODIGO_METODOS_CUP ::= PROGRAMA_PRINCIPAL_CUP 
            {
              Nodo RESULT =null;
		int programaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int programaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo programa = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    //Nodo codigo  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    //codigo.agregarHijo(programa);
                                    //RESULT=codigo;
                                    Nodo program = new Nodo(Nodo.TIPO_IDENTIFICADOR, "PRINCIPAL");
                                    parser.arbolSintactico.agregarHijo(program);
                                    contPrincipal++;
                                    RESULT = program;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CODIGO_METODOS_CUP ::= VARIAS_VARIABLES_CUP 
            {
              Nodo RESULT =null;
		int variasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo varias = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "MULTIPLE_VARS");
                                    codigo.agregarHijo(varias);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CODIGO_METODOS_CUP ::= INSTANCIACION_CUP 
            {
              Nodo RESULT =null;
		int instanciacionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int instanciacionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo instanciacion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "INSTANCIACION");
                                    codigo.agregarHijo(instanciacion);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CODIGO_METODOS_CUP ::= FUNCIONES_SUELTAS_CUP 
            {
              Nodo RESULT =null;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo funciones = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    parametros = new Nodo(Nodo.TIPO_IDENTIFICADOR,"PARAMETROS");
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR,"FUNCION");
                                    metodos.agregarHijo(funciones);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CODIGO_METODOS_CUP ::= HACER_CUP 
            {
              Nodo RESULT =null;
		int hacerleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int hacerright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo hacer = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "HACER");
                                    codigo.agregarHijo(hacer);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CODIGO_METODOS_CUP ::= DESDE_CUP 
            {
              Nodo RESULT =null;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo desde = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DESDE");
                                    codigo.agregarHijo(desde);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CODIGO_METODOS_CUP ::= ESTRUCTURA_SELECTIVA_CUP 
            {
              Nodo RESULT =null;
		int estructuraselectivaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int estructuraselectivaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo estructuraselectiva = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    if(contPrincipal == 0){
                                        Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "SELECTIVA");
                                        codigo.agregarHijo(estructuraselectiva);
                                        func.agregarHijo(codigo);
                                        RESULT=codigo;
                                    }
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CODIGO_METODOS_CUP ::= LECTURA_ESCRITURA_CUP 
            {
              Nodo RESULT =null;
		int leerescribirleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int leerescribirright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo leerescribir = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "R/W");
                                    codigo.agregarHijo(leerescribir);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CODIGO_METODOS_CUP ::= REALIZAR_OPERACION_CUP 
            {
              Nodo RESULT =null;
		int realizarleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int realizarright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo realizar = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DO_OPER");
                                    codigo.agregarHijo(realizar);
                                    func.agregarHijo(codigo);
                                    RESULT=codigo;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CODIGO_METODOS_CUP ::= DECLARACION_VARIABLES_CUP 
            {
              Nodo RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo declaracion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    if(contPrincipal == 0){
                                        Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DECLA_VAR");
                                        codigo.agregarHijo(declaracion);
                                        RESULT=codigo;
                                    }else{
                                        Nodo codigo = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DECLA_VAR");
                                        codigo.agregarHijo(declaracion);
                                        principal.agregarHijo(codigo);
                                        RESULT=principal;
                                    }
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LLAMADA_METODO_CLASE_CUP ::= VARIABLE PUNTO VARIABLE PARENTESIS1 LISTA_VARIABLES_CUP PARENTESIS2 
            {
              Nodo RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int puntoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int puntoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object punto = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		token variable2 = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo declaracion  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() );
                                    Nodo punto1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PUNTO );
                                    Nodo identificador1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable2.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    declaracion.agregarHijo(identificador);
                                    declaracion.agregarHijo(punto1);
                                    declaracion.agregarHijo(identificador1);
                                    declaracion.agregarHijo(p222);
                                    declaracion.agregarHijo(lista);
                                    declaracion.agregarHijo(p22);
                                    RESULT=declaracion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO_CLASE_CUP",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LLAMADA_METODO_CLASE_CUP ::= VARIABLE PUNTO VARIABLE PARENTESIS1 PARENTESIS2 
            {
              Nodo RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int puntoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int puntoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object punto = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token variable2 = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo declaracion  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() );
                                    Nodo punto1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PUNTO );
                                    Nodo identificador1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable2.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    declaracion.agregarHijo(identificador);
                                    declaracion.agregarHijo(punto1);
                                    declaracion.agregarHijo(identificador1);
                                    declaracion.agregarHijo(p222);
                                    declaracion.agregarHijo(p22);
                                    RESULT=declaracion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_METODO_CLASE_CUP",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_VARIABLES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLES_CUP VALOR_INICIAL_CUP 
            {
              Nodo RESULT =null;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo variable = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int valinicialleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valinicialright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo valinicial = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo declaracion  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DEC_VAR");
                                    //Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema());
                                    declaracion.agregarHijo(variable);
                                    declaracion.agregarHijo(valinicial);
                                    RESULT=declaracion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_VARIABLES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLES_CUP 
            {
              Nodo RESULT =null;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo variable = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo declaracion  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DEC_VAR");
                                    declaracion.agregarHijo(variable);
                                    RESULT=declaracion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_VARIABLES_CUP ::= VARIABLE 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token identificador = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo declaracion  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DEC_VAR");
                                    Nodo identificador1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, identificador.getLexema() );
                                    declaracion.agregarHijo(identificador1);
                                    RESULT=declaracion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_VARIABLES_CUP ::= VARIABLE_CLASE PUNTO VARIABLE VALOR_INICIAL_CUP 
            {
              Nodo RESULT =null;
		int identificadorclaseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int identificadorclaseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		token identificadorclase = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int puntoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int puntoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object punto = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token identificador = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int valinicialleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valinicialright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo valinicial = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo declaracion  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DEC_VAR");
                                    Nodo identificadorclase1 = new Nodo(Nodo.TIPO_IDENTIFICADOR_CLASE,identificadorclase.getLexema() );
                                    Nodo punto1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PUNTO );
                                    Nodo identificador1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, identificador.getLexema() );
                                    declaracion.agregarHijo(identificadorclase1);
                                    declaracion.agregarHijo(punto1);
                                    declaracion.agregarHijo(identificador1);
                                    declaracion.agregarHijo(valinicial);
                                    RESULT=declaracion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_VARIABLES_CUP ::= VARIABLE VALOR_INICIAL_CUP 
            {
              Nodo RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo declaracion  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DEC_VAR");
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() );
                                    declaracion.agregarHijo(identificador);
                                    declaracion.agregarHijo(val);
                                    RESULT=declaracion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIABLES_CUP ::= VARIABLE COMA VARIABLES_CUP 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token identificador = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo variable2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo variables  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLE");
                                    Nodo identificador1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, identificador.getLexema() );
                                    Nodo coma1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.COMA );
                                    variables.agregarHijo(identificador1);
                                    variables.agregarHijo(coma1);
                                    variables.agregarHijo(variable2);
                                    RESULT=variables;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARIABLES_CUP ::= TIPO_DATO_CUP COMA VARIABLES_CUP 
            {
              Nodo RESULT =null;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo variable = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLE");
                                    Nodo variables  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo coma1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.COMA );
                                    variables.agregarHijo(tipodato1);
                                    variables.agregarHijo(coma1);
                                    variables.agregarHijo(variable);
                                    RESULT=variables;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARIABLES_CUP ::= VARIABLE 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token identificador = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo variables  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLE");
                                    Nodo identificador1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, identificador.getLexema() );
                                    variables.agregarHijo(identificador1);
                                    RESULT=variables;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARIABLES_CUP ::= TIPO_DATO_CUP 
            {
              Nodo RESULT =null;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo variables  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_VAR");
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    variables.agregarHijo(tipodato1);
                                    RESULT=variables;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALOR_INICIAL_CUP ::= IGUAL DECREMENTO VARIABLE 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);
                                    Nodo menos2 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.DECREMENTO );
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() );
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(menos2);
                                    valinicial.agregarHijo(identificador);
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALOR_INICIAL_CUP ::= IGUAL INCREMENTO VARIABLE 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);
                                    Nodo mas2 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.INCREMENTO );
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() );
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(mas2);
                                    valinicial.agregarHijo(identificador);
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALOR_INICIAL_CUP ::= IGUAL VARIABLE DECREMENTO 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);
                                    Nodo menos2 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.DECREMENTO );
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() );
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(identificador);                                
                                    valinicial.agregarHijo(menos2);
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALOR_INICIAL_CUP ::= IGUAL VARIABLE INCREMENTO 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() );                                
                                    Nodo mas2 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.INCREMENTO );
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(identificador);                                
                                    valinicial.agregarHijo(mas2);
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALOR_INICIAL_CUP ::= IGUAL MENOS VARIABLE 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int menosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object menos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);                               
                                    Nodo menos2 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.MENOS );
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() );
                                    valinicial.agregarHijo(igual1);                          
                                    valinicial.agregarHijo(menos2);
                                    valinicial.agregarHijo(identificador);  
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALOR_INICIAL_CUP ::= IGUAL MENOS TIPO_DATO_CUP 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int menosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object menos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);                           
                                    Nodo menos2 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.MENOS );
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    valinicial.agregarHijo(igual1);                          
                                    valinicial.agregarHijo(menos2);
                                    valinicial.agregarHijo(tipodato1);  
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALOR_INICIAL_CUP ::= IGUAL MENOS REALIZAR_OPERACION_CUP 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int menosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object menos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int realizarleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int realizarright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo realizar = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);                           
                                    Nodo menos2 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.MENOS );                           
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(menos2);
                                    valinicial.agregarHijo(realizar);  
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALOR_INICIAL_CUP ::= IGUAL VARIABLE 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);                               
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() );                        
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(identificador);  
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALOR_INICIAL_CUP ::= IGUAL TIPO_DATO_CUP 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);                              
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(tipodato1);  
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALOR_INICIAL_CUP ::= IGUAL REALIZAR_OPERACION_CUP 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int realizarleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int realizarright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo realizar = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);                              
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(realizar);  
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR_INICIAL_CUP ::= IGUAL CONDICION_CUP 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);                               
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(condicion);  
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR_INICIAL_CUP ::= IGUAL NUEVO VARIABLE_CLASE PARENTESIS1 PARENTESIS2 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int nuevoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nuevoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object nuevo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int variablecleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int variablecright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token variablec = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);                              
                                    Nodo nuevo1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.NUEVO );                               
                                    Nodo variablec1 = new Nodo(Nodo.TIPO_IDENTIFICADOR_CLASE,variablec.getLexema() );                               
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);                       
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(nuevo1);
                                    valinicial.agregarHijo(variablec1);
                                    valinicial.agregarHijo(p222);
                                    valinicial.agregarHijo(p22) ;
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR_INICIAL_CUP ::= IGUAL FUNCIONES_PREDEFINIDAS_CUP 
            {
              Nodo RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo funciones = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo valinicial  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VAL_INI");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);                          
                                    valinicial.agregarHijo(igual1);
                                    valinicial.agregarHijo(funciones) ;
                                    RESULT=valinicial;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACIONES_CUP ::= SUMA 
            {
              Nodo RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int masright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object mas = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo operaciones  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo mas1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.SUMA );                               
                                    operaciones.agregarHijo(mas1);
                                    RESULT=operaciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACIONES_CUP ::= RESTA 
            {
              Nodo RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object resta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo operaciones  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo resta1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.RESTA );                               
                                    operaciones.agregarHijo(resta1);
                                    RESULT=operaciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACIONES_CUP ::= MULTIPLICACION 
            {
              Nodo RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object mult = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo operaciones  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo mult1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.MULTIPLICACION );     
                                    operaciones.agregarHijo(mult1);
                                    RESULT=operaciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACIONES_CUP ::= DIVISION 
            {
              Nodo RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo operaciones  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo div1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.DIVISION );                                
                                    operaciones.agregarHijo(div1);
                                    RESULT=operaciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACIONES_CUP ::= MODULO 
            {
              Nodo RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo operaciones  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo mod1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.MODULO );                                
                                    operaciones.agregarHijo(mod1);
                                    RESULT=operaciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACIONES_CUP ::= EXPONENCIACION 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo operaciones  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo exp1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.EXPONENCIACION );                                
                                    operaciones.agregarHijo(exp1);
                                    RESULT=operaciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACIONES_CUP ::= AND 
            {
              Nodo RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo operaciones  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo and1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.AND );                                
                                    operaciones.agregarHijo(and1);
                                    RESULT=operaciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACIONES_CUP ::= OR 
            {
              Nodo RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo operaciones  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo or1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.OR );                                
                                    operaciones.agregarHijo(or1);
                                    RESULT=operaciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // REALIZAR_OPERACION_CUP ::= VARIABLE LISTA_OPERACIONES_CUP 
            {
              Nodo RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo realizar  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo identificador = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() );                             
                                    realizar.agregarHijo(identificador);
                                    realizar.agregarHijo(lista);
                                    RESULT=realizar;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REALIZAR_OPERACION_CUP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // REALIZAR_OPERACION_CUP ::= TIPO_DATO_CUP LISTA_OPERACIONES_CUP 
            {
              Nodo RESULT =null;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo realizar  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    realizar.agregarHijo(tipodato1);
                                    realizar.agregarHijo(lista);
                                    RESULT=realizar;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REALIZAR_OPERACION_CUP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP VARIABLE LISTA_OPERACIONES_CUP 
            {
              Nodo RESULT =null;
		int operacionesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int operacionesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo operaciones = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo lista2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lista  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() ); 
                                    lista.agregarHijo(operaciones);
                                    lista.agregarHijo(variable1);
                                    lista.agregarHijo(lista2);
                                    RESULT=lista;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP TIPO_DATO_CUP LISTA_OPERACIONES_CUP 
            {
              Nodo RESULT =null;
		int operacionesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int operacionesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo operaciones = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo lista2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lista  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    lista.agregarHijo(operaciones);
                                    lista.agregarHijo(tipodato1);
                                    lista.agregarHijo(lista2);
                                    RESULT=lista;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP TIPO_DATO_CUP 
            {
              Nodo RESULT =null;
		int operacionesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operacionesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo operaciones = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lista  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    lista.agregarHijo(operaciones);
                                    lista.agregarHijo(tipodato1);
                                    RESULT=lista;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP VARIABLE 
            {
              Nodo RESULT =null;
		int operacionesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operacionesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo operaciones = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lista  = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() ); 
                                    lista.agregarHijo(operaciones);
                                    lista.agregarHijo(variable1);
                                    RESULT=lista;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LECTURA_ESCRITURA_CUP ::= LECTURA_CUP 
            {
              Nodo RESULT =null;
		int lecturaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lecturaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo lectura = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lecturaescritura  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "READ");
                                    RESULT=lecturaescritura;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA_ESCRITURA_CUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LECTURA_ESCRITURA_CUP ::= ESCRITURA_CUP 
            {
              Nodo RESULT =null;
		int escrituraleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int escrituraright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo escritura = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lecturaescritura  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "WRITE");
                                    RESULT=lecturaescritura;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA_ESCRITURA_CUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LECTURA_CUP ::= LEER VARIABLE 
            {
              Nodo RESULT =null;
		int leerleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int leerright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object leer = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lectura  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLE");
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() ); 
                                    lectura.agregarHijo(variable1);
                                    RESULT=lectura;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA_CUP",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ESCRITURA_CUP ::= ESCRIBIR VARIABLES_CUP 
            {
              Nodo RESULT =null;
		int escribirleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int escribirright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object escribir = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo variable = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo escritura  = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLE(S)");
                                    escritura.agregarHijo(variable);
                                    RESULT=escritura;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA_CUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORES_LOGICOS_CUP ::= MENOR_QUE 
            {
              Nodo RESULT =null;
		int menor1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int menor1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object menor1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo logicos = new Nodo(Nodo.TIPO_IDENTIFICADOR, "MENOR_QUE");
                                    Nodo menor = new Nodo(Nodo.TIPO_OPERADOR,Nodo.MENOR_QUE );
                                    logicos.agregarHijo(menor);                                 
                                    RESULT=logicos;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADORES_LOGICOS_CUP ::= MAYOR_QUE 
            {
              Nodo RESULT =null;
		int mayor1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mayor1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object mayor1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo logicos = new Nodo(Nodo.TIPO_IDENTIFICADOR, "MAYOR_QUE");
                                    Nodo mayor = new Nodo(Nodo.TIPO_OPERADOR,Nodo.MAYOR_QUE );
                                    logicos.agregarHijo(mayor) ;                                
                                    RESULT=logicos;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADORES_LOGICOS_CUP ::= IGUAL_QUE 
            {
              Nodo RESULT =null;
		int igualq1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int igualq1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object igualq1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo logicos = new Nodo(Nodo.TIPO_IDENTIFICADOR, "IGUAL_QUE");
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL_QUE);
                                    logicos.agregarHijo(igual1);    ;                             
                                    RESULT=logicos;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADORES_LOGICOS_CUP ::= DISTINTO_QUE 
            {
              Nodo RESULT =null;
		int distinto1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int distinto1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object distinto1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo logicos = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DISTINTO_QUE");
                                    Nodo distinto = new Nodo(Nodo.TIPO_OPERADOR,Nodo.DISTINTO_QUE );
                                    logicos.agregarHijo(distinto)        ;                         
                                    RESULT=logicos;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORES_LOGICOS_CUP ::= MODULO 
            {
              Nodo RESULT =null;
		int moduloleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int moduloright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object modulo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo logicos = new Nodo(Nodo.TIPO_IDENTIFICADOR, "MODULO");
                                    Nodo modulo1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.MODULO );
                                    logicos.agregarHijo(modulo1);                                 
                                    RESULT=logicos;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION_CUP ::= TIPOS_DATOS_CONDICIONES_CUP OPERADORES_LOGICOS_CUP TIPOS_DATOS_CONDICIONES_CUP 
            {
              Nodo RESULT =null;
		int tipodatocondicionesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tipodatocondicionesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo tipodatocondiciones = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int logicosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int logicosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo logicos = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tipodatocondiciones1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tipodatocondiciones1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo tipodatocondiciones1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo condicion = new Nodo(Nodo.TIPO_IDENTIFICADOR, "CONDICION");
                                    condicion.agregarHijo(tipodatocondiciones);
                                    condicion.agregarHijo(logicos);
                                    condicion.agregarHijo(tipodatocondiciones1);                                    
                                    RESULT=condicion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_CUP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION_CUP ::= LLAMADA_METODO_CLASE_CUP 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo condicion = new Nodo(Nodo.TIPO_IDENTIFICADOR, "CONDICION");
                                    condicion.agregarHijo(llamada);
                                    RESULT=condicion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_CUP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPOS_DATOS_CONDICIONES_CUP ::= VARIABLE 
            {
              Nodo RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo tipodatocondiciones = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLE");
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema() ); 
                                    tipodatocondiciones.agregarHijo(variable1) ;                                
                                    RESULT=tipodatocondiciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_DATOS_CONDICIONES_CUP",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPOS_DATOS_CONDICIONES_CUP ::= TIPO_DATO_CUP 
            {
              Nodo RESULT =null;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo tipodatocondiciones = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VALOR_VAR");
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    tipodatocondiciones.agregarHijo(tipodato1) ;                                
                                    RESULT=tipodatocondiciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_DATOS_CONDICIONES_CUP",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ESTRUCTURA_SELECTIVA_CUP ::= IF CONDICION_CUP ENTONCES CODIGO_METODOS_CUP ELSE_CUP 
            {
              Nodo RESULT =null;
		int if11left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int if11right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object if11 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int entoncesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int entoncesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object entonces = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int devolucionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int devolucionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo devolucion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo else1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo estructuraselectiva = new Nodo(Nodo.TIPO_IDENTIFICADOR, "SI_NO");
                                    Nodo if1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.IF );
                                    Nodo entonces1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.ENTONCES );
                                    estructuraselectiva.agregarHijo(if1);
                                    estructuraselectiva.agregarHijo(condicion);
                                    estructuraselectiva.agregarHijo(entonces1);
                                    estructuraselectiva.agregarHijo(devolucion);       
                                    estructuraselectiva.agregarHijo(else1);                             
                                    RESULT=estructuraselectiva;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SELECTIVA_CUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ESTRUCTURA_SELECTIVA_CUP ::= IF CONDICION_CUP ENTONCES CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int if11left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int if11right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object if11 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int entoncesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int entoncesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object entonces = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int devolucionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int devolucionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo devolucion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo estructuraselectiva = new Nodo(Nodo.TIPO_IDENTIFICADOR, "SI");
                                    Nodo if1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.IF );
                                    Nodo entonces1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.ENTONCES );
                                    estructuraselectiva.agregarHijo(if1);
                                    estructuraselectiva.agregarHijo(condicion);
                                    estructuraselectiva.agregarHijo(entonces1);
                                    estructuraselectiva.agregarHijo(devolucion) ;                                           
                                    RESULT=estructuraselectiva;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SELECTIVA_CUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELSE_CUP ::= SINO CONDICION_CUP ENTONCES CODIGO_METODOS_CUP ELSE_CUP 
            {
              Nodo RESULT =null;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object sino = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int entoncesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int entoncesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object entonces = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int devolucionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int devolucionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo devolucion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo else1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo else2 = new Nodo(Nodo.TIPO_IDENTIFICADOR, "ELSE");
                                    Nodo sino1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.SINO );
                                    Nodo entonces1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.ENTONCES );
                                    else2.agregarHijo(sino1)  ;
                                    else2.agregarHijo(condicion);
                                    else2.agregarHijo(entonces1);
                                    else2.agregarHijo(devolucion);
                                    else2.agregarHijo(else1)  ;      
                                    RESULT=else2;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_CUP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELSE_CUP ::= SINO CONDICION_CUP ENTONCES CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object sino = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int entoncesleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int entoncesright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object entonces = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int devolucionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int devolucionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo devolucion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo else1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, "ELSE");
                                    Nodo sino1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.SINO );
                                    Nodo entonces1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.ENTONCES );
                                    else1.agregarHijo(sino1)  ;
                                    else1.agregarHijo(condicion);
                                    else1.agregarHijo(entonces1);
                                    else1.agregarHijo(devolucion)   ;   
                                    RESULT=else1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_CUP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELSE_CUP ::= SINO CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object sino = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int devolucionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int devolucionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo devolucion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo else1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, "ELSE");
                                    Nodo sino1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.SINO );
                                    else1.agregarHijo(sino1);  
                                    else1.agregarHijo(devolucion);      
                                    RESULT=else1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_CUP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DEVOLUCION_CUP ::= DEVOLVER TIPO_DATO_CUP 
            {
              Nodo RESULT =null;
		int devolverleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int devolverright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object devolver = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo devolucion = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DEVOLVER");
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    devolucion.agregarHijo(tipodato1);   
                                    RESULT=devolucion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEVOLUCION_CUP",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DEVOLUCION_CUP ::= DEVOLVER VARIABLE 
            {
              Nodo RESULT =null;
		int devolverleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int devolverright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object devolver = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo devolucion = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DEVOLVER");
                                    Nodo devolver1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.DEVOLVER );
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema()  );
                                    devolucion.agregarHijo(devolver1) ;
                                    devolucion.agregarHijo(variable1)  ;   
                                    RESULT=devolucion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEVOLUCION_CUP",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INC_DEC_VAR ::= INCREMENTAR TIPO_DATO_CUP 
            {
              Nodo RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo incrementar = new Nodo(Nodo.TIPO_IDENTIFICADOR, "INCREMENTAR");
                                    Nodo inc1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.INCREMENTAR );
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    incrementar.agregarHijo(inc1) ;
                                    incrementar.agregarHijo(tipodato1);     
                                    RESULT=incrementar;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INC_DEC_VAR",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INC_DEC_VAR ::= DECREMENTAR TIPO_DATO_CUP 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo decrementar = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DECREMENTAR");
                                    Nodo dec1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.DECREMENTAR );
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    decrementar.agregarHijo(dec1) ;
                                    decrementar.agregarHijo(tipodato1);     
                                    RESULT=decrementar;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INC_DEC_VAR",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DESDE_CUP ::= DESDE DECLARACION_VARIABLES_CUP MIENTRAS CONDICION_CUP INC_DEC_VAR HACER CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object desde = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Nodo declaracion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object mientras = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int incrementarleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int incrementarright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo incrementar = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int hacerleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int hacerright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object hacer = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigo = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo desde2 = new Nodo(Nodo.TIPO_IDENTIFICADOR, "DESDE");
                                    Nodo desde1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.DESDE );
                                    Nodo mientras1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.MIENTRAS );
                                    Nodo hacer1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.HACER );
                                    desde2.agregarHijo(desde1);
                                    desde2.agregarHijo(declaracion);
                                    desde2.agregarHijo(mientras1);
                                    desde2.agregarHijo(condicion) ;
                                    desde2.agregarHijo(incrementar); 
                                    desde2.agregarHijo(hacer1);
                                    desde2.agregarHijo(codigo) ;   
                                    RESULT=desde2;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DESDE_CUP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // HACER_CUP ::= HACER CODIGO_METODOS_CUP MIENTRAS CONDICION_CUP 
            {
              Nodo RESULT =null;
		int hacer1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int hacer1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object hacer1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int codigoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int codigoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo codigo = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object mientras = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo hacer = new Nodo(Nodo.TIPO_IDENTIFICADOR, "HACER");
                                    Nodo hacer2 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.HACER );
                                    Nodo mientras1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.MIENTRAS );
                                    hacer.agregarHijo(hacer2);
                                    hacer.agregarHijo(codigo);
                                    hacer.agregarHijo(mientras1);
                                    hacer.agregarHijo(condicion);  

                                    RESULT=hacer;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("HACER_CUP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LISTA_VARIABLES_CUP ::= COMA LISTA_VARIABLES_CUP 
            {
              Nodo RESULT =null;
		int comaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo lista1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lista = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLE_1");
                                    //lista.agregarHijo(lista1);
                                    RESULT=lista;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES_CUP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LISTA_VARIABLES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE LISTA_VARIABLES_CUP 
            {
              Nodo RESULT =null;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo lista1 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lista = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLE_2");
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema()  );
                                    //lista.agregarHijo(variable1);
                                    //lista.agregarHijo(lista1);
                                    parametros.agregarHijo(variable1);
                                    RESULT=lista;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES_CUP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LISTA_VARIABLES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE 
            {
              Nodo RESULT =null;
		int tipodatoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tipodatoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipodato = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lista = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLE_3");
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema());
                                    Nodo tipodato1 = new Nodo(Nodo.TIPO_DATO_CUP, 0);
                                    //lista.agregarHijo(tipodato1);
                                    //lista.agregarHijo(variable1);
                                    parametros.agregarHijo(variable1);
                                    RESULT=lista;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES_CUP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LISTA_VARIABLES_CUP ::= VARIABLE 
            {
              Nodo RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo lista = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIABLE_4");
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema()  );
                                    //lista.agregarHijo(variable1);
                                    parametros.agregarHijo(variable1);
                                    //RESULT=lista;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES_CUP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCIONES_SUELTAS_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE PARENTESIS1 LISTA_VARIABLES_CUP PARENTESIS2 CODIGO_METODOS_CUP DEVOLUCION_CUP 
            {
              Nodo RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object palabra = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo metodo = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int devolucionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int devolucionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo devolucion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema());
                                    this.func.agregarHijo(variable1);
                                    this.func.agregarHijo(this.parametros);
                                    this.func.agregarHijo(metodo);
                                    this.func.agregarHijo(devolucion);
                                    RESULT = this.func;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_SUELTAS_CUP",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCIONES_SUELTAS_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE PARENTESIS1 PARENTESIS2 CODIGO_METODOS_CUP DEVOLUCION_CUP 
            {
              Nodo RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object palabra = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo metodo = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int devolucionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int devolucionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo devolucion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema());
                                    this.func.agregarHijo(variable1);
                                    this.func.agregarHijo(metodo);
                                    this.func.agregarHijo(devolucion);
                                    RESULT = this.func;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_SUELTAS_CUP",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCIONES_PREDEFINIDAS_CUP ::= CADENA_A_ENTERO PARENTESIS1 VARIABLE PARENTESIS2 
            {
              Nodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo funciones = new Nodo(Nodo.TIPO_IDENTIFICADOR, "CADENA_ENTERO");
                                    Nodo ce1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.CADENA_A_ENTERO);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    funciones.agregarHijo(ce1);
                                    funciones.agregarHijo(variable1);
                                    RESULT=funciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PREDEFINIDAS_CUP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCIONES_PREDEFINIDAS_CUP ::= CADENA_A_REAL PARENTESIS1 VARIABLE PARENTESIS2 
            {
              Nodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo funciones = new Nodo(Nodo.TIPO_IDENTIFICADOR, "CADENA_REAL");
                                    Nodo ce1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.CADENA_A_REAL);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    funciones.agregarHijo(ce1);
                                    funciones.agregarHijo(variable1);
                                    RESULT=funciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PREDEFINIDAS_CUP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCIONES_PREDEFINIDAS_CUP ::= CADENA_A_BOOLEANO PARENTESIS1 VARIABLE PARENTESIS2 
            {
              Nodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo funciones = new Nodo(Nodo.TIPO_IDENTIFICADOR, "CADENA_BOOLEANO");
                                    Nodo ce1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.CADENA_A_BOOLEANO);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    funciones.agregarHijo(ce1);
                                    funciones.agregarHijo(variable1);
                                    RESULT=funciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PREDEFINIDAS_CUP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCIONES_PREDEFINIDAS_CUP ::= RAIZ PARENTESIS1 VARIABLE PARENTESIS2 
            {
              Nodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo funciones = new Nodo(Nodo.TIPO_IDENTIFICADOR, "RAIZ");
                                    Nodo ce1 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.RAIZ);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    funciones.agregarHijo(ce1);
                                    funciones.agregarHijo(variable1);
                                    RESULT=funciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PREDEFINIDAS_CUP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCIONES_PREDEFINIDAS_CUP ::= TANGENTE PARENTESIS1 VARIABLE PARENTESIS2 
            {
              Nodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo funciones = new Nodo(Nodo.TIPO_IDENTIFICADOR, "TANGENTE");
                                    Nodo ce1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.TANGENTE);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    funciones.agregarHijo(ce1);
                                    funciones.agregarHijo(variable1);
                                    RESULT=funciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PREDEFINIDAS_CUP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUNCIONES_PREDEFINIDAS_CUP ::= COSENO PARENTESIS1 VARIABLE PARENTESIS2 
            {
              Nodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo funciones = new Nodo(Nodo.TIPO_IDENTIFICADOR, "COSENO");
                                    Nodo ce1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.COSENO);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    funciones.agregarHijo(ce1);
                                    funciones.agregarHijo(variable1);
                                    RESULT=funciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PREDEFINIDAS_CUP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNCIONES_PREDEFINIDAS_CUP ::= SENO PARENTESIS1 VARIABLE PARENTESIS2 
            {
              Nodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo funciones = new Nodo(Nodo.TIPO_IDENTIFICADOR, "SENO");
                                    Nodo ce1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.SENO);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    funciones.agregarHijo(ce1);
                                    funciones.agregarHijo(variable1);
                                    RESULT=funciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PREDEFINIDAS_CUP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCIONES_PREDEFINIDAS_CUP ::= LOGARITMO PARENTESIS1 VARIABLE PARENTESIS2 
            {
              Nodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo funciones = new Nodo(Nodo.TIPO_IDENTIFICADOR, "LOGARITMO");
                                    Nodo ce1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.LOGARITMO);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    funciones.agregarHijo(ce1);
                                    funciones.agregarHijo(variable1);
                                    RESULT=funciones;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PREDEFINIDAS_CUP",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INSTANCIACION_CUP ::= VARIABLE_CLASE VARIABLE IGUAL INSTANCIAR VARIABLE_CLASE PARENTESIS1 PARENTESIS2 
            {
              Nodo RESULT =null;
		int variablecleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int variablecright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		token variablec = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int instanciarleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int instanciarright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object instanciar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int variablec1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int variablec1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token variablec1 = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo instanciacion = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo variablec2 = new Nodo(Nodo.TIPO_IDENTIFICADOR_CLASE,variablec.getLexema() );
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variable.getLexema() );
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);
                                    Nodo instanciar1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.INSTANCIAR );
                                    Nodo variablec22 = new Nodo(Nodo.TIPO_IDENTIFICADOR_CLASE,variablec1.getLexema() );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    instanciacion.agregarHijo(variablec2);
                                    instanciacion.agregarHijo(variable1);
                                    instanciacion.agregarHijo(igual1);
                                    instanciacion.agregarHijo(instanciar1);
                                    instanciacion.agregarHijo(variablec22);
                                    instanciacion.agregarHijo(p222);
                                    instanciacion.agregarHijo(p22);
                                    RESULT=instanciacion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_CUP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INSTANCIACION_CUP ::= VARIABLE IGUAL INSTANCIAR VARIABLE_CLASE PARENTESIS1 PARENTESIS2 
            {
              Nodo RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		token variable = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int instanciarleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int instanciarright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object instanciar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int variablecleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int variablecright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token variablec = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo instanciacion = new Nodo(Nodo.TIPO_EXPRESION, 0);
                                    Nodo variable1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, variable.getLexema());
                                    Nodo igual1 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.IGUAL);
                                    Nodo instanciar1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.INSTANCIAR );
                                    Nodo variablec1 = new Nodo(Nodo.TIPO_IDENTIFICADOR,variablec.getLexema());
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    instanciacion.agregarHijo(variable1);
                                    instanciacion.agregarHijo(igual1);
                                    instanciacion.agregarHijo(instanciar1);
                                    instanciacion.agregarHijo(variablec1);
                                    instanciacion.agregarHijo(p222);
                                    instanciacion.agregarHijo(p22);
                                    RESULT=instanciacion;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_CUP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VARIAS_VARIABLES_CUP ::= ELIMINAR VARIAS_VARIABLES_CUP 
            {
              Nodo RESULT =null;
		int eliminarleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eliminarright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object eliminar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo varias = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo variasv = new Nodo(Nodo.TIPO_IDENTIFICADOR, "VARIAS_VARIABLES");
                                    Nodo eliminar1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.ELIMINAR );

                                    variasv.agregarHijo(eliminar1);
                                    variasv.agregarHijo(varias);
                                    RESULT=variasv;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIAS_VARIABLES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VARIAS_VARIABLES_CUP ::= ELIMINAR 
            {
              Nodo RESULT =null;
		int eliminarleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eliminarright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object eliminar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo variasv = new Nodo(Nodo.TIPO_IDENTIFICADOR, "ELIMINAR");
                                    Nodo eliminar1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.ELIMINAR );
                                    variasv.agregarHijo(eliminar1);
                                    RESULT=variasv;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIAS_VARIABLES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONSTRUCTOR_CUP ::= CONSTRUCTOR PARENTESIS1 LISTA_VARIABLES_CUP PARENTESIS2 CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int constructorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int constructorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object constructor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo const1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, "CONSTRUCTOR");
                                    Nodo constructor1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.CONSTRUCTOR );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS1 );
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2 );
                                    const1.agregarHijo(constructor1);
                                    const1.agregarHijo(p222);
                                    const1.agregarHijo(lista);
                                    const1.agregarHijo(p22);
                                    const1.agregarHijo(codigos);

                                    RESULT=const1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR_CUP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONSTRUCTOR_CUP ::= CONSTRUCTOR PARENTESIS1 PARENTESIS2 CODIGO_METODOS_CUP 
            {
              Nodo RESULT =null;
		int constructorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int constructorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object constructor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int codigosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int codigosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo codigos = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo const1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, "CONSTRUCTOR");
                                    Nodo constructor1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.CONSTRUCTOR );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS1 );
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2 );
                                    const1.agregarHijo(constructor1);
                                    const1.agregarHijo(p222);
                                    const1.agregarHijo(p22);
                                    const1.agregarHijo(codigos);

                                    RESULT=const1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR_CUP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DESTRUCTOR_CUP ::= DESTRUCTOR PARENTESIS1 PARENTESIS2 VARIAS_VARIABLES_CUP 
            {
              Nodo RESULT =null;
		int destructorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int destructorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object destructor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int variasvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int variasvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo variasv = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo const1= new Nodo(Nodo.TIPO_IDENTIFICADOR, "DESTRUCTOR");
                                    Nodo destructor1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.DESTRUCTOR);
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    const1.agregarHijo(destructor1);
                                    const1.agregarHijo(p222);
                                    const1.agregarHijo(p22);
                                    const1.agregarHijo(variasv);
                                    RESULT=const1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DESTRUCTOR_CUP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PROGRAMA_PRINCIPAL_CUP ::= PALABRA_RESERVADA_TIPO PRINCIPAL PARENTESIS1 LISTA_VARIABLES_CUP PARENTESIS2 CODIGO_METODOS_CUP DEVOLUCION_CUP 
            {
              Nodo RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object palabra = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int principalleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int principalright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object principal = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int codigoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int codigoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo codigo = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int devolucionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int devolucionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo devolucion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo const1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, "MAIN");
                                    //Nodo palabra1 = new Nodo(, palabra.getLexema());
                                    Nodo principal1 = new Nodo(Nodo.TIPO_RESERVADA, Nodo.PRINCIPAL);
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    const1.agregarHijo(const1);
                                    const1.agregarHijo(principal1);
                                    const1.agregarHijo(p222);
                                    const1.agregarHijo(lista);
                                    const1.agregarHijo(p22);
                                    const1.agregarHijo(codigo);
                                    const1.agregarHijo(devolucion);

                                    RESULT=const1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA_PRINCIPAL_CUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PROGRAMA_PRINCIPAL_CUP ::= PALABRA_RESERVADA_TIPO PRINCIPAL PARENTESIS1 PARENTESIS2 CODIGO_METODOS_CUP DEVOLUCION_CUP 
            {
              Nodo RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object palabra = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int principalleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int principalright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object principal = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int codigosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int codigosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo codigos = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int devolucionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int devolucionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo devolucion = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    Nodo const1 = new Nodo(Nodo.TIPO_IDENTIFICADOR, "MAIN");
                                    Nodo palabra1 = new Nodo(Nodo.TIPO_EXPRESION,0);
                                    //Nodo palabra1 = new Nodo(Nodo.TIP, );
                                    Nodo principal1 = new Nodo(Nodo.TIPO_RESERVADA,Nodo.PRINCIPAL );
                                    Nodo p222 = new Nodo(Nodo.TIPO_OPERADOR, Nodo.PARENTESIS1);
                                    Nodo p22 = new Nodo(Nodo.TIPO_OPERADOR,Nodo.PARENTESIS2);
                                    const1.agregarHijo(palabra1);
                                    const1.agregarHijo(principal1);
                                    const1.agregarHijo(p222);
                                    const1.agregarHijo(p22);
                                    const1.agregarHijo(codigos);
                                    const1.agregarHijo(devolucion);
                                    RESULT=const1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA_PRINCIPAL_CUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
