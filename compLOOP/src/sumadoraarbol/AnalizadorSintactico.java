
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sumadoraarbol;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\003\000\002\040" +
    "\004\000\002\040\003\000\002\004\003\000\002\003\005" +
    "\000\002\005\006\000\002\005\004\000\002\006\007\000" +
    "\002\006\006\000\002\010\005\000\002\010\004\000\002" +
    "\010\005\000\002\010\004\000\002\007\007\000\002\007" +
    "\006\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\005\000\002" +
    "\012\004\000\002\012\006\000\002\012\004\000\002\012" +
    "\003\000\002\021\005\000\002\021\003\000\002\021\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\004\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\004\000\002\017\004\000\002\020\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\004\000\002\024\003" +
    "\000\002\024\003\000\002\025\004\000\002\026\004\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\013\005\000\002\031" +
    "\003\000\002\031\003\000\002\023\007\000\002\023\006" +
    "\000\002\014\007\000\002\014\006\000\002\014\004\000" +
    "\002\027\004\000\002\027\004\000\002\033\004\000\002" +
    "\033\004\000\002\032\011\000\002\034\006\000\002\036" +
    "\004\000\002\036\005\000\002\036\004\000\002\035\011" +
    "\000\002\035\010\000\002\037\011\000\002\037\010\000" +
    "\002\015\004\000\002\015\003\000\002\041\007\000\002" +
    "\041\006\000\002\042\006\000\002\043\010\000\002\043" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\004\011\001\002\000\006\002\000\004" +
    "\011\001\002\000\006\002\ufffe\004\ufffe\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\004\002\301\001\002\000" +
    "\004\005\016\001\002\000\004\043\012\001\002\000\006" +
    "\005\ufffa\026\013\001\002\000\004\043\014\001\002\000" +
    "\004\005\ufffb\001\002\000\004\006\101\001\002\000\004" +
    "\067\017\001\002\000\004\035\020\001\002\000\006\043" +
    "\021\046\023\001\002\000\004\037\027\001\002\000\006" +
    "\005\016\006\ufff8\001\002\000\004\037\024\001\002\000" +
    "\012\005\ufff4\006\ufff4\043\021\046\023\001\002\000\006" +
    "\005\ufff7\006\ufff7\001\002\000\004\006\ufff9\001\002\000" +
    "\010\005\ufff6\006\ufff6\032\031\001\002\000\006\005\ufff5" +
    "\006\ufff5\001\002\000\014\023\040\024\033\037\041\041" +
    "\036\045\035\001\002\000\050\002\uffcb\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\021\uffcb\022\uffcb\025\uffcb\037\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\001\002\000\004\037\100\001" +
    "\002\000\050\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\021" +
    "\uffca\022\uffca\025\uffca\037\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\001\002\000\100\002\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\021\uffcc\022\uffcc\025\uffcc\033\042\034\055\037" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\043\050\053" +
    "\051\045\052\050\053\044\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\001\002\000\006\037\076\045\075\001\002" +
    "\000\014\054\067\055\065\056\063\057\066\060\064\001" +
    "\002\000\004\037\062\001\002\000\104\002\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\021\uffcd\022\uffcd\023\051\024\052" +
    "\025\uffcd\033\042\034\055\037\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\043\050\053\051\045\052\050\053\044" +
    "\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\001\002\000" +
    "\006\037\uffc3\045\uffc3\001\002\000\006\037\uffc9\045\uffc9" +
    "\001\002\000\006\037\uffc4\045\uffc4\001\002\000\006\037" +
    "\uffc7\045\uffc7\001\002\000\050\002\uffc1\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\021\uffc1\022\uffc1\025\uffc1\037\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\001\002\000\006\037\uffc5\045" +
    "\uffc5\001\002\000\006\037\uffc6\045\uffc6\001\002\000\050" +
    "\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\021\uffd2\022\uffd2" +
    "\025\uffd2\037\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\001" +
    "\002\000\050\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\021" +
    "\uffd1\022\uffd1\025\uffd1\037\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\001\002\000\006\037\uffc8\045\uffc8\001\002\000" +
    "\006\037\057\045\056\001\002\000\006\037\uffc2\045\uffc2" +
    "\001\002\000\070\002\uffbd\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\021\uffbd\022\uffbd\025\uffbd\033\042\034\055\037\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\043\050\053\051\045" +
    "\052\050\053\044\054\047\001\002\000\070\002\uffbc\004" +
    "\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\021\uffbc\022\uffbc\025\uffbc\033" +
    "\042\034\055\037\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\043\050\053\051\045\052\050\053\044\054\047\001" +
    "\002\000\050\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\021" +
    "\uffbf\022\uffbf\025\uffbf\037\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\001\002\000\050\002\uffbe\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\021\uffbe\022\uffbe\025\uffbe\037\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\001\002\000\050\002\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\021\uffd3\022\uffd3\025\uffd3\037\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\001\002\000\006\037" +
    "\uffb6\045\uffb6\001\002\000\006\037\uffb5\045\uffb5\001\002" +
    "\000\006\037\uffb7\045\uffb7\001\002\000\006\037\uffb4\045" +
    "\uffb4\001\002\000\006\037\uffb3\045\uffb3\001\002\000\006" +
    "\037\073\045\071\001\002\000\070\002\uffb0\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\021\uffb0\022\uffb0\025\uffb0\037" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002\000" +
    "\056\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\021" +
    "\uffb2\022\uffb2\025\uffb2\037\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\061\uffb2\062\uffb2\001\002\000\070\002\uffb1\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\021\uffb1\022\uffb1\025" +
    "\uffb1\037\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\001" +
    "\002\000\050\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\021" +
    "\uffce\022\uffce\025\uffce\037\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\001\002\000\070\002\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\021\uffcf\022\uffcf\025\uffcf\033\042\034\055\037" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\043\050\053" +
    "\051\045\052\050\053\044\054\047\001\002\000\070\002" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\021\uffd0\022\uffd0\025" +
    "\uffd0\033\042\034\055\037\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\043\050\053\051\045\052\050\053\044\054" +
    "\047\001\002\000\050\002\uffc0\004\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\021\uffc0\022\uffc0\025\uffc0\037\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\001\002\000\050\002\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\021\uffd4\022\uffd4\025\uffd4\037\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\001\002\000\004\067\103" +
    "\001\002\000\006\002\ufffc\004\ufffc\001\002\000\004\035" +
    "\104\001\002\000\032\007\120\012\112\013\130\015\126" +
    "\016\124\021\135\025\136\037\117\043\125\044\114\045" +
    "\122\046\132\001\002\000\046\002\uffe6\004\uffe6\006\uffe6" +
    "\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\021\uffe6\022\uffe6\025\uffe6\037\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\001\002\000\046\002\uffe2\004\uffe2\006" +
    "\uffe2\007\120\011\uffe2\012\112\013\130\014\uffe2\015\126" +
    "\016\124\021\135\022\uffe2\025\136\037\117\043\125\044" +
    "\114\045\122\046\132\001\002\000\032\007\120\012\112" +
    "\013\130\015\126\016\124\021\135\025\136\037\117\043" +
    "\125\044\114\045\122\046\132\001\002\000\010\002\ufff2" +
    "\004\ufff2\006\101\001\002\000\032\007\120\012\112\013" +
    "\130\015\126\016\124\021\135\025\136\037\117\043\125" +
    "\044\114\045\122\046\132\001\002\000\004\037\274\001" +
    "\002\000\046\002\uffe3\004\uffe3\006\uffe3\007\120\011\uffe3" +
    "\012\112\013\130\014\uffe3\015\126\016\124\021\135\022" +
    "\uffe3\025\136\037\117\043\125\044\114\045\122\046\132" +
    "\001\002\000\046\002\uff9c\004\uff9c\006\uff9c\007\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\021\uff9c" +
    "\022\uff9c\025\uff9c\037\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\001\002\000\046\002\uffdd\004\uffdd\006\uffdd\007\120" +
    "\011\uffdd\012\112\013\130\014\uffdd\015\126\016\124\021" +
    "\135\022\uffdd\025\136\037\117\043\125\044\114\045\122" +
    "\046\132\001\002\000\046\002\uffbb\004\uffbb\006\uffbb\007" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\021\uffbb\022\uffbb\025\uffbb\037\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\001\002\000\070\002\uffd8\004\uffd8\006\uffd8" +
    "\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\021\uffd8\022\uffd8\025\uffd8\032\264\033\042\034\055" +
    "\037\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\043\050" +
    "\053\051\045\052\050\053\044\054\047\001\002\000\006" +
    "\037\073\045\071\001\002\000\046\002\uffde\004\uffde\006" +
    "\uffde\007\120\011\uffde\012\112\013\130\014\uffde\015\126" +
    "\016\124\021\135\022\uffde\025\136\037\117\043\125\044" +
    "\114\045\122\046\132\001\002\000\022\033\042\034\055" +
    "\047\043\050\053\051\045\052\050\053\044\054\047\001" +
    "\002\000\046\002\uffba\004\uffba\006\uffba\007\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\021\uffba\022" +
    "\uffba\025\uffba\037\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\001\002\000\004\027\244\001\002\000\006\037\236\042" +
    "\157\001\002\000\004\027\230\001\002\000\046\002\uffdf" +
    "\004\uffdf\006\uffdf\007\120\011\uffdf\012\112\013\130\014" +
    "\uffdf\015\126\016\124\021\135\022\uffdf\025\136\037\117" +
    "\043\125\044\114\045\122\046\132\001\002\000\006\037" +
    "\153\045\152\001\002\000\046\002\uffe0\004\uffe0\006\uffe0" +
    "\007\120\011\uffe0\012\112\013\130\014\uffe0\015\126\016" +
    "\124\021\135\022\uffe0\025\136\037\117\043\125\044\114" +
    "\045\122\046\132\001\002\000\010\017\175\037\176\045" +
    "\152\001\002\000\046\002\uffe4\004\uffe4\006\uffe4\007\120" +
    "\011\uffe4\012\112\013\130\014\uffe4\015\126\016\124\021" +
    "\135\022\uffe4\025\136\037\117\043\125\044\114\045\122" +
    "\046\132\001\002\000\046\002\uffe5\004\uffe5\006\uffe5\007" +
    "\120\011\uffe5\012\112\013\130\014\uffe5\015\126\016\124" +
    "\021\135\022\uffe5\025\136\037\117\043\125\044\114\045" +
    "\122\046\132\001\002\000\010\037\147\043\145\046\146" +
    "\001\002\000\032\007\120\012\112\013\130\015\126\016" +
    "\124\021\135\025\136\037\117\043\125\044\114\045\122" +
    "\046\132\001\002\000\046\002\uffe1\004\uffe1\006\uffe1\007" +
    "\120\011\uffe1\012\112\013\130\014\uffe1\015\126\016\124" +
    "\021\135\022\uffe1\025\136\037\117\043\125\044\114\045" +
    "\122\046\132\001\002\000\046\002\uffed\004\uffed\006\uffed" +
    "\007\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\021\uffed\022\uffed\025\uffed\037\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\001\002\000\004\022\142\001\002\000" +
    "\006\037\073\045\071\001\002\000\046\002\uffa5\004\uffa5" +
    "\006\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\021\uffa5\022\uffa5\025\uffa5\037\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\001\002\000\004\022\162\001" +
    "\002\000\004\042\157\001\002\000\006\037\153\045\152" +
    "\001\002\000\006\022\uffd8\032\031\001\002\000\046\002" +
    "\uffd9\004\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\021\uffd9\022\uffd9\025\uffd9\037" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\001\002\000\050" +
    "\002\uffdb\004\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\021\uffdb\022\uffdb\025\uffdb" +
    "\032\031\037\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001" +
    "\002\000\050\002\uffd5\004\uffd5\006\uffd5\007\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\021\uffd5\022" +
    "\uffd5\025\uffd5\032\uffd5\037\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\001\002\000\052\002\uffd6\004\uffd6\006\uffd6\007" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\021\uffd6\022\uffd6\025\uffd6\031\154\032\uffd6\037\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\001\002\000\006\037\153" +
    "\045\152\001\002\000\050\002\uffd7\004\uffd7\006\uffd7\007" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\021\uffd7\022\uffd7\025\uffd7\032\uffd7\037\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\001\002\000\046\002\uffdc\004\uffdc" +
    "\006\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\021\uffdc\022\uffdc\025\uffdc\037\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\001\002\000\004\037\160\001" +
    "\002\000\004\032\031\001\002\000\046\002\uffda\004\uffda" +
    "\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\021\uffda\022\uffda\025\uffda\037\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\001\002\000\006\037\073\045" +
    "\071\001\002\000\006\061\166\062\165\001\002\000\004" +
    "\025\171\001\002\000\004\045\170\001\002\000\004\045" +
    "\167\001\002\000\004\025\uffa8\001\002\000\004\025\uffa7" +
    "\001\002\000\032\007\120\012\112\013\130\015\126\016" +
    "\124\021\135\025\136\037\117\043\125\044\114\045\122" +
    "\046\132\001\002\000\046\002\uffa6\004\uffa6\006\uffa6\007" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6" +
    "\021\uffa6\022\uffa6\025\uffa6\037\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\001\002\000\046\002\uffe7\004\uffe7\006\uffe7" +
    "\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\021\uffe7\022\uffe7\025\uffe7\037\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\046\uffe7\001\002\000\046\002\uffea\004\uffea\006" +
    "\uffea\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\021\uffea\022\uffea\025\uffea\037\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\001\002\000\004\027\217\001\002" +
    "\000\054\002\uffd6\004\uffd6\006\uffd6\007\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\021\uffd6\022\uffd6" +
    "\025\uffd6\027\177\031\154\032\uffd6\037\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\001\002\000\010\030\200\031\201" +
    "\046\203\001\002\000\032\007\120\012\112\013\130\015" +
    "\126\016\124\021\135\025\136\037\117\043\125\044\114" +
    "\045\122\046\132\001\002\000\006\031\201\046\203\001" +
    "\002\000\004\030\206\001\002\000\004\037\204\001\002" +
    "\000\010\030\uffa2\031\201\046\203\001\002\000\004\030" +
    "\uffa3\001\002\000\032\007\120\012\112\013\130\015\126" +
    "\016\124\021\135\025\136\037\117\043\125\044\114\045" +
    "\122\046\132\001\002\000\004\014\211\001\002\000\046" +
    "\002\uffa1\004\uffa1\006\uffa1\007\uffa1\011\uffa1\012\uffa1\013" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\021\uffa1\022\uffa1\025\uffa1" +
    "\037\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\001\002\000" +
    "\006\037\213\045\212\001\002\000\046\002\uffaa\004\uffaa" +
    "\006\uffaa\007\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\021\uffaa\022\uffaa\025\uffaa\037\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\001\002\000\046\002\uffa9\004" +
    "\uffa9\006\uffa9\007\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\021\uffa9\022\uffa9\025\uffa9\037\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\001\002\000\004\030\uffa4" +
    "\001\002\000\004\014\211\001\002\000\046\002\uffa0\004" +
    "\uffa0\006\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\021\uffa0\022\uffa0\025\uffa0\037\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\001\002\000\010\030\220" +
    "\031\201\046\203\001\002\000\032\007\120\012\112\013" +
    "\130\015\126\016\124\021\135\025\136\037\117\043\125" +
    "\044\114\045\122\046\132\001\002\000\004\030\222\001" +
    "\002\000\032\007\120\012\112\013\130\015\126\016\124" +
    "\021\135\025\136\037\117\043\125\044\114\045\122\046" +
    "\132\001\002\000\046\002\uff98\004\uff98\006\uff98\007\uff98" +
    "\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\021" +
    "\uff98\022\uff98\025\uff98\037\uff98\043\uff98\044\uff98\045\uff98" +
    "\046\uff98\001\002\000\046\002\uff97\004\uff97\006\uff97\007" +
    "\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97" +
    "\021\uff97\022\uff97\025\uff97\037\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\001\002\000\046\002\uffee\004\uffee\006\uffee" +
    "\007\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\021\uffee\022\uffee\025\uffee\037\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\001\002\000\046\002\uffb8\004\uffb8\006" +
    "\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\021\uffb8\022\uffb8\025\uffb8\037\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\001\002\000\046\002\uffef\004\uffef" +
    "\006\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\021\uffef\022\uffef\025\uffef\037\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\001\002\000\010\030\231\031" +
    "\201\046\203\001\002\000\032\007\120\012\112\013\130" +
    "\015\126\016\124\021\135\025\136\037\117\043\125\044" +
    "\114\045\122\046\132\001\002\000\004\030\233\001\002" +
    "\000\032\007\120\012\112\013\130\015\126\016\124\021" +
    "\135\025\136\037\117\043\125\044\114\045\122\046\132" +
    "\001\002\000\032\007\uff9b\012\uff9b\013\uff9b\015\uff9b\016" +
    "\uff9b\021\uff9b\025\uff9b\037\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\001\002\000\032\007\uff9a\012\uff9a\013\uff9a\015" +
    "\uff9a\016\uff9a\021\uff9a\025\uff9a\037\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\001\002\000\004\032\237\001\002\000" +
    "\004\020\240\001\002\000\004\043\241\001\002\000\004" +
    "\027\242\001\002\000\004\030\243\001\002\000\046\002" +
    "\uff9f\004\uff9f\006\uff9f\007\uff9f\011\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\021\uff9f\022\uff9f\025\uff9f\037" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\001\002\000\004" +
    "\030\245\001\002\000\004\044\114\001\002\000\032\007" +
    "\uff99\012\uff99\013\uff99\015\uff99\016\uff99\021\uff99\025\uff99" +
    "\037\uff99\043\uff99\044\uff99\045\uff99\046\uff99\001\002\000" +
    "\046\002\ufff0\004\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\021\ufff0\022\ufff0\025" +
    "\ufff0\037\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\001\002" +
    "\000\004\010\251\001\002\000\032\007\120\012\112\013" +
    "\130\015\126\016\124\021\135\025\136\037\117\043\125" +
    "\044\114\045\122\046\132\001\002\000\046\002\uffae\004" +
    "\uffae\006\uffae\007\uffae\011\254\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\021\uffae\022\uffae\025\uffae\037\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\001\002\000\046\002\uffaf" +
    "\004\uffaf\006\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\021\uffaf\022\uffaf\025\uffaf\037\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\001\002\000\032\007" +
    "\120\012\112\013\130\015\126\016\124\021\135\025\136" +
    "\037\256\043\125\044\114\045\257\046\132\001\002\000" +
    "\046\002\uffab\004\uffab\006\uffab\007\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\021\uffab\022\uffab\025" +
    "\uffab\037\uffab\043\uffab\044\uffab\045\uffab\046\uffab\001\002" +
    "\000\070\002\uffd8\004\uffd8\007\uffd8\012\uffd8\013\uffd8\015" +
    "\uffd8\016\uffd8\021\uffd8\025\uffd8\032\264\033\042\034\055" +
    "\037\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\043\050" +
    "\053\051\045\052\050\053\044\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\001\002\000\032\033\042\034\055\047" +
    "\043\050\053\051\045\052\050\053\044\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\001\002\000\004\010\261\001" +
    "\002\000\032\007\120\012\112\013\130\015\126\016\124" +
    "\021\135\025\136\037\117\043\125\044\114\045\122\046" +
    "\132\001\002\000\046\002\uffac\004\uffac\006\uffac\007\uffac" +
    "\011\254\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\021" +
    "\uffac\022\uffac\025\uffac\037\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\001\002\000\046\002\uffad\004\uffad\006\uffad\007" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\021\uffad\022\uffad\025\uffad\037\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\001\002\000\016\020\265\023\040\024\033" +
    "\037\041\041\036\045\035\001\002\000\004\043\266\001" +
    "\002\000\004\027\267\001\002\000\004\030\270\001\002" +
    "\000\046\002\uff9e\004\uff9e\006\uff9e\007\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\021\uff9e\022\uff9e" +
    "\025\uff9e\037\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\001" +
    "\002\000\046\002\ufff1\004\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\021\ufff1\022" +
    "\ufff1\025\ufff1\037\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\001\002\000\046\002\uff9d\004\uff9d\006\uff9d\007\uff9d\011" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\021\uff9d" +
    "\022\uff9d\025\uff9d\037\uff9d\043\uff9d\044\uff9d\045\uff9d\046" +
    "\uff9d\001\002\000\046\002\uffeb\004\uffeb\006\uffeb\007\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\021" +
    "\uffeb\022\uffeb\025\uffeb\037\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\001\002\000\046\002\uffb9\004\uffb9\006\uffb9\007" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\021\uffb9\022\uffb9\025\uffb9\037\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\001\002\000\046\002\uffe9\004\uffe9\006\uffe9" +
    "\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\021\uffe9\022\uffe9\025\uffe9\037\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\001\002\000\006\002\ufff3\004\ufff3\001" +
    "\002\000\046\002\uffe8\004\uffe8\006\uffe8\007\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\021\uffe8\022" +
    "\uffe8\025\uffe8\037\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\001\002\000\046\002\uffec\004\uffec\006\uffec\007\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\021\uffec" +
    "\022\uffec\025\uffec\037\uffec\043\uffec\044\uffec\045\uffec\046" +
    "\uffec\001\002\000\004\002\001\001\002\000\006\002\uffff" +
    "\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\014\002\006\003\005\004\004\005\007\040" +
    "\003\001\001\000\010\003\005\004\301\005\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\021" +
    "\001\001\000\002\001\001\000\004\006\025\001\001\000" +
    "\002\001\001\000\004\010\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\027\001\001\000\002\001" +
    "\001\000\010\013\033\017\031\031\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\053\020\076\001\001\000\004\017\073\001\001\000\004" +
    "\030\067\001\001\000\002\001\001\000\006\016\053\020" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\053\020\060\001\001\000\006\016\053\020\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\053\020\076\001\001\000" +
    "\006\016\053\020\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\011\107\012\114\015\133\017\120\023\130" +
    "\024\126\025\115\026\122\032\136\034\105\035\112\037" +
    "\132\041\110\042\106\043\104\001\001\000\002\001\001" +
    "\000\040\011\277\012\114\015\133\017\120\023\130\024" +
    "\126\025\115\026\122\032\136\034\105\035\112\037\132" +
    "\041\110\042\106\043\104\001\001\000\040\011\276\012" +
    "\114\015\133\017\120\023\130\024\126\025\115\026\122" +
    "\032\136\034\105\035\112\037\132\041\110\042\106\043" +
    "\104\001\001\000\004\007\275\001\001\000\040\011\274" +
    "\012\114\015\133\017\120\023\130\024\126\025\115\026" +
    "\122\032\136\034\105\035\112\037\132\041\110\042\106" +
    "\043\104\001\001\000\002\001\001\000\040\011\272\012" +
    "\114\015\133\017\120\023\130\024\126\025\115\026\122" +
    "\032\136\034\105\035\112\037\132\041\110\042\106\043" +
    "\104\001\001\000\004\015\271\001\001\000\040\011\270" +
    "\012\114\015\133\017\120\023\130\024\126\025\115\026" +
    "\122\032\136\034\105\035\112\037\132\041\110\042\106" +
    "\043\104\001\001\000\002\001\001\000\010\016\053\020" +
    "\045\022\147\001\001\000\006\013\247\031\036\001\001" +
    "\000\040\011\246\012\114\015\133\017\120\023\130\024" +
    "\126\025\115\026\122\032\136\034\105\035\112\037\132" +
    "\041\110\042\106\043\104\001\001\000\006\016\053\020" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\011\226\012\114\015" +
    "\133\017\120\023\130\024\126\025\115\026\122\032\136" +
    "\034\105\035\112\037\132\041\110\042\106\043\104\001" +
    "\001\000\004\021\225\001\001\000\040\011\224\012\114" +
    "\015\133\017\120\023\130\024\126\025\115\026\122\032" +
    "\136\034\105\035\112\037\132\041\110\042\106\043\104" +
    "\001\001\000\004\021\150\001\001\000\040\011\173\012" +
    "\114\015\133\017\120\023\130\024\126\025\115\026\122" +
    "\032\136\034\105\035\112\037\132\041\110\042\106\043" +
    "\104\001\001\000\040\011\172\012\114\015\133\017\120" +
    "\023\130\024\126\025\115\026\122\032\136\034\105\035" +
    "\112\037\132\041\110\042\106\043\104\001\001\000\004" +
    "\012\143\001\001\000\040\011\140\012\114\015\133\017" +
    "\120\023\130\024\126\025\115\026\122\032\136\034\105" +
    "\035\112\037\132\041\110\042\106\043\104\001\001\000" +
    "\040\011\137\012\114\015\133\017\120\023\130\024\126" +
    "\025\115\026\122\032\136\034\105\035\112\037\132\041" +
    "\110\042\106\043\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\142\031\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\150" +
    "\001\001\000\004\022\147\001\001\000\002\001\001\000" +
    "\004\022\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\160\001\001\000\002" +
    "\001\001\000\006\013\162\031\036\001\001\000\004\033" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\011" +
    "\171\012\114\015\133\017\120\023\130\024\126\025\115" +
    "\026\122\032\136\034\105\035\112\037\132\041\110\042" +
    "\106\043\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\201\001\001\000\040\011\214\012\114\015\133" +
    "\017\120\023\130\024\126\025\115\026\122\032\136\034" +
    "\105\035\112\037\132\041\110\042\106\043\104\001\001" +
    "\000\004\036\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\204\001\001\000\002\001\001\000\040" +
    "\011\206\012\114\015\133\017\120\023\130\024\126\025" +
    "\115\026\122\032\136\034\105\035\112\037\132\041\110" +
    "\042\106\043\104\001\001\000\004\027\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\215\001\001\000" +
    "\002\001\001\000\004\036\220\001\001\000\040\011\223" +
    "\012\114\015\133\017\120\023\130\024\126\025\115\026" +
    "\122\032\136\034\105\035\112\037\132\041\110\042\106" +
    "\043\104\001\001\000\002\001\001\000\040\011\222\012" +
    "\114\015\133\017\120\023\130\024\126\025\115\026\122" +
    "\032\136\034\105\035\112\037\132\041\110\042\106\043" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\231\001\001\000\040\011\234\012\114\015\133\017\120" +
    "\023\130\024\126\025\115\026\122\032\136\034\105\035" +
    "\112\037\132\041\110\042\106\043\104\001\001\000\002" +
    "\001\001\000\040\011\233\012\114\015\133\017\120\023" +
    "\130\024\126\025\115\026\122\032\136\034\105\035\112" +
    "\037\132\041\110\042\106\043\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\011\251\012\114\015\133\017\120\023\130\024\126" +
    "\025\115\026\122\032\136\034\105\035\112\037\132\041" +
    "\110\042\106\043\104\001\001\000\004\014\252\001\001" +
    "\000\002\001\001\000\044\011\254\012\114\013\257\015" +
    "\133\017\120\023\130\024\126\025\115\026\122\031\036" +
    "\032\136\034\105\035\112\037\132\041\110\042\106\043" +
    "\104\001\001\000\002\001\001\000\010\016\053\020\045" +
    "\022\147\001\001\000\006\016\053\020\076\001\001\000" +
    "\002\001\001\000\040\011\261\012\114\015\133\017\120" +
    "\023\130\024\126\025\115\026\122\032\136\034\105\035" +
    "\112\037\132\041\110\042\106\043\104\001\001\000\004" +
    "\014\262\001\001\000\002\001\001\000\010\013\033\017" +
    "\031\031\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    arbolSintactico = new Arbol();

    }


    
    public Arbol arbolSintactico;

    @Override
    public void syntax_error(Symbol sy) {
        token t=(token)sy.value;
        done_parsing();
        report_error("Error sintáctico cerca de " + t.getLexema() + ", F=" + t.getLinea() + ", C=" + t.getColumna() + ". ",null);
        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {



  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CLASE_GENERAL_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE_GENERAL_CUP ::= CLASE_GENERAL_CUP CLASES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASE_GENERAL_CUP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE_GENERAL_CUP ::= CLASES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASE_GENERAL_CUP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASES_CUP ::= DECLARACION_CLASES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASES_CUP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION_CLASES_CUP ::= ENCABEZADO_CUP PROPIEDADES_CUP METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_CLASES_CUP",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENCABEZADO_CUP ::= CLASE VARIABLE_CLASE EXTIENDE VARIABLE_CLASE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO_CUP",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ENCABEZADO_CUP ::= CLASE VARIABLE_CLASE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO_CUP",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROPIEDADES_CUP ::= PROPIEDADES PROPIEDADES_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES_CUP PROPIEDADES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDADES_CUP",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROPIEDADES_CUP ::= PROPIEDADES PROPIEDADES_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDADES_CUP",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLES_PROPIEDADES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE VARIABLES_PROPIEDADES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES_CUP",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLES_PROPIEDADES_CUP ::= VARIABLE_CLASE VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES_CUP",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLES_PROPIEDADES_CUP ::= VARIABLE_CLASE VARIABLE VALOR_INICIAL_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES_CUP",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLES_PROPIEDADES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES_CUP",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // METODOS_CUP ::= METODOS PROPIEDADES_METODOS DOS_PUNTOS CODIGO_METODOS_CUP METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("METODOS_CUP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METODOS_CUP ::= METODOS PROPIEDADES_METODOS DOS_PUNTOS CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("METODOS_CUP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CODIGO_METODOS_CUP ::= DECLARACION_VARIABLES_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CODIGO_METODOS_CUP ::= REALIZAR_OPERACION_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CODIGO_METODOS_CUP ::= LECTURA_ESCRITURA_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CODIGO_METODOS_CUP ::= ESTRUCTURA_SELECTIVA_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CODIGO_METODOS_CUP ::= DESDE_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CODIGO_METODOS_CUP ::= HACER_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CODIGO_METODOS_CUP ::= FUNCIONES_SUELTAS_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CODIGO_METODOS_CUP ::= INSTANCIACION_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CODIGO_METODOS_CUP ::= CONSTRUCTOR_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CODIGO_METODOS_CUP ::= DESTRUCTOR_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CODIGO_METODOS_CUP ::= VARIAS_VARIABLES_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CODIGO_METODOS_CUP ::= PROGRAMA_PRINCIPAL_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CODIGO_METODOS_CUP ::= VARIAS_VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CODIGO_METODOS_CUP ::= INSTANCIACION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CODIGO_METODOS_CUP ::= FUNCIONES_SUELTAS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CODIGO_METODOS_CUP ::= HACER_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CODIGO_METODOS_CUP ::= DESDE_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CODIGO_METODOS_CUP ::= ESTRUCTURA_SELECTIVA_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CODIGO_METODOS_CUP ::= LECTURA_ESCRITURA_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CODIGO_METODOS_CUP ::= REALIZAR_OPERACION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CODIGO_METODOS_CUP ::= DECLARACION_VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_VARIABLES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLES_CUP VALOR_INICIAL_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_VARIABLES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_VARIABLES_CUP ::= VARIABLE_CLASE PUNTO VARIABLE VALOR_INICIAL_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_VARIABLES_CUP ::= VARIABLE VALOR_INICIAL_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_VARIABLES_CUP ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARIABLES_CUP ::= VARIABLE COMA VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARIABLES_CUP ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIABLES_CUP ::= TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALOR_INICIAL_CUP ::= IGUAL DECREMENTO VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALOR_INICIAL_CUP ::= IGUAL INCREMENTO VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALOR_INICIAL_CUP ::= IGUAL VARIABLE INCREMENTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALOR_INICIAL_CUP ::= IGUAL VARIABLE DECREMENTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALOR_INICIAL_CUP ::= IGUAL MENOS VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALOR_INICIAL_CUP ::= IGUAL MENOS TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALOR_INICIAL_CUP ::= IGUAL MENOS REALIZAR_OPERACION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALOR_INICIAL_CUP ::= IGUAL VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALOR_INICIAL_CUP ::= IGUAL TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALOR_INICIAL_CUP ::= IGUAL REALIZAR_OPERACION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALOR_INICIAL_CUP ::= IGUAL CONDICION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACIONES_CUP ::= SUMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACIONES_CUP ::= RESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACIONES_CUP ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACIONES_CUP ::= DIVISION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACIONES_CUP ::= MODULO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACIONES_CUP ::= EXPONENCIACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACIONES_CUP ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACIONES_CUP ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // REALIZAR_OPERACION_CUP ::= VARIABLE LISTA_OPERACIONES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REALIZAR_OPERACION_CUP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // REALIZAR_OPERACION_CUP ::= TIPO_DATO_CUP LISTA_OPERACIONES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REALIZAR_OPERACION_CUP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP VARIABLE LISTA_OPERACIONES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP TIPO_DATO_CUP LISTA_OPERACIONES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LECTURA_ESCRITURA_CUP ::= LECTURA_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA_ESCRITURA_CUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LECTURA_ESCRITURA_CUP ::= ESCRITURA_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA_ESCRITURA_CUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LECTURA_CUP ::= LEER VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA_CUP",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ESCRITURA_CUP ::= ESCRIBIR VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA_CUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADORES_LOGICOS_CUP ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADORES_LOGICOS_CUP ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADORES_LOGICOS_CUP ::= IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORES_LOGICOS_CUP ::= DISTINTO_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORES_LOGICOS_CUP ::= MODULO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDICION_CUP ::= TIPOS_DATOS_CONDICIONES_CUP OPERADORES_LOGICOS_CUP TIPOS_DATOS_CONDICIONES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_CUP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPOS_DATOS_CONDICIONES_CUP ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_DATOS_CONDICIONES_CUP",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPOS_DATOS_CONDICIONES_CUP ::= TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_DATOS_CONDICIONES_CUP",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ESTRUCTURA_SELECTIVA_CUP ::= IF CONDICION_CUP ENTONCES CODIGO_METODOS_CUP ELSE_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SELECTIVA_CUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ESTRUCTURA_SELECTIVA_CUP ::= IF CONDICION_CUP ENTONCES CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SELECTIVA_CUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSE_CUP ::= SINO CONDICION_CUP ENTONCES CODIGO_METODOS_CUP ELSE_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_CUP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSE_CUP ::= SINO CONDICION_CUP ENTONCES CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_CUP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELSE_CUP ::= SINO CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_CUP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DEVOLUCION_CUP ::= DEVOLVER TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEVOLUCION_CUP",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DEVOLUCION_CUP ::= DEVOLVER VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEVOLUCION_CUP",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INC_DEC_VAR ::= INCREMENTAR TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INC_DEC_VAR",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INC_DEC_VAR ::= DECREMENTAR TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INC_DEC_VAR",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DESDE_CUP ::= DESDE DECLARACION_VARIABLES_CUP MIENTRAS CONDICION_CUP INC_DEC_VAR HACER CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DESDE_CUP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // HACER_CUP ::= HACER CODIGO_METODOS_CUP MIENTRAS CONDICION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("HACER_CUP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA_VARIABLES_CUP ::= COMA LISTA_VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES_CUP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTA_VARIABLES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE LISTA_VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES_CUP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTA_VARIABLES_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES_CUP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNCIONES_SUELTAS_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE PARENTESIS1 LISTA_VARIABLES_CUP PARENTESIS2 CODIGO_METODOS_CUP DEVOLUCION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_SUELTAS_CUP",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNCIONES_SUELTAS_CUP ::= PALABRA_RESERVADA_TIPO VARIABLE PARENTESIS1 PARENTESIS2 CODIGO_METODOS_CUP DEVOLUCION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_SUELTAS_CUP",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTANCIACION_CUP ::= VARIABLE_CLASE VARIABLE IGUAL INSTANCIAR VARIABLE_CLASE PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_CUP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INSTANCIACION_CUP ::= VARIABLE IGUAL INSTANCIAR VARIABLE_CLASE PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_CUP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VARIAS_VARIABLES_CUP ::= ELIMINAR VARIAS_VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIAS_VARIABLES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VARIAS_VARIABLES_CUP ::= ELIMINAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIAS_VARIABLES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONSTRUCTOR_CUP ::= CONSTRUCTOR PARENTESIS1 LISTA_VARIABLES_CUP PARENTESIS2 CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR_CUP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONSTRUCTOR_CUP ::= CONSTRUCTOR PARENTESIS1 PARENTESIS2 CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR_CUP",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DESTRUCTOR_CUP ::= DESTRUCTOR PARENTESIS1 PARENTESIS2 VARIAS_VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DESTRUCTOR_CUP",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PROGRAMA_PRINCIPAL_CUP ::= PALABRA_RESERVADA_TIPO PRINCIPAL PARENTESIS1 LISTA_VARIABLES_CUP PARENTESIS2 CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA_PRINCIPAL_CUP",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PROGRAMA_PRINCIPAL_CUP ::= PALABRA_RESERVADA_TIPO PRINCIPAL PARENTESIS1 PARENTESIS2 CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA_PRINCIPAL_CUP",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
