
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sumadoraarbol;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\003\005\000\002\005\006" +
    "\000\002\005\004\000\002\006\007\000\002\006\006\000" +
    "\002\010\005\000\002\010\004\000\002\007\007\000\002" +
    "\007\006\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\005\000\002\012" +
    "\004\000\002\012\003\000\002\012\006\000\002\020\005" +
    "\000\002\020\003\000\002\020\003\000\002\021\006\000" +
    "\002\021\006\000\002\021\006\000\002\021\006\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\004\000\002\016" +
    "\004\000\002\017\005\000\002\017\005\000\002\017\004" +
    "\000\002\017\004\000\002\023\003\000\002\023\003\000" +
    "\002\024\004\000\002\025\004\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\013" +
    "\005\000\002\030\003\000\002\030\003\000\002\022\007" +
    "\000\002\022\006\000\002\014\007\000\002\014\006\000" +
    "\002\014\004\000\002\026\004\000\002\026\004\000\002" +
    "\033\004\000\002\033\004\000\002\032\011\000\002\034" +
    "\006\000\002\036\004\000\002\036\005\000\002\036\004" +
    "\000\002\035\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\004\004\010\001\002\000\004\002\000\001" +
    "\002\000\006\002\ufffe\004\010\001\002\000\004\002\216" +
    "\001\002\000\004\005\015\001\002\000\004\043\011\001" +
    "\002\000\006\005\ufffb\026\012\001\002\000\004\043\013" +
    "\001\002\000\004\005\ufffc\001\002\000\004\006\025\001" +
    "\002\000\004\066\016\001\002\000\004\035\017\001\002" +
    "\000\004\045\021\001\002\000\006\005\015\006\ufff9\001" +
    "\002\000\004\037\022\001\002\000\010\005\ufff7\006\ufff7" +
    "\045\021\001\002\000\006\005\ufff8\006\ufff8\001\002\000" +
    "\004\006\ufffa\001\002\000\004\066\027\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\004\035\030\001\002\000" +
    "\022\007\040\012\033\013\046\021\050\025\051\037\037" +
    "\043\044\045\042\001\002\000\030\002\uffec\004\uffec\006" +
    "\uffec\007\040\012\033\013\046\021\050\025\051\037\037" +
    "\043\044\045\042\001\002\000\010\002\ufff5\004\ufff5\006" +
    "\025\001\002\000\004\037\213\001\002\000\030\002\uffed" +
    "\004\uffed\006\uffed\007\040\012\033\013\046\021\050\025" +
    "\051\037\037\043\044\045\042\001\002\000\030\002\uffc6" +
    "\004\uffc6\006\uffc6\007\uffc6\012\uffc6\013\uffc6\021\uffc6\025" +
    "\uffc6\037\uffc6\043\uffc6\045\uffc6\001\002\000\030\002\uffe7" +
    "\004\uffe7\006\uffe7\007\040\012\033\013\046\021\050\025" +
    "\051\037\037\043\044\045\042\001\002\000\050\002\uffe4" +
    "\004\uffe4\006\uffe4\007\uffe4\012\uffe4\013\uffe4\021\uffe4\025" +
    "\uffe4\033\113\034\125\037\uffe4\043\uffe4\045\uffe4\046\130" +
    "\047\123\050\120\051\122\052\116\053\121\001\002\000" +
    "\006\037\064\045\062\001\002\000\030\002\uffe8\004\uffe8" +
    "\006\uffe8\007\040\012\033\013\046\021\050\025\051\037" +
    "\037\043\044\045\042\001\002\000\026\033\113\034\125" +
    "\037\164\045\077\046\130\047\123\050\120\051\122\052" +
    "\116\053\121\001\002\000\030\002\uffc5\004\uffc5\006\uffc5" +
    "\007\uffc5\012\uffc5\013\uffc5\021\uffc5\025\uffc5\037\uffc5\043" +
    "\uffc5\045\uffc5\001\002\000\004\042\161\001\002\000\030" +
    "\002\uffe9\004\uffe9\006\uffe9\007\040\012\033\013\046\021" +
    "\050\025\051\037\037\043\044\045\042\001\002\000\006" +
    "\037\100\045\077\001\002\000\030\002\uffea\004\uffea\006" +
    "\uffea\007\040\012\033\013\046\021\050\025\051\037\037" +
    "\043\044\045\042\001\002\000\010\037\075\043\044\045" +
    "\074\001\002\000\004\014\055\001\002\000\030\002\uffeb" +
    "\004\uffeb\006\uffeb\007\040\012\033\013\046\021\050\025" +
    "\051\037\037\043\044\045\042\001\002\000\010\002\ufff0" +
    "\004\ufff0\006\ufff0\001\002\000\004\022\060\001\002\000" +
    "\006\037\057\045\056\001\002\000\034\002\uffb6\004\uffb6" +
    "\006\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\021\uffb6\022" +
    "\uffb6\025\uffb6\037\uffb6\043\uffb6\045\uffb6\001\002\000\034" +
    "\002\uffb5\004\uffb5\006\uffb5\007\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\021\uffb5\022\uffb5\025\uffb5\037\uffb5\043\uffb5\045\uffb5" +
    "\001\002\000\006\037\064\045\062\001\002\000\030\002" +
    "\uffb1\004\uffb1\006\uffb1\007\uffb1\012\uffb1\013\uffb1\021\uffb1" +
    "\025\uffb1\037\uffb1\043\uffb1\045\uffb1\001\002\000\050\002" +
    "\uffbc\004\uffbc\006\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc" +
    "\021\uffbc\022\uffbc\025\uffbc\037\uffbc\043\uffbc\045\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\001\002" +
    "\000\012\054\067\055\065\056\070\057\066\001\002\000" +
    "\050\002\uffbd\004\uffbd\006\uffbd\007\uffbd\010\uffbd\012\uffbd" +
    "\013\uffbd\021\uffbd\022\uffbd\025\uffbd\037\uffbd\043\uffbd\045" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\001\002\000\006\037\uffc1\045\uffc1\001\002\000\006\037" +
    "\uffc0\045\uffc0\001\002\000\006\037\uffc2\045\uffc2\001\002" +
    "\000\006\037\uffbf\045\uffbf\001\002\000\006\037\064\045" +
    "\062\001\002\000\040\002\uffbe\004\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\012\uffbe\013\uffbe\021\uffbe\022\uffbe\025\uffbe\037" +
    "\uffbe\043\uffbe\045\uffbe\060\uffbe\061\uffbe\001\002\000\004" +
    "\022\145\001\002\000\006\037\100\045\077\001\002\000" +
    "\004\022\uffe4\001\002\000\034\002\uffe5\004\uffe5\006\uffe5" +
    "\007\uffe5\012\uffe5\013\uffe5\021\uffe5\022\uffe5\025\uffe5\032" +
    "\104\037\uffe5\043\uffe5\045\uffe5\001\002\000\034\002\uffe0" +
    "\004\uffe0\006\uffe0\007\uffe0\012\uffe0\013\uffe0\021\uffe0\022" +
    "\uffe0\025\uffe0\032\uffe0\037\uffe0\043\uffe0\045\uffe0\001\002" +
    "\000\036\002\uffe1\004\uffe1\006\uffe1\007\uffe1\012\uffe1\013" +
    "\uffe1\021\uffe1\022\uffe1\025\uffe1\031\101\032\uffe1\037\uffe1" +
    "\043\uffe1\045\uffe1\001\002\000\006\037\100\045\077\001" +
    "\002\000\034\002\uffe2\004\uffe2\006\uffe2\007\uffe2\012\uffe2" +
    "\013\uffe2\021\uffe2\022\uffe2\025\uffe2\032\uffe2\037\uffe2\043" +
    "\uffe2\045\uffe2\001\002\000\032\002\uffe6\004\uffe6\006\uffe6" +
    "\007\uffe6\012\uffe6\013\uffe6\021\uffe6\022\uffe6\025\uffe6\037" +
    "\uffe6\043\uffe6\045\uffe6\001\002\000\012\037\112\041\111" +
    "\045\110\046\106\001\002\000\032\002\uffd6\004\uffd6\006" +
    "\uffd6\007\uffd6\012\uffd6\013\uffd6\021\uffd6\022\uffd6\025\uffd6" +
    "\037\uffd6\043\uffd6\045\uffd6\001\002\000\004\046\143\001" +
    "\002\000\032\002\uffd5\004\uffd5\006\uffd5\007\uffd5\012\uffd5" +
    "\013\uffd5\021\uffd5\022\uffd5\025\uffd5\037\uffd5\043\uffd5\045" +
    "\uffd5\001\002\000\062\002\uffd7\004\uffd7\006\uffd7\007\uffd7" +
    "\012\uffd7\013\uffd7\021\uffd7\022\uffd7\025\uffd7\033\113\034" +
    "\125\037\uffd7\043\uffd7\045\uffd7\046\130\047\123\050\120" +
    "\051\122\052\116\053\121\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\001\002\000\010\037\140\041\136\045\137\001\002" +
    "\000\064\002\uffd8\004\uffd8\006\uffd8\007\uffd8\012\uffd8\013" +
    "\uffd8\021\uffd8\022\uffd8\025\uffd8\033\113\034\125\037\uffd8" +
    "\041\114\043\uffd8\045\uffd8\046\115\047\123\050\120\051" +
    "\122\052\116\053\121\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\001\002\000\006\037\uffce\045\uffce\001\002\000\004\041" +
    "\134\001\002\000\010\037\uffd4\045\uffd4\046\133\001\002" +
    "\000\006\037\uffcf\045\uffcf\001\002\000\032\002\uffcc\004" +
    "\uffcc\006\uffcc\007\uffcc\012\uffcc\013\uffcc\021\uffcc\022\uffcc" +
    "\025\uffcc\037\uffcc\043\uffcc\045\uffcc\001\002\000\006\037" +
    "\uffd2\045\uffd2\001\002\000\006\037\uffd0\045\uffd0\001\002" +
    "\000\006\037\uffd1\045\uffd1\001\002\000\006\037\uffd3\045" +
    "\uffd3\001\002\000\006\037\127\045\126\001\002\000\006" +
    "\037\uffcd\045\uffcd\001\002\000\052\002\uffc8\004\uffc8\006" +
    "\uffc8\007\uffc8\012\uffc8\013\uffc8\021\uffc8\022\uffc8\025\uffc8" +
    "\033\113\034\125\037\uffc8\043\uffc8\045\uffc8\046\130\047" +
    "\123\050\120\051\122\052\116\053\121\001\002\000\052" +
    "\002\uffc7\004\uffc7\006\uffc7\007\uffc7\012\uffc7\013\uffc7\021" +
    "\uffc7\022\uffc7\025\uffc7\033\113\034\125\037\uffc7\043\uffc7" +
    "\045\uffc7\046\130\047\123\050\120\051\122\052\116\053" +
    "\121\001\002\000\006\037\uffd4\045\uffd4\001\002\000\032" +
    "\002\uffca\004\uffca\006\uffca\007\uffca\012\uffca\013\uffca\021" +
    "\uffca\022\uffca\025\uffca\037\uffca\043\uffca\045\uffca\001\002" +
    "\000\032\002\uffc9\004\uffc9\006\uffc9\007\uffc9\012\uffc9\013" +
    "\uffc9\021\uffc9\022\uffc9\025\uffc9\037\uffc9\043\uffc9\045\uffc9" +
    "\001\002\000\032\002\uffdc\004\uffdc\006\uffdc\007\uffdc\012" +
    "\uffdc\013\uffdc\021\uffdc\022\uffdc\025\uffdc\037\uffdc\043\uffdc" +
    "\045\uffdc\001\002\000\032\002\uffdd\004\uffdd\006\uffdd\007" +
    "\uffdd\012\uffdd\013\uffdd\021\uffdd\022\uffdd\025\uffdd\037\uffdd" +
    "\043\uffdd\045\uffdd\001\002\000\032\002\uffd9\004\uffd9\006" +
    "\uffd9\007\uffd9\012\uffd9\013\uffd9\021\uffd9\022\uffd9\025\uffd9" +
    "\037\uffd9\043\uffd9\045\uffd9\001\002\000\004\037\142\001" +
    "\002\000\052\002\uffda\004\uffda\006\uffda\007\uffda\012\uffda" +
    "\013\uffda\021\uffda\022\uffda\025\uffda\033\113\034\125\037" +
    "\uffda\043\uffda\045\uffda\046\130\047\123\050\120\051\122" +
    "\052\116\053\121\001\002\000\052\002\uffdb\004\uffdb\006" +
    "\uffdb\007\uffdb\012\uffdb\013\uffdb\021\uffdb\022\uffdb\025\uffdb" +
    "\033\113\034\125\037\uffdb\043\uffdb\045\uffdb\046\130\047" +
    "\123\050\120\051\122\052\116\053\121\001\002\000\032" +
    "\002\uffcb\004\uffcb\006\uffcb\007\uffcb\012\uffcb\013\uffcb\021" +
    "\uffcb\022\uffcb\025\uffcb\037\uffcb\043\uffcb\045\uffcb\001\002" +
    "\000\032\002\uffdf\004\uffdf\006\uffdf\007\uffdf\012\uffdf\013" +
    "\uffdf\021\uffdf\022\uffdf\025\uffdf\037\uffdf\043\uffdf\045\uffdf" +
    "\001\002\000\004\037\144\001\002\000\032\002\uffde\004" +
    "\uffde\006\uffde\007\uffde\012\uffde\013\uffde\021\uffde\022\uffde" +
    "\025\uffde\037\uffde\043\uffde\045\uffde\001\002\000\006\037" +
    "\064\045\062\001\002\000\006\060\151\061\150\001\002" +
    "\000\004\025\154\001\002\000\004\045\153\001\002\000" +
    "\004\045\152\001\002\000\004\025\uffb4\001\002\000\004" +
    "\025\uffb3\001\002\000\004\014\055\001\002\000\030\002" +
    "\uffb2\004\uffb2\006\uffb2\007\uffb2\012\uffb2\013\uffb2\021\uffb2" +
    "\025\uffb2\037\uffb2\043\uffb2\045\uffb2\001\002\000\010\002" +
    "\ufff1\004\ufff1\006\ufff1\001\002\000\030\002\uffc3\004\uffc3" +
    "\006\uffc3\007\uffc3\012\uffc3\013\uffc3\021\uffc3\025\uffc3\037" +
    "\uffc3\043\uffc3\045\uffc3\001\002\000\010\002\ufff2\004\ufff2" +
    "\006\ufff2\001\002\000\004\037\162\001\002\000\004\032" +
    "\104\001\002\000\032\002\uffe3\004\uffe3\006\uffe3\007\uffe3" +
    "\012\uffe3\013\uffe3\021\uffe3\022\uffe3\025\uffe3\037\uffe3\043" +
    "\uffe3\045\uffe3\001\002\000\036\002\uffe1\004\uffe1\006\uffe1" +
    "\007\uffe1\012\uffe1\013\uffe1\021\uffe1\025\uffe1\027\165\031" +
    "\101\032\uffe1\037\uffe1\043\uffe1\045\uffe1\001\002\000\006" +
    "\031\166\045\170\001\002\000\006\031\166\045\170\001" +
    "\002\000\004\030\173\001\002\000\004\037\171\001\002" +
    "\000\010\030\uffae\031\166\045\170\001\002\000\004\030" +
    "\uffaf\001\002\000\004\014\055\001\002\000\030\002\uffad" +
    "\004\uffad\006\uffad\007\uffad\012\uffad\013\uffad\021\uffad\025" +
    "\uffad\037\uffad\043\uffad\045\uffad\001\002\000\004\030\uffb0" +
    "\001\002\000\010\002\ufff3\004\ufff3\006\ufff3\001\002\000" +
    "\004\010\200\001\002\000\004\014\055\001\002\000\032" +
    "\002\uffba\004\uffba\006\uffba\007\uffba\011\203\012\uffba\013" +
    "\uffba\021\uffba\025\uffba\037\uffba\043\uffba\045\uffba\001\002" +
    "\000\030\002\uffbb\004\uffbb\006\uffbb\007\uffbb\012\uffbb\013" +
    "\uffbb\021\uffbb\025\uffbb\037\uffbb\043\uffbb\045\uffbb\001\002" +
    "\000\010\014\055\037\064\045\062\001\002\000\030\002" +
    "\uffb7\004\uffb7\006\uffb7\007\uffb7\012\uffb7\013\uffb7\021\uffb7" +
    "\025\uffb7\037\uffb7\043\uffb7\045\uffb7\001\002\000\004\010" +
    "\206\001\002\000\004\014\055\001\002\000\032\002\uffb8" +
    "\004\uffb8\006\uffb8\007\uffb8\011\203\012\uffb8\013\uffb8\021" +
    "\uffb8\025\uffb8\037\uffb8\043\uffb8\045\uffb8\001\002\000\030" +
    "\002\uffb9\004\uffb9\006\uffb9\007\uffb9\012\uffb9\013\uffb9\021" +
    "\uffb9\025\uffb9\037\uffb9\043\uffb9\045\uffb9\001\002\000\010" +
    "\002\ufff4\004\ufff4\006\ufff4\001\002\000\010\002\uffee\004" +
    "\uffee\006\uffee\001\002\000\030\002\uffc4\004\uffc4\006\uffc4" +
    "\007\uffc4\012\uffc4\013\uffc4\021\uffc4\025\uffc4\037\uffc4\043" +
    "\uffc4\045\uffc4\001\002\000\006\002\ufff6\004\ufff6\001\002" +
    "\000\010\002\uffef\004\uffef\006\uffef\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\012\002\005\003\004\004\003\005\006\001" +
    "\001\000\002\001\001\000\010\003\004\004\216\005\006" +
    "\001\001\000\002\001\001\000\004\006\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\017\001\001\000\004\006\023" +
    "\001\001\000\002\001\001\000\004\010\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\011\031\012\035\016" +
    "\040\022\046\023\044\024\034\025\042\032\051\034\030" +
    "\035\033\001\001\000\026\011\214\012\035\016\040\022" +
    "\046\023\044\024\034\025\042\032\051\034\030\035\033" +
    "\001\001\000\004\007\213\001\001\000\002\001\001\000" +
    "\026\011\211\012\035\016\040\022\046\023\044\024\034" +
    "\025\042\032\051\034\030\035\033\001\001\000\002\001" +
    "\001\000\026\011\210\012\035\016\040\022\046\023\044" +
    "\024\034\025\042\032\051\034\030\035\033\001\001\000" +
    "\006\015\123\017\116\001\001\000\006\013\176\030\062" +
    "\001\001\000\026\011\175\012\035\016\040\022\046\023" +
    "\044\024\034\025\042\032\051\034\030\035\033\001\001" +
    "\000\010\015\123\017\140\020\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\011\157\012\035\016\040" +
    "\022\046\023\044\024\034\025\042\032\051\034\030\035" +
    "\033\001\001\000\004\020\156\001\001\000\026\011\155" +
    "\012\035\016\040\022\046\023\044\024\034\025\042\032" +
    "\051\034\030\035\033\001\001\000\004\012\072\001\001" +
    "\000\004\026\053\001\001\000\026\011\052\012\035\016" +
    "\040\022\046\023\044\024\034\025\042\032\051\034\030" +
    "\035\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\060\030\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\075\001\001\000\002\001\001\000" +
    "\004\021\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\106\016\104\030\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\123\017\140\001\001\000\004\016\134\001\001\000\006" +
    "\015\123\017\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\123\017\131\001\001\000\006\015\123\017\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\123\017\140\001\001\000\006" +
    "\015\123\017\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\145" +
    "\030\062\001\001\000\004\033\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\166\001\001\000\004" +
    "\036\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\171\001\001\000\002\001\001\000\004\026\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\200\001\001\000\004" +
    "\014\201\001\001\000\002\001\001\000\010\013\204\026" +
    "\203\030\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\206\001\001\000\004\014\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    arbolSintactico = new Arbol();

    }


    
    public Arbol arbolSintactico;

    @Override
    public void syntax_error(Symbol sy) {
        token t=(token)sy.value;
        done_parsing();
        report_error("Error sintáctico cerca de " + t.getTipo() + ", " + t.getLexema() + ", " + t.getTabulaciones() + ". ",null);
        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {



  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CLASES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASES_CUP ::= DECLARACION_CLASES_CUP CLASES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASES_CUP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASES_CUP ::= DECLARACION_CLASES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASES_CUP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION_CLASES_CUP ::= ENCABEZADO_CUP PROPIEDADES_CUP METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_CLASES_CUP",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ENCABEZADO_CUP ::= CLASE VARIABLE_CLASE EXTIENDE VARIABLE_CLASE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO_CUP",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENCABEZADO_CUP ::= CLASE VARIABLE_CLASE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO_CUP",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROPIEDADES_CUP ::= PROPIEDADES PROPIEDADES_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES_CUP PROPIEDADES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDADES_CUP",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROPIEDADES_CUP ::= PROPIEDADES PROPIEDADES_METODOS DOS_PUNTOS VARIABLES_PROPIEDADES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROPIEDADES_CUP",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLES_PROPIEDADES_CUP ::= TIPO_DATO_CUP VARIABLE VARIABLES_PROPIEDADES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES_CUP",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLES_PROPIEDADES_CUP ::= TIPO_DATO_CUP VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_PROPIEDADES_CUP",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // METODOS_CUP ::= METODOS PROPIEDADES_METODOS DOS_PUNTOS CODIGO_METODOS_CUP METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("METODOS_CUP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // METODOS_CUP ::= METODOS PROPIEDADES_METODOS DOS_PUNTOS CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("METODOS_CUP",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CODIGO_METODOS_CUP ::= DECLARACION_VARIABLES_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CODIGO_METODOS_CUP ::= REALIZAR_OPERACION_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CODIGO_METODOS_CUP ::= LECTURA_ESCRITURA_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CODIGO_METODOS_CUP ::= ESTRUCTURA_SELECTIVA_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CODIGO_METODOS_CUP ::= DESDE_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CODIGO_METODOS_CUP ::= HACER_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CODIGO_METODOS_CUP ::= FUNCIONES_SUELTAS_CUP CODIGO_METODOS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CODIGO_METODOS_CUP ::= FUNCIONES_SUELTAS_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CODIGO_METODOS_CUP ::= HACER_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CODIGO_METODOS_CUP ::= DESDE_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CODIGO_METODOS_CUP ::= ESTRUCTURA_SELECTIVA_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CODIGO_METODOS_CUP ::= LECTURA_ESCRITURA_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CODIGO_METODOS_CUP ::= REALIZAR_OPERACION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CODIGO_METODOS_CUP ::= DECLARACION_VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_METODOS_CUP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_VARIABLES_CUP ::= TIPO_DATO_CUP VARIABLES_CUP VALOR_INICIAL_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_VARIABLES_CUP ::= TIPO_DATO_CUP VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VARIABLES_CUP ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_VARIABLES_CUP ::= VARIABLE_CLASE PUNTO VARIABLE VALOR_INICIAL_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES_CUP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARIABLES_CUP ::= VARIABLE COMA VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VARIABLES_CUP ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARIABLES_CUP ::= TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES_CUP",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR_INICIAL_CUP ::= IGUAL MENOS MENOS VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR_INICIAL_CUP ::= IGUAL SUMA SUMA VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR_INICIAL_CUP ::= IGUAL VARIABLE MENOS MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR_INICIAL_CUP ::= IGUAL VARIABLE SUMA SUMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR_INICIAL_CUP ::= IGUAL MENOS VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR_INICIAL_CUP ::= IGUAL MENOS TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR_INICIAL_CUP ::= IGUAL MENOS REALIZAR_OPERACION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR_INICIAL_CUP ::= IGUAL VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR_INICIAL_CUP ::= IGUAL TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALOR_INICIAL_CUP ::= IGUAL REALIZAR_OPERACION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR_INICIAL_CUP ::= IGUAL CONDICION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL_CUP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACIONES_CUP ::= SUMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACIONES_CUP ::= RESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACIONES_CUP ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACIONES_CUP ::= DIVISION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACIONES_CUP ::= MODULO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACIONES_CUP ::= EXPONENCIACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACIONES_CUP ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACIONES_CUP ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CUP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // REALIZAR_OPERACION_CUP ::= VARIABLE LISTA_OPERACIONES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REALIZAR_OPERACION_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // REALIZAR_OPERACION_CUP ::= TIPO_DATO_CUP LISTA_OPERACIONES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("REALIZAR_OPERACION_CUP",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP VARIABLE LISTA_OPERACIONES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP TIPO_DATO_CUP LISTA_OPERACIONES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_OPERACIONES_CUP ::= OPERACIONES_CUP VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OPERACIONES_CUP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LECTURA_ESCRITURA_CUP ::= LECTURA_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA_ESCRITURA_CUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LECTURA_ESCRITURA_CUP ::= ESCRITURA_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA_ESCRITURA_CUP",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LECTURA_CUP ::= LEER VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LECTURA_CUP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ESCRITURA_CUP ::= ESCRIBIR VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA_CUP",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADORES_LOGICOS_CUP ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADORES_LOGICOS_CUP ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADORES_LOGICOS_CUP ::= IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADORES_LOGICOS_CUP ::= DISTINTO_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS_CUP",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICION_CUP ::= TIPOS_DATOS_CONDICIONES_CUP OPERADORES_LOGICOS_CUP TIPOS_DATOS_CONDICIONES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_CUP",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOS_DATOS_CONDICIONES_CUP ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_DATOS_CONDICIONES_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS_DATOS_CONDICIONES_CUP ::= TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_DATOS_CONDICIONES_CUP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ESTRUCTURA_SELECTIVA_CUP ::= IF CONDICION_CUP ENTONCES DEVOLUCION_CUP ELSE_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SELECTIVA_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ESTRUCTURA_SELECTIVA_CUP ::= IF CONDICION_CUP ENTONCES DEVOLUCION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SELECTIVA_CUP",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELSE_CUP ::= SINO CONDICION_CUP ENTONCES DEVOLUCION_CUP ELSE_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_CUP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELSE_CUP ::= SINO CONDICION_CUP ENTONCES DEVOLUCION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_CUP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELSE_CUP ::= SINO DEVOLUCION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_CUP",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DEVOLUCION_CUP ::= DEVOLVER TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEVOLUCION_CUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DEVOLUCION_CUP ::= DEVOLVER VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEVOLUCION_CUP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INC_DEC_VAR ::= INCREMENTAR TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INC_DEC_VAR",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INC_DEC_VAR ::= DECREMENTAR TIPO_DATO_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INC_DEC_VAR",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DESDE_CUP ::= DESDE DECLARACION_VARIABLES_CUP MIENTRAS CONDICION_CUP INC_DEC_VAR HACER DEVOLUCION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DESDE_CUP",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // HACER_CUP ::= HACER DEVOLUCION_CUP MIENTRAS CONDICION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("HACER_CUP",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA_VARIABLES_CUP ::= COMA LISTA_VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES_CUP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA_VARIABLES_CUP ::= TIPO_DATO_CUP VARIABLE LISTA_VARIABLES_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES_CUP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_VARIABLES_CUP ::= TIPO_DATO_CUP VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES_CUP",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCIONES_SUELTAS_CUP ::= TIPO_DATO_CUP VARIABLE PARENTESIS1 LISTA_VARIABLES_CUP PARENTESIS2 DEVOLUCION_CUP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_SUELTAS_CUP",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
