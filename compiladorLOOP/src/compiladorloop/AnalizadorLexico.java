/* The following code was generated by JFlex 1.7.0 */

package compiladorloop;

import java_cup.runtime.*;
import createdClasses.token;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/libraries/loop.jflex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\102\1\44\1\103\1\103\1\45\22\0\1\43\1\72\1\41"+
    "\2\0\1\61\2\0\1\52\1\53\1\57\1\55\1\54\1\56\1\37"+
    "\1\60\1\36\11\35\1\73\1\51\1\71\1\63\1\70\2\0\1\64"+
    "\1\100\1\1\1\27\1\25\2\42\1\33\1\31\2\42\1\26\1\14"+
    "\1\65\1\66\1\6\1\42\1\67\1\24\7\42\1\74\1\0\1\75"+
    "\1\0\1\50\1\0\1\3\1\17\1\20\1\13\1\5\1\40\1\22"+
    "\1\32\1\12\2\46\1\2\1\30\1\23\1\10\1\11\1\46\1\7"+
    "\1\4\1\15\1\16\1\21\1\46\1\34\1\46\1\101\1\76\1\47"+
    "\1\77\7\0\1\103\u0240\0\1\62\u1d61\0\1\103\1\103\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\1\2\4\3\1\2\5\3"+
    "\4\2\1\3\1\2\1\3\1\2\2\4\1\5\1\3"+
    "\1\1\1\2\2\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\2\2"+
    "\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30"+
    "\1\1\2\2\1\0\2\3\1\1\1\3\1\31\3\3"+
    "\2\2\5\3\2\2\6\3\1\31\5\2\1\3\1\2"+
    "\1\3\1\2\3\0\1\3\1\0\1\32\1\0\1\33"+
    "\1\34\1\35\1\2\1\36\1\37\1\0\3\2\10\3"+
    "\3\2\10\3\2\2\7\3\7\2\1\3\1\2\1\3"+
    "\1\2\1\40\1\3\1\0\1\41\1\6\2\2\1\42"+
    "\1\3\1\43\1\44\4\3\5\2\1\45\1\46\10\3"+
    "\2\2\6\3\1\47\1\44\3\2\1\42\3\2\1\3"+
    "\2\2\1\3\1\2\1\3\1\50\1\51\1\2\5\3"+
    "\5\2\4\3\1\52\3\3\2\2\6\3\3\2\1\52"+
    "\2\2\1\3\2\2\2\53\1\54\1\2\2\3\1\55"+
    "\2\3\4\2\7\3\2\2\2\3\1\56\1\57\2\3"+
    "\5\2\1\3\3\2\4\3\3\2\2\3\1\60\4\3"+
    "\1\61\1\2\5\3\5\2\1\3\1\60\2\2\1\3"+
    "\1\62\1\63\1\64\1\2\1\65\1\2\5\3\1\66"+
    "\1\67\1\70\1\71\4\3\1\62\1\63\1\64\2\2"+
    "\1\67\2\2\1\72\1\2\2\73\10\3\5\2\1\74"+
    "\1\3\1\75\5\3\1\75\2\2\1\76\1\77\1\100"+
    "\1\101\1\3\1\102\1\3\1\76\1\101\1\100\2\3"+
    "\1\103\1\3\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\104\0\u08c4\0\104\0\104\0\104\0\104\0\u0908"+
    "\0\u094c\0\104\0\104\0\104\0\104\0\u0990\0\u09d4\0\u0a18"+
    "\0\104\0\104\0\u0a5c\0\104\0\104\0\104\0\104\0\104"+
    "\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c"+
    "\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u0770\0\u072c\0\u1474"+
    "\0\u14b8\0\u07f8\0\104\0\u14fc\0\104\0\104\0\104\0\u1540"+
    "\0\u083c\0\104\0\u1584\0\u15c8\0\u160c\0\u0b6c\0\u1650\0\u1694"+
    "\0\u0c38\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870"+
    "\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0"+
    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u1474\0\u2068\0\u20ac"+
    "\0\u083c\0\u20f0\0\u2134\0\u2178\0\u0110\0\u21bc\0\u0110\0\u0110"+
    "\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\u0110\0\u0110\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\u0110\0\u083c\0\u28a4\0\u28e8\0\u292c"+
    "\0\u083c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08"+
    "\0\u2b4c\0\u2b90\0\104\0\u083c\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0"+
    "\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u0110\0\u2fd0\0\u3014\0\u3058\0\u309c"+
    "\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc"+
    "\0\u3300\0\u3344\0\u083c\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498"+
    "\0\u0110\0\u083c\0\u0110\0\u34dc\0\u3520\0\u3564\0\u0110\0\u35a8"+
    "\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8"+
    "\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8"+
    "\0\u3a2c\0\u0110\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4"+
    "\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u0110\0\u3fc0"+
    "\0\u4004\0\u4048\0\u408c\0\u083c\0\u40d0\0\u4114\0\u4158\0\u419c"+
    "\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc"+
    "\0\u083c\0\u4400\0\u4444\0\u4488\0\u0110\0\u0110\0\u0110\0\u44cc"+
    "\0\u083c\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664\0\u0110"+
    "\0\u083c\0\u0110\0\u0110\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u083c"+
    "\0\u083c\0\u083c\0\u47b8\0\u47fc\0\u0110\0\u4840\0\u4884\0\u0110"+
    "\0\u48c8\0\u083c\0\u0110\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c"+
    "\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c"+
    "\0\u0110\0\u4c80\0\u0110\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4"+
    "\0\u083c\0\u4e18\0\u4e5c\0\u083c\0\u083c\0\u0110\0\u0110\0\u4ea0"+
    "\0\u0110\0\u4ee4\0\u0110\0\u083c\0\u083c\0\u4f28\0\u4f6c\0\u0110"+
    "\0\u4fb0\0\u0110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\13\1\14\1\15\1\16\1\5\1\17"+
    "\1\20\1\21\1\5\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\5\2\2"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\40\1\60\1\40\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\40"+
    "\1\5\1\71\106\0\1\40\1\72\5\40\1\73\26\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\4\5\1\75\2\5\1\76"+
    "\26\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\36\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\4\5\1\100\4\5\1\101\24\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\3\5\1\102\16\5\1\103\10\5"+
    "\1\104\2\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\6\40\1\105"+
    "\6\40\1\106\20\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\2\5"+
    "\1\107\1\5\1\110\31\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\6\5\1\111\27\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\22\5"+
    "\1\112\13\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\4\5\1\113"+
    "\31\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\4\40\1\114\4\40"+
    "\1\115\24\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\2\5\1\116"+
    "\33\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\7\5\1\117\26\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\2\5\1\120\4\5\1\121"+
    "\26\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\4\5\1\122\31\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\15\5\1\123\20\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\11\40\1\124\24\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\3\40\1\125\16\40\1\126\10\40\1\127"+
    "\2\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\4\40\1\130\31\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\4\40\1\131\31\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\3\0\11\5\1\132\24\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\22\40\1\133\13\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\2\5\1\134\33\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\2\40\1\135\33\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\37\0\2\33"+
    "\1\136\101\0\2\137\1\136\101\0\2\140\46\0\2\5"+
    "\1\141\33\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\36\142\1\0"+
    "\1\142\1\143\2\142\2\0\1\142\15\0\4\142\10\0"+
    "\2\142\3\0\36\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\45\0\1\144"+
    "\104\0\1\42\114\0\1\145\104\0\1\146\110\0\1\147"+
    "\21\0\36\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\1\40\1\150\2\40\10\0\2\40\3\0"+
    "\36\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\3\40\1\151\10\0\2\40\65\0\1\152\67\0"+
    "\1\153\35\0\2\40\1\154\33\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\22\40\1\155\13\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\36\156\1\0\1\156\1\0\1\156\3\0\2\156\14\0"+
    "\4\156\10\0\2\156\3\0\4\5\1\157\31\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\21\5\1\160\14\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\36\161\1\0\1\161\1\0\1\161\3\0"+
    "\2\161\14\0\4\161\10\0\2\161\3\0\22\5\1\162"+
    "\13\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\22\5\1\163\13\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\17\5\1\164\16\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\14\5\1\165\21\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\14\5\1\166\21\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\7\40\1\167\1\40\1\170\24\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\16\40\1\171\17\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\11\5\1\172\24\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\2\5\1\173\33\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\11\5"+
    "\1\174\24\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\3\5\1\175"+
    "\13\5\1\176\16\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\3\5"+
    "\1\177\13\5\1\200\1\201\15\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\14\40\1\202\21\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\4\40\1\203\31\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\22\5"+
    "\1\204\13\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\7\5\1\205"+
    "\26\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\12\5\1\206\23\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\3\5\1\207\16\5\1\210"+
    "\13\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\6\5\1\211\27\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\1\5\1\212\34\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\22\40\1\213\13\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\17\40\1\214\16\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\14\40\1\215\21\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\14\40\1\216\21\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\4\40"+
    "\1\217\31\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\3\40\1\220"+
    "\13\40\1\221\16\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\4\5"+
    "\1\222\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\17\40\1\223"+
    "\16\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\17\5\1\224\16\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\17\40\1\225\16\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\37\0\1\226\1\140\46\0\1\5\1\227"+
    "\34\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\45\0\1\230\41\0\26\40"+
    "\1\231\7\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\46\0\1\42\1\232"+
    "\37\0\3\40\1\233\32\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\3\40\1\234\32\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\6\5"+
    "\1\235\27\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\2\5\1\236"+
    "\33\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\7\5\1\237\26\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\7\5\1\240\26\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\6\5\1\241\27\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\4\5\1\242\2\5\1\243\26\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\11\5\1\244\24\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\10\40\1\245\3\40\1\246\21\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\3\0\20\40\1\247\1\40\1\250\13\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\1\40\1\251\34\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\3\0\36\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\1\5\1\252"+
    "\3\0\1\5\1\253\34\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\22\5\1\254\13\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\14\5"+
    "\1\255\21\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\1\5\1\256"+
    "\4\5\1\257\27\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\12\5"+
    "\1\260\1\5\1\261\21\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\6\5\1\262\27\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\7\5"+
    "\1\263\26\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\7\40\1\264"+
    "\26\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\22\40\1\265\13\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\21\5\1\266\14\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\1\5\1\267\34\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\4\5\1\270\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\4\5\1\271\31\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\3\5\1\272\32\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\12\5"+
    "\1\273\23\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\7\5\1\274"+
    "\26\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\7\40\1\275\26\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\6\40\1\276\27\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\3\0\7\40\1\277\26\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\11\40\1\300\24\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\6\40\1\301\27\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\12\40\1\302\1\40\1\303\21\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\6\40\1\304\27\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\22\5\1\305\13\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\1\40"+
    "\1\306\4\40\1\307\27\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\4\5\1\310\31\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\4\40"+
    "\1\311\31\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\3\5\1\312"+
    "\32\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\45\0\1\313\63\0\1\42"+
    "\61\0\4\40\1\314\31\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\14\40\1\315\21\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\6\5"+
    "\1\316\27\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\11\5\1\317"+
    "\24\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\6\5\1\320\27\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\22\5\1\321\13\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\4\5\1\322\31\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\11\40\1\323\24\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\4\40\1\324\31\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\2\40\1\325\33\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\17\40"+
    "\1\326\16\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\11\40\1\327"+
    "\24\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\17\5\1\330\16\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\2\5\1\331\33\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\15\5\1\332\20\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\4\5\1\333\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\4\5\1\334\31\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\6\5\1\335\27\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\4\5"+
    "\1\336\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\1\5\1\337"+
    "\34\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\12\40\1\340\23\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\14\40\1\341\21\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\3\0\4\5\1\342\31\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\4\5\1\343\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\22\5\1\344\13\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\22\5\1\345\13\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\14\5"+
    "\1\346\21\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\2\5\1\347"+
    "\33\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\11\40\1\350\24\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\22\40\1\351\13\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\3\0\4\40\1\352\31\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\4\40\1\353\31\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\6\40\1\354\27\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\4\40\1\355\31\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\14\5"+
    "\1\356\21\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\15\40\1\357"+
    "\20\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\4\40\1\360\31\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\6\5\1\361\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\6\40\1\362\27\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\7\5\1\363\26\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\6\40\1\364\27\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\11\5\1\365\24\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\16\5"+
    "\1\366\17\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\7\5\1\367"+
    "\26\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\17\5\1\370\16\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\22\5\1\371\13\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\4\40\1\372\31\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\21\40\1\373\14\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\12\40\1\374\23\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\11\40\1\375\24\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\17\40"+
    "\1\374\16\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\11\5\1\376"+
    "\24\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\22\5\1\377\13\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\11\5\1\u0100\24\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\27\5\1\u0101\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\15\5\1\u0102\20\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\27\5\1\u0103\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\20\5\1\u0104\15\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\7\40"+
    "\1\u0105\26\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\6\40\1\u0106"+
    "\27\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\22\5\1\u0107\13\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\2\5\1\u0108\33\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\2\5\1\u0109\33\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\7\5\1\u010a\26\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\6\5\1\u010b\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\12\5\1\u010c\23\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\16\40"+
    "\1\u010d\17\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\17\40\1\u010e"+
    "\16\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\22\40\1\u010f\13\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\15\40\1\u0110\20\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\3\0\27\40\1\u0111\6\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\6\5\1\u0112\27\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\11\40\1\u0113\24\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\27\40\1\u0114\6\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\15\40"+
    "\1\u0115\20\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\14\5\1\u0116"+
    "\21\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\11\5\1\u0117\24\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\4\5\1\u0118\31\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\12\5\1\u0119\23\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\12\40\1\u011a\23\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\11\40\1\325\24\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\2\40\1\u011b\4\40\1\u011b\26\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\10\40\1\u011c\25\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\10\5\1\u011d\25\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\17\5"+
    "\1\u011e\16\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\6\5\1\u011f"+
    "\27\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\4\5\1\u0120\31\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\17\5\1\u0121\16\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\4\5\1\u0122\31\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\4\5\1\u0123\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\3\40\1\u0124\32\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\2\40\1\u0125\33\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\14\5"+
    "\1\u0126\21\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\22\5\1\u0127"+
    "\13\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\36\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\1\u0128\3\5"+
    "\10\0\2\5\3\0\15\5\1\u0129\20\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\4\5\1\u012a\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\11\40\1\u012b\24\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\4\40\1\u012c\31\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\12\40"+
    "\1\u012d\23\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\17\40\1\u012e"+
    "\16\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\4\40\1\u012f\31\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\2\5\1\u0130\33\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\6\40\1\u0131\27\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\4\40\1\u0132\31\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\17\40\1\u0133\16\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\27\5\1\u0134\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\6\5"+
    "\1\u0135\27\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\3\5\1\u0136"+
    "\32\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\4\5\1\u0137\31\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\2\40\1\u0138\33\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\3\0\3\40\1\u0139\32\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\2\40\1\u013a\33\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\2\5\1\u013b\33\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\11\5\1\u013c\24\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\22\5"+
    "\1\u013d\13\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\14\5\1\u013e"+
    "\21\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\22\5\1\u013f\13\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\6\5\1\u0140\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\3\40\1\u0141\32\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\4\5\1\u0142\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\7\5\1\u0143\26\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\24\5\1\u0144\11\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\3\5\1\u0145\10\0\1\u0146\1\5"+
    "\3\0\17\5\1\u0147\16\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\6\5\1\312\27\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\6\40"+
    "\1\u0148\27\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\3\40\1\u0149"+
    "\32\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\4\40\1\u014a\31\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\14\40\1\u014b\21\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\3\0\22\40\1\u014c\13\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\3\5\1\u014d\32\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\22\40\1\u014e\13\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\14\40\1\u014f\21\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\7\5"+
    "\1\u0150\26\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\12\40\1\u0151"+
    "\23\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\1\40\1\u0152\34\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\1\5\1\u0153\34\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\2\5\1\u0154\33\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\14\5\1\u0155\21\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\7\5\1\u0156\26\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\14\5\1\u0157\21\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\22\5"+
    "\1\u0158\13\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\4\5\1\u0159"+
    "\31\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\7\5\1\u015a\26\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\14\5\1\u015b\21\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\7\40\1\u015c\26\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\14\40\1\u015d\21\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\14\40\1\u015e\21\40\1\0\1\40\1\0\1\40"+
    "\3\0\2\40\1\74\13\0\4\40\10\0\2\40\3\0"+
    "\7\40\1\u015f\26\40\1\0\1\40\1\0\1\40\3\0"+
    "\2\40\1\74\13\0\4\40\10\0\2\40\3\0\4\40"+
    "\1\u0160\31\40\1\0\1\40\1\0\1\40\3\0\2\40"+
    "\1\74\13\0\4\40\10\0\2\40\3\0\6\5\1\u0161"+
    "\27\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\2\5\1\u0162\33\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\6\5\1\u0163\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\2\5\1\u0164\33\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\77\13\0\4\5\10\0"+
    "\2\5\3\0\14\5\1\u0165\21\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\77\13\0\4\5\10\0\2\5"+
    "\3\0\2\5\1\u0166\33\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\1\5\1\u0167\34\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\7\5"+
    "\1\u0168\26\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\6\40\1\u0169"+
    "\27\40\1\0\1\40\1\0\1\40\3\0\2\40\1\74"+
    "\13\0\4\40\10\0\2\40\3\0\2\40\1\u016a\33\40"+
    "\1\0\1\40\1\0\1\40\3\0\2\40\1\74\13\0"+
    "\4\40\10\0\2\40\3\0\2\40\1\u016b\33\40\1\0"+
    "\1\40\1\0\1\40\3\0\2\40\1\74\13\0\4\40"+
    "\10\0\2\40\3\0\6\40\1\u016c\27\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\3\40\1\u016d\32\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\6\5\1\u016e\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\6\5\1\u016f\27\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\4\5"+
    "\1\u0170\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\1\5\1\u0171"+
    "\34\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\4\5\1\u0172\31\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\3\0\6\5\1\u0173\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\77\13\0\4\5"+
    "\10\0\2\5\3\0\6\40\1\u0174\27\40\1\0\1\40"+
    "\1\0\1\40\3\0\2\40\1\74\13\0\4\40\10\0"+
    "\2\40\3\0\6\40\1\u0175\27\40\1\0\1\40\1\0"+
    "\1\40\3\0\2\40\1\74\13\0\4\40\10\0\2\40"+
    "\3\0\6\5\1\u0176\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\77\13\0\4\5\10\0\2\5\3\0"+
    "\2\5\1\u0177\33\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\77\13\0\4\5\10\0\2\5\3\0\7\5"+
    "\1\u0178\26\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\77\13\0\4\5\10\0\2\5\3\0\22\5\1\u0179"+
    "\13\5\1\0\1\5\1\0\1\5\3\0\2\5\1\77"+
    "\13\0\4\5\10\0\2\5\3\0\7\5\1\u017a\26\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\77\13\0"+
    "\4\5\10\0\2\5\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20468];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\1\11\1\0\4\11\2\1\4\11"+
    "\3\1\2\11\1\1\5\11\3\1\1\0\41\1\3\0"+
    "\1\1\1\0\1\11\1\0\3\11\2\1\1\11\1\0"+
    "\54\1\1\0\62\1\1\11\257\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<token> tokens;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
      this.tokens = new ArrayList<>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { tokens.add(new token("ERROR", yytext()));
            //return new Symbol(sym.ERROR, new token("ERROR", yytext()));
            } 
            // fall through
          case 69: break;
          case 2: 
            { tokens.add(new token("VARIABLE_CLASE", yytext()));
            //return new Symbol(sym.VARIABLE_CLASE, new token("VARIABLE_CLASE", yytext()));
            } 
            // fall through
          case 70: break;
          case 3: 
            { tokens.add(new token("VARIABLE", yytext()));
            //return new Symbol(sym.VARIABLE, new token("VARIABLE", yytext()));
            } 
            // fall through
          case 71: break;
          case 4: 
            { tokens.add(new token("DECIMALES", yytext()));
            //return new Symbol(sym.DECIMALES, new token("DECIMALES", yytext()));
            } 
            // fall through
          case 72: break;
          case 5: 
            { tokens.add(new token("PUNTO", yytext()));
            //return new Symbol(sym.PUNTO, new token("PUNTO", yytext()));
            } 
            // fall through
          case 73: break;
          case 6: 
            { 
            } 
            // fall through
          case 74: break;
          case 7: 
            { tokens.add(new token("PUNTO_Y_COMA", yytext()));
            //return new Symbol(sym.PUNTO_Y_COMA, new token("PUNTO_Y_COMA", yytext()));
            } 
            // fall through
          case 75: break;
          case 8: 
            { tokens.add(new token("PARENTESIS1", yytext()));
            //return new Symbol(sym.PARENTESIS1, new token("PARENTESIS1", yytext()));
            } 
            // fall through
          case 76: break;
          case 9: 
            { tokens.add(new token("PARENTESIS2", yytext()));
            //return new Symbol(sym.PARENTESIS2, new token("PARENTESIS2", yytext()));
            } 
            // fall through
          case 77: break;
          case 10: 
            { tokens.add(new token("COMA", yytext()));
            //return new Symbol(sym.COMA, new token("COMA", yytext()));
            } 
            // fall through
          case 78: break;
          case 11: 
            { tokens.add(new token("SUMA", yytext()));
            //return new Symbol(sym.SUMA, new token("SUMA", yytext()));
            } 
            // fall through
          case 79: break;
          case 12: 
            { tokens.add(new token("RESTA", yytext()));
            //return new Symbol(sym.RESTA, new token("RESTA", yytext()));
            } 
            // fall through
          case 80: break;
          case 13: 
            { tokens.add(new token("MULTIPLICACION", yytext()));
            //return new Symbol(sym.MULTIPLICACION, new token("MULTIPLICACION", yytext()));
            } 
            // fall through
          case 81: break;
          case 14: 
            { tokens.add(new token("DIVISION", yytext()));
            //return new Symbol(sym.DIVISION, new token("DIVISION", yytext()));
            } 
            // fall through
          case 82: break;
          case 15: 
            { tokens.add(new token("MODULO", yytext()));
            //return new Symbol(sym.MODULO, new token("MODULO", yytext()));
            } 
            // fall through
          case 83: break;
          case 16: 
            { tokens.add(new token("EXPONENCIACION", yytext()));
            //return new Symbol(sym.EXPONENCIACION, new token("EXPONENCIACION", yytext()));
            } 
            // fall through
          case 84: break;
          case 17: 
            { tokens.add(new token("IGUAL", yytext()));
            //return new Symbol(sym.IGUAL, new token("IGUAL", yytext()));
            } 
            // fall through
          case 85: break;
          case 18: 
            { tokens.add(new token("MAYOR_QUE", yytext()));
            //return new Symbol(sym.MAYOR_QUE, new token("MAYOR_QUE", yytext()));
            } 
            // fall through
          case 86: break;
          case 19: 
            { tokens.add(new token("MENOR_QUE", yytext()));
            //return new Symbol(sym.MENOR_QUE, new token("MENOR_QUE", yytext()));
            } 
            // fall through
          case 87: break;
          case 20: 
            { tokens.add(new token("DOS_PUNTOS", yytext()));
            //return new Symbol(sym.DOS_PUNTOS, new token("DOS_PUNTOS", yytext()));
            } 
            // fall through
          case 88: break;
          case 21: 
            { tokens.add(new token("CORCHETE1", yytext()));
            //return new Symbol(sym.CORCHETE1, new token("CORCHETE1", yytext()));
            } 
            // fall through
          case 89: break;
          case 22: 
            { tokens.add(new token("CORCHETE2", yytext()));
            //return new Symbol(sym.CORCHETE2, new token("CORCHETE2", yytext()));
            } 
            // fall through
          case 90: break;
          case 23: 
            { tokens.add(new token("LLAVE1", yytext()));
            //return new Symbol(sym.LLAVE1, new token("LLAVE1", yytext()));
            } 
            // fall through
          case 91: break;
          case 24: 
            { tokens.add(new token("LLAVE2", yytext()));
            //return new Symbol(sym.LLAVE2, new token("LLAVE2", yytext()));
            } 
            // fall through
          case 92: break;
          case 25: 
            { tokens.add(new token("IF", yytext()));
            //return new Symbol(sym.IF, new token("IF", yytext()));
            } 
            // fall through
          case 93: break;
          case 26: 
            { tokens.add(new token("CADENA", yytext()));
            //return new Symbol(sym.CADENA, new token("CADENA", yytext()));
            } 
            // fall through
          case 94: break;
          case 27: 
            { tokens.add(new token("INCREMENTO", yytext()));
            //return new Symbol(sym.INCREMENTO, new token("INCREMENTO", yytext()));
            } 
            // fall through
          case 95: break;
          case 28: 
            { tokens.add(new token("DECREMENTO", yytext()));
            //return new Symbol(sym.DECREMENTO, new token("DECREMENTO", yytext()));
            } 
            // fall through
          case 96: break;
          case 29: 
            { tokens.add(new token("IGUAL_QUE", yytext()));
            //return new Symbol(sym.IGUAL_QUE, new token("IGUAL_QUE", yytext()));
            } 
            // fall through
          case 97: break;
          case 30: 
            { tokens.add(new token("OR", yytext()));
            //return new Symbol(sym.OR, new token("OR", yytext()));
            } 
            // fall through
          case 98: break;
          case 31: 
            { tokens.add(new token("DISTINTO_QUE", yytext()));
            //return new Symbol(sym.DISTINTO_QUE, new token("DISTINTO_QUE", yytext()));
            } 
            // fall through
          case 99: break;
          case 32: 
            { tokens.add(new token("REALES", yytext()));
            //return new Symbol(sym.REALES, new token("REALES", yytext()));
            } 
            // fall through
          case 100: break;
          case 33: 
            { tokens.add(new token("AND", yytext()));
            //return new Symbol(sym.AND, new token("AND", yytext()));
            } 
            // fall through
          case 101: break;
          case 34: 
            { tokens.add(new token("LEER", yytext()));
            //return new Symbol(sym.LEER, new token("LEER", yytext()));
            } 
            // fall through
          case 102: break;
          case 35: 
            { tokens.add(new token("SENO", yytext()));
            //return new Symbol(sym.SENO, new token("SENO", yytext()));
            } 
            // fall through
          case 103: break;
          case 36: 
            { tokens.add(new token("SINO", yytext()));
            //return new Symbol(sym.SINO, new token("SINO", yytext()));
            } 
            // fall through
          case 104: break;
          case 37: 
            { tokens.add(new token("RAIZ", yytext()));
            //return new Symbol(sym.RAIZ, new token("RAIZ", yytext()));
            } 
            // fall through
          case 105: break;
          case 38: 
            { tokens.add(new token("TIPO_REAL", yytext()));
            //return new Symbol(sym.TIPO_REAL, new token("TIPO_REAL", yytext()));
            } 
            // fall through
          case 106: break;
          case 39: 
            { tokens.add(new token("TIPO_NULO", yytext()));
            //return new Symbol(sym.TIPO_NULO, new token("TIPO_NULO", yytext()));
            } 
            // fall through
          case 107: break;
          case 40: 
            { tokens.add(new token("TABULACION", yytext()));
            //return new Symbol(sym.TABULACION, new token("TABULACION", yytext()));
            } 
            // fall through
          case 108: break;
          case 41: 
            { tokens.add(new token("CLASE", yytext()));
            //return new Symbol(sym.CLASE, new token("CLASE", yytext()));
            } 
            // fall through
          case 109: break;
          case 42: 
            { tokens.add(new token("DESDE", yytext()));
            //return new Symbol(sym.DESDE, new token("DESDE", yytext()));
            } 
            // fall through
          case 110: break;
          case 43: 
            { tokens.add(new token("HACER", yytext()));
            //return new Symbol(sym.HACER, new token("HACER", yytext()));
            } 
            // fall through
          case 111: break;
          case 44: 
            { tokens.add(new token("BOOLEANO", yytext()));
            //return new Symbol(sym.BOOLEANO, new token("BOOLEANO", yytext()));
            } 
            // fall through
          case 112: break;
          case 45: 
            { tokens.add(new token("TIPO_ENTERO", yytext()));
            //return new Symbol(sym.TIPO_ENTERO, new token("TIPO_ENTERO", yytext()));
            } 
            // fall through
          case 113: break;
          case 46: 
            { tokens.add(new token("TIPO_CADENA", yytext()));
            //return new Symbol(sym.TIPO_CADENA, new token("TIPO_CADENA", yytext()));
            } 
            // fall through
          case 114: break;
          case 47: 
            { tokens.add(new token("COSENO", yytext()));
            //return new Symbol(sym.COSENO, new token("COSENO", yytext()));
            } 
            // fall through
          case 115: break;
          case 48: 
            { tokens.add(new token("INCLUIR", yytext()));
            //return new Symbol(sym.INCLUIR, new token("INCLUIR", yytext()));
            } 
            // fall through
          case 116: break;
          case 49: 
            { tokens.add(new token("METODOS", yytext()));
            //return new Symbol(sym.METODOS, new token("METODOS", yytext()));
            } 
            // fall through
          case 117: break;
          case 50: 
            { tokens.add(new token("ESCRIBIR", yytext()));
            //return new Symbol(sym.ESCRIBIR, new token("ESCRIBIR", yytext()));
            } 
            // fall through
          case 118: break;
          case 51: 
            { tokens.add(new token("ENTONCES", yytext()));
            //return new Symbol(sym.ENTONCES, new token("ENTONCES", yytext()));
            } 
            // fall through
          case 119: break;
          case 52: 
            { tokens.add(new token("EXTIENDE", yytext()));
            //return new Symbol(sym.EXTIENDE, new token("EXTIENDE", yytext()));
            } 
            // fall through
          case 120: break;
          case 53: 
            { tokens.add(new token("PROPIEDADES_METODOS", yytext()));
            //return new Symbol(sym.PROPIEDADES_METODOS, new token("PROPIEDADES_METODOS", yytext()));
            } 
            // fall through
          case 121: break;
          case 54: 
            { tokens.add(new token("DEVOLVER", yytext()));
            //return new Symbol(sym.DEVOLVER, new token("DEVOLVER", yytext()));
            } 
            // fall through
          case 122: break;
          case 55: 
            { tokens.add(new token("MIENTRAS", yytext()));
            //return new Symbol(sym.MIENTRAS, new token("MIENTRAS", yytext()));
            } 
            // fall through
          case 123: break;
          case 56: 
            { tokens.add(new token("TANGENTE", yytext()));
            //return new Symbol(sym.TANGENTE, new token("TANGENTE", yytext()));
            } 
            // fall through
          case 124: break;
          case 57: 
            { tokens.add(new token("TIPO_BOOLEANO", yytext()));
            //return new Symbol(sym.TIPO_BOOLEANO, new token("TIPO_BOOLEANO", yytext()));
            } 
            // fall through
          case 125: break;
          case 58: 
            { tokens.add(new token("LOGARITMO", yytext()));
            //return new Symbol(sym.LOGARITMO, new token("LOGARITMO", yytext()));
            } 
            // fall through
          case 126: break;
          case 59: 
            { tokens.add(new token("PRINCIPAL", yytext()));
            //return new Symbol(sym.PRINCIPAL, new token("PRINCIPAL", yytext()));
            } 
            // fall through
          case 127: break;
          case 60: 
            { tokens.add(new token("INSTANCIAR", yytext()));
            //return new Symbol(sym.INSTANCIAR, new token("INSTANCIAR", yytext()));
            } 
            // fall through
          case 128: break;
          case 61: 
            { tokens.add(new token("DESTRUCTOR", yytext()));
            //return new Symbol(sym.DESTRUCTOR, new token("DESTRUCTOR", yytext()));
            } 
            // fall through
          case 129: break;
          case 62: 
            { tokens.add(new token("CONSTRUCTOR", yytext()));
            //return new Symbol(sym.CONSTRUCTOR, new token("CONSTRUCTOR", yytext()));
            } 
            // fall through
          case 130: break;
          case 63: 
            { tokens.add(new token("PROPIEDADES", yytext()));
            //return new Symbol(sym.PROPIEDADES, new token("PROPIEDADES", yytext()));
            } 
            // fall through
          case 131: break;
          case 64: 
            { tokens.add(new token("INCREMENTAR", yytext()));
            //return new Symbol(sym.INCREMENTAR, new token("INCREMENTAR", yytext()));
            } 
            // fall through
          case 132: break;
          case 65: 
            { tokens.add(new token("DECREMENTAR", yytext()));
            //return new Symbol(sym.DECREMENTAR, new token("DECREMENTAR", yytext()));
            } 
            // fall through
          case 133: break;
          case 66: 
            { tokens.add(new token("CADENA_A_REAL", yytext()));
            //return new Symbol(sym.CADENA_A_REAL, new token("CADENA_A_REAL", yytext()));
            } 
            // fall through
          case 134: break;
          case 67: 
            { tokens.add(new token("CADENA_A_ENTERO", yytext()));
            //return new Symbol(sym.CADENA_A_ENTERO, new token("CADENA_A_ENTERO", yytext()));
            } 
            // fall through
          case 135: break;
          case 68: 
            { tokens.add(new token("CADENA_A_BOOLEANO", yytext()));
            //return new Symbol(sym.CADENA_A_BOOLEANO, new token("CADENA_A_BOOLEANO", yytext()));
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
