/* The following code was generated by JFlex 1.7.0 */

package compiladorloop;

import java_cup.runtime.*;
import createdClasses.token;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/libraries/loop.jflex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\44\1\52\1\52\1\45\22\0\1\43\1\0\1\41\13\0"+
    "\1\37\1\0\1\36\11\35\1\0\1\46\5\0\2\42\1\1\1\27"+
    "\1\25\2\42\1\33\1\31\2\42\1\26\1\14\2\42\1\6\2\42"+
    "\1\24\7\42\4\0\1\51\1\0\1\3\1\17\1\20\1\13\1\5"+
    "\1\40\1\22\1\32\1\12\2\47\1\2\1\30\1\23\1\10\1\11"+
    "\1\47\1\7\1\4\1\15\1\16\1\21\1\47\1\34\2\47\1\0"+
    "\1\50\10\0\1\52\u1fa2\0\1\52\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\4\2\1\1\4\2\1\1\4\2\4\1"+
    "\1\2\1\1\1\2\1\1\1\3\2\1\1\2\3\1"+
    "\2\4\1\5\1\0\3\6\1\2\1\6\1\7\3\2"+
    "\2\6\4\2\2\6\5\2\1\7\5\6\1\2\1\6"+
    "\1\2\1\6\3\0\1\2\1\0\1\10\1\0\1\6"+
    "\1\0\1\6\6\2\3\6\7\2\2\6\5\2\7\6"+
    "\1\2\1\6\1\2\1\6\1\11\1\2\1\0\3\6"+
    "\1\12\1\13\4\2\5\6\1\14\10\2\2\6\4\2"+
    "\1\13\3\6\1\12\3\6\1\2\2\6\1\2\1\6"+
    "\1\2\1\15\1\16\1\6\3\2\5\6\4\2\1\17"+
    "\3\2\2\6\4\2\3\6\1\17\2\6\1\2\2\6"+
    "\2\20\1\21\1\6\3\2\4\6\7\2\2\6\3\2"+
    "\5\6\1\2\3\6\3\2\3\6\2\2\1\22\4\2"+
    "\1\23\1\6\2\2\5\6\1\2\1\22\2\6\1\24"+
    "\1\25\1\26\1\6\1\27\1\6\5\2\1\30\1\31"+
    "\1\2\1\24\1\25\1\26\2\6\1\31\3\6\2\32"+
    "\5\2\5\6\1\33\1\2\1\34\2\2\1\34\2\6"+
    "\1\35\1\36\1\37\1\40\1\35\1\40\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535"+
    "\0\53\0\u0560\0\53\0\u050a\0\u058b\0\u05b6\0\u05e1\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14"+
    "\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0489\0\u045e\0\u0aeb\0\u0b16"+
    "\0\u04df\0\53\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0637"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u0aeb\0\u1178\0\u11a3\0\u11ce\0\u0b97\0\u11f9\0\254\0\254"+
    "\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351"+
    "\0\u137c\0\254\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e"+
    "\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6"+
    "\0\u05b6\0\u1601\0\u162c\0\u1657\0\u05b6\0\u1682\0\u16ad\0\u16d8"+
    "\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\53\0\u05b6"+
    "\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932"+
    "\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\254\0\u1a34\0\u1a5f"+
    "\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7"+
    "\0\u1be2\0\u1c0d\0\u05b6\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4"+
    "\0\254\0\u05b6\0\254\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb"+
    "\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13"+
    "\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\u2040\0\u206b"+
    "\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3"+
    "\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u231b"+
    "\0\254\0\u2346\0\u2371\0\u239c\0\u23c7\0\u05b6\0\u23f2\0\u241d"+
    "\0\u2448\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u05b6"+
    "\0\u2575\0\u25a0\0\254\0\254\0\254\0\u25cb\0\u05b6\0\u25f6"+
    "\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd\0\254\0\u05b6\0\u26f8"+
    "\0\u05b6\0\u05b6\0\u05b6\0\u2723\0\u274e\0\254\0\u2779\0\u27a4"+
    "\0\u27cf\0\u05b6\0\254\0\u27fa\0\u2825\0\u2850\0\u287b\0\u28a6"+
    "\0\u28d1\0\u28fc\0\u2927\0\u2952\0\u297d\0\254\0\u29a8\0\254"+
    "\0\u29d3\0\u29fe\0\u05b6\0\u2a29\0\u2a54\0\u05b6\0\u05b6\0\254"+
    "\0\254\0\254\0\u05b6\0\u05b6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\13\1\14\1\15\2\5\1\16\1\17"+
    "\1\20\1\5\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\5\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\5\2\2"+
    "\55\0\1\44\1\45\3\46\1\44\1\46\1\47\3\46"+
    "\1\44\7\46\4\44\1\46\1\44\1\46\1\44\1\46"+
    "\3\0\1\46\1\0\1\44\4\0\1\46\4\0\4\5"+
    "\1\50\31\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\36\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\11\5\1\52\24\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\3\5\1\53"+
    "\16\5\1\54\10\5\1\55\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\1\44\4\46\1\44"+
    "\1\56\4\46\1\44\1\46\1\57\5\46\4\44\1\46"+
    "\1\44\1\46\1\44\1\46\3\0\1\46\1\0\1\44"+
    "\4\0\1\46\4\0\4\5\1\60\31\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\6\5\1\61"+
    "\27\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\22\5\1\62\13\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\4\5\1\63\31\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\1\44"+
    "\3\46\1\64\1\44\3\46\1\65\1\46\1\44\7\46"+
    "\4\44\1\46\1\44\1\46\1\44\1\46\3\0\1\46"+
    "\1\0\1\44\4\0\1\46\4\0\7\5\1\66\26\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\2\5\1\67\4\5\1\70\26\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\4\5\1\71\31\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\15\5\1\72\20\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\1\44\4\46\1\44\3\46\1\73"+
    "\1\46\1\44\7\46\4\44\1\46\1\44\1\46\1\44"+
    "\1\46\3\0\1\46\1\0\1\44\4\0\1\46\4\0"+
    "\1\44\2\46\1\74\1\46\1\44\5\46\1\44\6\46"+
    "\1\75\4\44\1\46\1\44\1\46\1\44\1\76\3\0"+
    "\1\46\1\0\1\44\4\0\1\46\4\0\1\44\3\46"+
    "\1\77\1\44\5\46\1\44\7\46\4\44\1\46\1\44"+
    "\1\46\1\44\1\46\3\0\1\46\1\0\1\44\4\0"+
    "\1\46\4\0\1\44\3\46\1\100\1\44\5\46\1\44"+
    "\7\46\4\44\1\46\1\44\1\46\1\44\1\46\3\0"+
    "\1\46\1\0\1\44\4\0\1\46\4\0\11\5\1\101"+
    "\24\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\1\44\4\46\1\44\5\46\1\44\6\46\1\102"+
    "\4\44\1\46\1\44\1\46\1\44\1\46\3\0\1\46"+
    "\1\0\1\44\4\0\1\46\4\0\2\5\1\103\33\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\1\44\1\46\1\104\2\46\1\44\5\46\1\44\7\46"+
    "\4\44\1\46\1\44\1\46\1\44\1\46\3\0\1\46"+
    "\1\0\1\44\4\0\1\46\40\0\2\32\1\105\50\0"+
    "\2\106\1\105\50\0\2\107\15\0\2\5\1\110\33\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\36\111\1\0\1\111\1\112\2\111\3\0\1\111\4\0"+
    "\1\44\4\46\1\44\5\46\1\44\7\46\4\44\1\46"+
    "\1\44\1\46\1\44\1\46\3\0\1\46\1\0\1\44"+
    "\4\0\1\46\46\0\1\113\32\0\1\41\30\0\2\46"+
    "\1\114\33\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\36\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\22\46\1\116\13\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\4\5\1\117"+
    "\31\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\36\120\1\0\1\120\1\0\1\120\4\0\2\120"+
    "\3\0\22\5\1\121\13\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\17\5\1\122\16\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\14\5"+
    "\1\123\21\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\14\5\1\124\21\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\7\46\1\125\1\46"+
    "\1\126\24\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\16\46\1\127\17\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\2\5\1\130\33\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\11\5\1\131\24\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\3\5\1\132\13\5\1\133\16\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\3\5\1\134\13\5\1\135\1\136\15\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\14\46\1\137"+
    "\21\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\4\46\1\140\31\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\7\5\1\141\26\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\12\5"+
    "\1\142\23\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\22\5\1\143\13\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\6\5\1\144\27\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\1\5\1\145\34\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\22\46\1\146\13\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\17\46\1\147"+
    "\16\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\14\46\1\150\21\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\14\46\1\151\21\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\4\46"+
    "\1\152\31\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\3\46\1\153\13\46\1\154\16\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\4\5"+
    "\1\155\31\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\17\46\1\156\16\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\17\5\1\157\16\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\17\46\1\160\16\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\36\0\1\161\1\107\15\0\1\5\1\162"+
    "\34\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\44\0\1\163\10\0\3\46\1\164\32\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\36\165\1\0"+
    "\1\165\1\0\1\165\4\0\2\165\3\0\3\46\1\166"+
    "\32\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\6\5\1\167\27\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\7\5\1\170\26\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\6\5"+
    "\1\171\27\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\4\5\1\172\2\5\1\173\26\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\11\5"+
    "\1\174\24\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\10\46\1\175\3\46\1\176\21\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\20\46"+
    "\1\177\1\46\1\200\13\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\1\46\1\201\34\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\1\5"+
    "\1\202\34\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\22\5\1\203\13\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\14\5\1\204\21\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\1\5\1\205\4\5\1\206\27\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\12\5\1\207\1\5"+
    "\1\210\21\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\6\5\1\211\27\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\7\5\1\212\26\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\7\46\1\213\26\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\22\46\1\214\13\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\1\5\1\215"+
    "\34\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\4\5\1\216\31\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\3\5\1\217\32\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\12\5"+
    "\1\220\23\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\7\5\1\202\26\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\7\46\1\221\26\46"+
    "\1\0\1\46\1\0\1\46\4\0\2\46\1\115\2\0"+
    "\6\46\1\222\27\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\7\46\1\223\26\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\11\46\1\224"+
    "\24\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\6\46\1\225\27\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\12\46\1\226\1\46\1\227"+
    "\21\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\6\46\1\230\27\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\22\5\1\231\13\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\1\46"+
    "\1\232\4\46\1\233\27\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\4\5\1\234\31\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\4\46"+
    "\1\235\31\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\3\5\1\236\32\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\44\0\1\237\10\0\4\46"+
    "\1\240\31\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\14\46\1\241\21\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\11\5\1\242\24\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\6\5\1\145\27\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\22\5\1\243\13\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\4\5\1\244"+
    "\31\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\11\46\1\245\24\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\4\46\1\246\31\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\2\46"+
    "\1\247\33\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\17\46\1\250\16\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\11\46\1\251\24\46"+
    "\1\0\1\46\1\0\1\46\4\0\2\46\1\115\2\0"+
    "\17\5\1\252\16\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\2\5\1\253\33\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\15\5\1\254"+
    "\20\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\4\5\1\255\31\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\4\5\1\256\31\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\6\5"+
    "\1\257\27\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\4\5\1\260\31\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\1\5\1\261\34\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\12\46\1\262\23\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\14\46\1\263\21\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\4\5\1\264"+
    "\31\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\22\5\1\265\13\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\14\5\1\266\21\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\2\5"+
    "\1\267\33\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\11\46\1\270\24\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\22\46\1\271\13\46"+
    "\1\0\1\46\1\0\1\46\4\0\2\46\1\115\2\0"+
    "\4\46\1\272\31\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\4\46\1\273\31\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\6\46\1\274"+
    "\27\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\4\46\1\275\31\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\14\5\1\276\21\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\15\46"+
    "\1\277\20\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\4\46\1\300\31\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\6\5\1\301\27\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\6\46\1\302\27\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\7\5\1\303\26\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\6\46\1\304"+
    "\27\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\16\5\1\305\17\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\17\5\1\306\16\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\22\5"+
    "\1\307\13\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\4\46\1\310\31\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\21\46\1\311\14\46"+
    "\1\0\1\46\1\0\1\46\4\0\2\46\1\115\2\0"+
    "\12\46\1\312\23\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\11\46\1\313\24\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\17\46\1\312"+
    "\16\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\11\5\1\314\24\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\22\5\1\315\13\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\11\5"+
    "\1\316\24\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\27\5\1\317\6\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\15\5\1\320\20\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\27\5\1\321\6\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\20\5\1\322\15\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\7\46\1\323"+
    "\26\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\6\46\1\324\27\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\2\5\1\325\33\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\2\5"+
    "\1\202\33\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\6\5\1\326\27\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\12\5\1\327\23\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\16\46\1\330\17\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\17\46\1\331\16\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\22\46\1\332"+
    "\13\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\15\46\1\333\20\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\27\46\1\334\6\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\6\5"+
    "\1\335\27\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\11\46\1\336\24\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\27\46\1\337\6\46"+
    "\1\0\1\46\1\0\1\46\4\0\2\46\1\115\2\0"+
    "\15\46\1\340\20\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\11\5\1\341\24\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\4\5\1\342"+
    "\31\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\12\5\1\343\23\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\12\46\1\344\23\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\11\46"+
    "\1\247\24\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\2\46\1\345\4\46\1\345\26\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\10\46"+
    "\1\346\25\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\10\5\1\347\25\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\17\5\1\350\16\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\6\5\1\351\27\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\4\5\1\352\31\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\17\5\1\353"+
    "\16\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\4\5\1\354\31\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\4\5\1\355\31\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\3\46"+
    "\1\356\32\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\2\46\1\357\33\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\22\5\1\145\13\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\15\5\1\360\20\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\4\5\1\361\31\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\11\46\1\362"+
    "\24\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\4\46\1\363\31\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\12\46\1\364\23\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\17\46"+
    "\1\365\16\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\4\46\1\366\31\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\2\5\1\367\33\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\6\46\1\370\27\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\4\46\1\371\31\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\17\46\1\372"+
    "\16\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\6\5\1\373\27\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\3\5\1\374\32\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\4\5"+
    "\1\375\31\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\2\46\1\376\33\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\3\46\1\377\32\46"+
    "\1\0\1\46\1\0\1\46\4\0\2\46\1\115\2\0"+
    "\2\46\1\u0100\33\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\2\5\1\u0101\33\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\11\5\1\u0102"+
    "\24\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\22\5\1\u0103\13\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\14\5\1\u0104\21\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\22\5"+
    "\1\u0105\13\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\6\5\1\u0106\27\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\3\46\1\u0107\32\46"+
    "\1\0\1\46\1\0\1\46\4\0\2\46\1\115\2\0"+
    "\17\5\1\u0108\16\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\6\5\1\236\27\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\6\46\1\u0109"+
    "\27\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\3\46\1\u010a\32\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\4\46\1\u010b\31\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\14\46"+
    "\1\u010c\21\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\22\46\1\u010d\13\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\3\5\1\u010e\32\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\22\46\1\u010f\13\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\14\46\1\u0110\21\46\1\0\1\46"+
    "\1\0\1\46\4\0\2\46\1\115\2\0\12\46\1\u0111"+
    "\23\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\1\46\1\u0112\34\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\1\5\1\u0113\34\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\1\51\2\0\2\5"+
    "\1\u0114\33\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\1\51\2\0\14\5\1\u0115\21\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\1\51\2\0\7\5\1\u0116\26\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\14\5\1\u0117\21\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\14\5\1\u0118\21\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\7\46\1\u0119"+
    "\26\46\1\0\1\46\1\0\1\46\4\0\2\46\1\115"+
    "\2\0\14\46\1\u011a\21\46\1\0\1\46\1\0\1\46"+
    "\4\0\2\46\1\115\2\0\14\46\1\u011b\21\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\7\46"+
    "\1\u011c\26\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\4\46\1\u011d\31\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\6\5\1\u011e\27\5"+
    "\1\0\1\5\1\0\1\5\4\0\2\5\1\51\2\0"+
    "\2\5\1\u011f\33\5\1\0\1\5\1\0\1\5\4\0"+
    "\2\5\1\51\2\0\6\5\1\u0120\27\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\2\5\1\u0121"+
    "\33\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\7\5\1\u0122\26\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\6\46\1\u0123\27\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\2\46"+
    "\1\u0124\33\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\2\0\2\46\1\u0125\33\46\1\0\1\46\1\0"+
    "\1\46\4\0\2\46\1\115\2\0\6\46\1\u0126\27\46"+
    "\1\0\1\46\1\0\1\46\4\0\2\46\1\115\2\0"+
    "\3\46\1\u0127\32\46\1\0\1\46\1\0\1\46\4\0"+
    "\2\46\1\115\2\0\6\5\1\u0128\27\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\1\51\2\0\6\5\1\u0129"+
    "\27\5\1\0\1\5\1\0\1\5\4\0\2\5\1\51"+
    "\2\0\6\5\1\u012a\27\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\1\51\2\0\6\46\1\u012b\27\46\1\0"+
    "\1\46\1\0\1\46\4\0\2\46\1\115\2\0\6\46"+
    "\1\u012c\27\46\1\0\1\46\1\0\1\46\4\0\2\46"+
    "\1\115\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10879];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\36\1\1\11\1\1\1\11\1\0\40\1"+
    "\3\0\1\1\1\0\1\11\1\0\1\1\1\0\45\1"+
    "\1\0\53\1\1\11\215\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<token> tokens;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
      this.tokens = new ArrayList<>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 33: break;
          case 2: 
            { tokens.add(new token("VARIABLE", yytext()));
            //return new Symbol(sym.VARIABLE, new token("VARIABLE", yytext()));
            } 
            // fall through
          case 34: break;
          case 3: 
            { tokens.add(new token("DECIMALES", yytext()));
            //return new Symbol(sym.DECIMALES, new token("DECIMALES", yytext()));
            } 
            // fall through
          case 35: break;
          case 4: 
            { //tokens.add(new token("ERROR", yytext()));
            //return new Symbol(sym.ERROR, new token("ERROR", yytext()));
            } 
            // fall through
          case 36: break;
          case 5: 
            { tokens.add(new token("FI", yytext()));
            //return new Symbol(sym.FI, new token("FI", yytext()));
            } 
            // fall through
          case 37: break;
          case 6: 
            { tokens.add(new token("EXCEPCION_VARIABLE", yytext()));
            //return new Symbol(sym.EXCEPTION_VARIABLE, new token("EXCEPCION_VARIABLE", yytext()));
            } 
            // fall through
          case 38: break;
          case 7: 
            { tokens.add(new token("IF", yytext()));
            //return new Symbol(sym.IF, new token("IF", yytext()));
            } 
            // fall through
          case 39: break;
          case 8: 
            { tokens.add(new token("CADENA", yytext()));
            //return new Symbol(sym.CADENA, new token("CADENA", yytext()));
            } 
            // fall through
          case 40: break;
          case 9: 
            { tokens.add(new token("REALES", yytext()));
            //return new Symbol(sym.REALES, new token("REALES", yytext()));
            } 
            // fall through
          case 41: break;
          case 10: 
            { tokens.add(new token("LEER", yytext()));
            //return new Symbol(sym.LEER, new token("LEER", yytext()));
            } 
            // fall through
          case 42: break;
          case 11: 
            { tokens.add(new token("SINO", yytext()));
            //return new Symbol(sym.SINO, new token("SINO", yytext()));
            } 
            // fall through
          case 43: break;
          case 12: 
            { tokens.add(new token("TIPOS_DATOS_FUNCIONES", yytext()));
            //return new Symbol(sym.TIPOS_DATOS_FUNCIONES, new token("TIPOS_DATOS_FUNCIONES", yytext()));
            } 
            // fall through
          case 44: break;
          case 13: 
            { tokens.add(new token("TABULACION", yytext()));
            //return new Symbol(sym.TABULACION, new token("TABULACION", yytext()));
            } 
            // fall through
          case 45: break;
          case 14: 
            { tokens.add(new token("CLASE", yytext()));
            //return new Symbol(sym.CLASE, new token("CLASE", yytext()));
            } 
            // fall through
          case 46: break;
          case 15: 
            { tokens.add(new token("DESDE", yytext()));
            //return new Symbol(sym.DESDE, new token("DESDE", yytext()));
            } 
            // fall through
          case 47: break;
          case 16: 
            { tokens.add(new token("HACER", yytext()));
            //return new Symbol(sym.HACER, new token("HACER", yytext()));
            } 
            // fall through
          case 48: break;
          case 17: 
            { tokens.add(new token("BOOLEANO", yytext()));
            //return new Symbol(sym.BOOLEANO, new token("BOOLEANO", yytext()));
            } 
            // fall through
          case 49: break;
          case 18: 
            { tokens.add(new token("INCLUIR", yytext()));
            //return new Symbol(sym.INCLUIR, new token("INCLUIR", yytext()));
            } 
            // fall through
          case 50: break;
          case 19: 
            { tokens.add(new token("METODOS", yytext()));
            //return new Symbol(sym.METODOS, new token("METODOS", yytext()));
            } 
            // fall through
          case 51: break;
          case 20: 
            { tokens.add(new token("ESCRIBIR", yytext()));
            //return new Symbol(sym.ESCRIBIR, new token("ESCRIBIR", yytext()));
            } 
            // fall through
          case 52: break;
          case 21: 
            { tokens.add(new token("ENTONCES", yytext()));
            //return new Symbol(sym.ENTONCES, new token("ENTONCES", yytext()));
            } 
            // fall through
          case 53: break;
          case 22: 
            { tokens.add(new token("EXTIENDE", yytext()));
            //return new Symbol(sym.EXTIENDE, new token("EXTIENDE", yytext()));
            } 
            // fall through
          case 54: break;
          case 23: 
            { tokens.add(new token("PROPIEDADES_METODOS", yytext()));
            //return new Symbol(sym.PROPIEDADES_METODOS, new token("PROPIEDADES_METODOS", yytext()));
            } 
            // fall through
          case 55: break;
          case 24: 
            { tokens.add(new token("DEVOLVER", yytext()));
            //return new Symbol(sym.DEVOLVER, new token("DEVOLVER", yytext()));
            } 
            // fall through
          case 56: break;
          case 25: 
            { tokens.add(new token("MIENTRAS", yytext()));
            //return new Symbol(sym.MIENTRAS, new token("MIENTRAS", yytext()));
            } 
            // fall through
          case 57: break;
          case 26: 
            { tokens.add(new token("PRINCIPAL", yytext()));
            //return new Symbol(sym.PRINCIPAL, new token("PRINCIPAL", yytext()));
            } 
            // fall through
          case 58: break;
          case 27: 
            { tokens.add(new token("INSTANCIAR", yytext()));
            //return new Symbol(sym.INSTANCIAR, new token("INSTANCIAR", yytext()));
            } 
            // fall through
          case 59: break;
          case 28: 
            { tokens.add(new token("DESTRUCTOR", yytext()));
            //return new Symbol(sym.DESTRUCTOR, new token("DESTRUCTOR", yytext()));
            } 
            // fall through
          case 60: break;
          case 29: 
            { tokens.add(new token("CONSTRUCTOR", yytext()));
            //return new Symbol(sym.CONSTRUCTOR, new token("CONSTRUCTOR", yytext()));
            } 
            // fall through
          case 61: break;
          case 30: 
            { tokens.add(new token("PROPIEDADES", yytext()));
            //return new Symbol(sym.PROPIEDADES, new token("PROPIEDADES", yytext()));
            } 
            // fall through
          case 62: break;
          case 31: 
            { tokens.add(new token("INCREMENTAR", yytext()));
            //return new Symbol(sym.INCREMENTAR, new token("INCREMENTAR", yytext()));
            } 
            // fall through
          case 63: break;
          case 32: 
            { tokens.add(new token("DECREMENTAR", yytext()));
            //return new Symbol(sym.DECREMENTAR, new token("DECREMENTAR", yytext()));
            } 
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
