/* The following code was generated by JFlex 1.7.0 */

package compiladorloop;

import java_cup.runtime.*;
import createdClasses.token;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/libraries/loop.jflex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\100\1\102\1\102\1\101\22\0\1\43\1\70\1\41\2\0"+
    "\1\57\2\0\1\50\1\51\1\55\1\53\1\52\1\54\1\37\1\56"+
    "\1\36\11\35\1\71\1\47\1\67\1\61\1\66\2\0\1\62\1\76"+
    "\1\1\1\27\1\25\2\42\1\33\1\31\2\42\1\26\1\14\1\63"+
    "\1\64\1\6\1\42\1\65\1\24\7\42\1\72\1\0\1\73\1\0"+
    "\1\46\1\0\1\3\1\17\1\20\1\13\1\5\1\40\1\22\1\32"+
    "\1\12\2\44\1\2\1\30\1\23\1\10\1\11\1\44\1\7\1\4"+
    "\1\15\1\16\1\21\1\44\1\34\1\44\1\77\1\74\1\45\1\75"+
    "\7\0\1\102\u0240\0\1\60\u1d61\0\1\102\1\102\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\1\2\4\3\1\2\5\3"+
    "\4\2\1\3\1\2\1\3\1\2\2\4\1\5\1\3"+
    "\1\1\1\2\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\2\1\22"+
    "\1\23\1\1\1\24\1\25\1\26\1\27\1\30\2\31"+
    "\2\2\1\0\2\3\1\1\1\3\1\32\4\3\2\2"+
    "\5\3\2\2\6\3\1\32\6\2\1\3\1\2\1\3"+
    "\1\2\3\0\1\3\1\0\1\33\1\0\1\34\1\35"+
    "\1\36\1\2\1\37\1\40\1\6\3\2\11\3\3\2"+
    "\10\3\2\2\7\3\10\2\1\3\1\2\1\3\1\2"+
    "\1\41\1\3\1\0\1\42\2\2\1\43\1\3\1\44"+
    "\1\45\5\3\5\2\1\46\1\47\10\3\2\2\6\3"+
    "\1\50\1\45\4\2\1\43\3\2\1\3\2\2\1\3"+
    "\1\2\1\3\1\51\1\52\1\2\6\3\5\2\4\3"+
    "\1\53\3\3\2\2\6\3\4\2\1\53\2\2\1\3"+
    "\2\2\2\54\1\55\1\2\3\3\1\56\2\3\4\2"+
    "\7\3\2\2\2\3\1\57\1\60\2\3\6\2\1\3"+
    "\3\2\5\3\3\2\2\3\1\61\4\3\1\62\1\2"+
    "\5\3\6\2\1\3\1\61\2\2\1\3\1\63\1\64"+
    "\1\65\1\66\1\2\1\67\1\2\5\3\1\70\1\71"+
    "\1\72\1\73\4\3\1\63\1\64\1\65\1\66\2\2"+
    "\1\71\2\2\1\74\1\2\2\75\10\3\5\2\1\76"+
    "\1\3\1\77\5\3\1\77\2\2\1\100\1\101\1\102"+
    "\1\103\1\3\1\104\1\3\1\100\1\103\1\102\2\3"+
    "\1\105\1\3\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\103\0\103\0\103\0\103\0\u08a3\0\u08e6\0\103"+
    "\0\103\0\103\0\103\0\u0929\0\u096c\0\u09af\0\103\0\103"+
    "\0\u09f2\0\103\0\103\0\103\0\103\0\103\0\103\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d"+
    "\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u0754\0\u0711"+
    "\0\u146a\0\u14ad\0\u07da\0\103\0\u14f0\0\103\0\103\0\103"+
    "\0\u1533\0\u081d\0\103\0\103\0\u1576\0\u15b9\0\u0afe\0\u15fc"+
    "\0\u163f\0\u0bc7\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031"+
    "\0\u146a\0\u2074\0\u20b7\0\u081d\0\u20fa\0\u213d\0\u010c\0\u2180"+
    "\0\u010c\0\u010c\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u010c\0\u010c\0\u2461\0\u24a4"+
    "\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u010c\0\u081d"+
    "\0\u2891\0\u28d4\0\u2917\0\u295a\0\u081d\0\u299d\0\u29e0\0\u2a23"+
    "\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\103\0\u081d"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd"+
    "\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5"+
    "\0\u010c\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba"+
    "\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2"+
    "\0\u081d\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u010c\0\u081d"+
    "\0\u010c\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u010c\0\u3670\0\u36b3"+
    "\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb"+
    "\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3"+
    "\0\u010c\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8"+
    "\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0"+
    "\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u010c"+
    "\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u081d\0\u41f4\0\u4237\0\u427a"+
    "\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492"+
    "\0\u44d5\0\u4518\0\u081d\0\u455b\0\u459e\0\u45e1\0\u010c\0\u010c"+
    "\0\u010c\0\u010c\0\u4624\0\u081d\0\u4667\0\u46aa\0\u46ed\0\u4730"+
    "\0\u4773\0\u47b6\0\u010c\0\u081d\0\u010c\0\u010c\0\u47f9\0\u483c"+
    "\0\u487f\0\u48c2\0\u081d\0\u081d\0\u081d\0\u081d\0\u4905\0\u4948"+
    "\0\u010c\0\u498b\0\u49ce\0\u010c\0\u4a11\0\u081d\0\u010c\0\u4a54"+
    "\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c"+
    "\0\u4caf\0\u4cf2\0\u4d35\0\u4d78\0\u010c\0\u4dbb\0\u010c\0\u4dfe"+
    "\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a\0\u081d\0\u4f4d\0\u4f90\0\u081d"+
    "\0\u081d\0\u010c\0\u010c\0\u4fd3\0\u010c\0\u5016\0\u010c\0\u081d"+
    "\0\u081d\0\u5059\0\u509c\0\u010c\0\u50df\0\u010c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\13\1\14\1\15\1\16\1\5\1\17"+
    "\1\20\1\21\1\5\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\5\2\2\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\40\1\56\1\40\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\40\1\5\1\67"+
    "\1\70\105\0\1\40\1\71\5\40\1\72\26\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\4\5\1\74\2\5\1\75\26\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\36\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\4\5\1\77\4\5\1\100\24\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\1\5\1\101\1\5\1\102\16\5\1\103"+
    "\10\5\1\104\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\6\40"+
    "\1\105\6\40\1\106\20\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\2\5\1\107\1\5\1\110\31\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\6\5\1\111\27\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\22\5\1\112\13\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\4\5"+
    "\1\113\31\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\4\40\1\114"+
    "\4\40\1\115\24\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\2\5"+
    "\1\116\33\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\7\5\1\117"+
    "\26\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\2\5\1\120\4\5"+
    "\1\121\26\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\4\5\1\122"+
    "\31\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\15\5\1\123\20\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\11\40\1\124\24\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\1\40\1\125\1\40\1\126\16\40"+
    "\1\127\10\40\1\130\2\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\4\40\1\131\31\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\4\40"+
    "\1\132\31\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\11\5\1\133"+
    "\24\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\22\40\1\134\13\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\2\5\1\135\33\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\2\40\1\136\33\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\40\0\2\33\1\137\100\0\2\140\1\137\100\0"+
    "\2\141\45\0\2\5\1\142\33\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\36\143\1\0\1\143\1\144\3\143\15\0\4\143"+
    "\10\0\2\143\4\0\36\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\46\0"+
    "\1\145\112\0\1\146\103\0\1\147\107\0\1\150\22\0"+
    "\36\40\1\0\1\40\1\0\1\40\1\0\2\40\1\73"+
    "\13\0\1\40\1\151\2\40\10\0\2\40\4\0\36\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\3\40\1\152\10\0\2\40\64\0\1\153\44\0\1\67"+
    "\54\0\1\154\3\0\2\40\1\155\33\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\22\40\1\156\13\40\1\0\1\40\1\0"+
    "\1\40\1\0\2\40\1\73\13\0\4\40\10\0\2\40"+
    "\4\0\36\157\1\0\1\157\1\0\1\157\1\0\2\157"+
    "\14\0\4\157\10\0\2\157\4\0\4\5\1\160\31\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\21\5\1\161\14\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\36\162\1\0\1\162\1\0\1\162"+
    "\1\0\2\162\14\0\4\162\10\0\2\162\4\0\22\5"+
    "\1\163\13\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\22\5\1\164"+
    "\13\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\11\5\1\165\24\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\17\5\1\166\16\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\14\5\1\167\21\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\14\5\1\170\21\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\7\40\1\171\1\40\1\172\24\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\16\40\1\173\17\40\1\0\1\40\1\0"+
    "\1\40\1\0\2\40\1\73\13\0\4\40\10\0\2\40"+
    "\4\0\11\5\1\174\24\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\2\5\1\175\33\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\11\5"+
    "\1\176\24\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\3\5\1\177"+
    "\13\5\1\200\16\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\3\5"+
    "\1\201\13\5\1\202\1\203\15\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\14\40\1\204\21\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\4\40\1\205\31\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\22\5"+
    "\1\206\13\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\7\5\1\207"+
    "\26\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\12\5\1\210\23\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\3\5\1\211\16\5\1\212"+
    "\13\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\6\5\1\213\27\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\1\5\1\214\34\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\22\40\1\215\13\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\11\40\1\216\24\40\1\0\1\40\1\0"+
    "\1\40\1\0\2\40\1\73\13\0\4\40\10\0\2\40"+
    "\4\0\17\40\1\217\16\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\14\40\1\220\21\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\14\40"+
    "\1\221\21\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\4\40\1\222"+
    "\31\40\1\0\1\40\1\0\1\40\1\0\2\40\1\73"+
    "\13\0\4\40\10\0\2\40\4\0\3\40\1\223\13\40"+
    "\1\224\16\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\4\5\1\225"+
    "\31\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\17\40\1\226\16\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\17\5\1\227\16\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\17\40\1\230\16\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\40\0\1\231\1\141\45\0\1\5\1\232\34\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\46\0\1\233\40\0\26\40\1\234"+
    "\7\40\1\0\1\40\1\0\1\40\1\0\2\40\1\73"+
    "\13\0\4\40\10\0\2\40\4\0\3\40\1\235\32\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\3\40\1\236\32\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\6\5\1\237\27\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\2\5\1\240\33\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\7\5\1\241\26\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\7\5\1\242\26\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\27\5"+
    "\1\243\6\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\6\5\1\244"+
    "\27\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\4\5\1\245\2\5"+
    "\1\246\26\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\11\5\1\247"+
    "\24\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\10\40\1\250\3\40"+
    "\1\251\21\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\20\40\1\252"+
    "\1\40\1\253\13\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\1\40"+
    "\1\254\34\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\36\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\1\5\1\255\4\0\1\5\1\256\34\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\22\5\1\257\13\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\14\5\1\260\21\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\1\5\1\261\4\5\1\262\27\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\12\5\1\263\1\5\1\264\21\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\6\5\1\265\27\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\7\5\1\266\26\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\7\40\1\267\26\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\22\40\1\270\13\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\21\5"+
    "\1\271\14\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\1\5\1\272"+
    "\34\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\4\5\1\273\31\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\4\5\1\274\31\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\3\5\1\275\32\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\12\5\1\276\23\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\7\5\1\277\26\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\7\40\1\300\26\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\27\40"+
    "\1\301\6\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\6\40\1\302"+
    "\27\40\1\0\1\40\1\0\1\40\1\0\2\40\1\73"+
    "\13\0\4\40\10\0\2\40\4\0\7\40\1\303\26\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\11\40\1\304\24\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\6\40\1\305\27\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\12\40\1\306\1\40\1\307\21\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\6\40\1\310\27\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\22\5\1\311\13\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\1\40\1\312\4\40\1\313\27\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\4\5\1\314\31\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\4\40\1\315\31\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\3\5\1\316\32\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\46\0\1\317"+
    "\40\0\4\40\1\320\31\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\14\40\1\321\21\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\6\5"+
    "\1\322\27\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\11\5\1\323"+
    "\24\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\11\5\1\324\24\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\6\5\1\325\27\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\22\5\1\326\13\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\4\5\1\327\31\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\11\40\1\330\24\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\4\40\1\331\31\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\2\40"+
    "\1\332\33\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\17\40\1\333"+
    "\16\40\1\0\1\40\1\0\1\40\1\0\2\40\1\73"+
    "\13\0\4\40\10\0\2\40\4\0\11\40\1\334\24\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\17\5\1\335\16\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\2\5\1\336\33\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\15\5\1\337\20\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\4\5\1\340\31\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\4\5\1\341\31\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\6\5"+
    "\1\342\27\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\4\5\1\343"+
    "\31\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\1\5\1\344\34\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\12\40\1\345\23\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\14\40\1\346\21\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\4\5\1\347\31\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\4\5\1\350\31\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\22\5\1\351\13\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\22\5"+
    "\1\352\13\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\14\5\1\353"+
    "\21\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\2\5\1\354\33\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\11\40\1\355\24\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\11\40\1\356\24\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\22\40\1\357\13\40\1\0\1\40\1\0"+
    "\1\40\1\0\2\40\1\73\13\0\4\40\10\0\2\40"+
    "\4\0\4\40\1\360\31\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\4\40\1\361\31\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\6\40"+
    "\1\362\27\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\4\40\1\363"+
    "\31\40\1\0\1\40\1\0\1\40\1\0\2\40\1\73"+
    "\13\0\4\40\10\0\2\40\4\0\14\5\1\364\21\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\15\40\1\365\20\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\4\40\1\366\31\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\6\5\1\367\27\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\6\40\1\370\27\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\7\5\1\371\26\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\6\40"+
    "\1\372\27\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\11\5\1\373"+
    "\24\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\22\5\1\374\13\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\16\5\1\375\17\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\7\5\1\376\26\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\17\5\1\377\16\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\22\5\1\u0100\13\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\4\40\1\u0101\31\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\21\40"+
    "\1\u0102\14\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\12\40\1\u0103"+
    "\23\40\1\0\1\40\1\0\1\40\1\0\2\40\1\73"+
    "\13\0\4\40\10\0\2\40\4\0\11\40\1\u0104\24\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\17\40\1\u0103\16\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\11\5\1\u0105\24\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\22\5\1\u0106\13\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\11\5\1\u0107\24\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\27\5\1\u0108\6\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\15\5"+
    "\1\u0109\20\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\27\5\1\u010a"+
    "\6\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\20\5\1\u010b\15\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\7\40\1\u010c\26\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\6\40\1\u010d\27\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\22\5\1\u010e\13\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\2\5\1\u010f\33\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\2\5\1\u0110\33\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\7\5"+
    "\1\u0111\26\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\6\5\1\u0112"+
    "\27\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\12\5\1\u0113\23\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\22\40\1\u0114\13\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\16\40\1\u0115\17\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\17\40\1\u0116\16\40\1\0\1\40\1\0"+
    "\1\40\1\0\2\40\1\73\13\0\4\40\10\0\2\40"+
    "\4\0\22\40\1\u0117\13\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\15\40\1\u0118\20\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\27\40"+
    "\1\u0119\6\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\6\5\1\u011a"+
    "\27\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\11\40\1\u011b\24\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\27\40\1\u011c\6\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\15\40\1\u011d\20\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\14\5\1\u011e\21\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\2\5\1\u011f\33\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\11\5\1\u0120\24\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\4\5"+
    "\1\u0121\31\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\12\5\1\u0122"+
    "\23\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\12\40\1\u0123\23\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\11\40\1\332\24\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\2\40\1\u0124\4\40\1\u0124\26\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\10\40\1\u0125\25\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\10\5\1\u0126\25\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\17\5\1\u0127\16\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\6\5\1\u0128\27\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\4\5\1\u0129\31\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\17\5"+
    "\1\u012a\16\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\4\5\1\u012b"+
    "\31\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\4\5\1\u012c\31\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\3\40\1\u012d\32\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\2\40\1\u012e\33\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\14\5\1\u012f\21\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\22\5\1\u0130\13\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\36\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\1\u0131\3\5\10\0\2\5\4\0\15\5\1\u0132"+
    "\20\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\4\5\1\u0133\31\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\2\40\1\u0134\33\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\11\40\1\u0135\24\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\4\40\1\u0136\31\40\1\0\1\40\1\0"+
    "\1\40\1\0\2\40\1\73\13\0\4\40\10\0\2\40"+
    "\4\0\12\40\1\u0137\23\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\17\40\1\u0138\16\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\4\40"+
    "\1\u0139\31\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\2\5\1\u013a"+
    "\33\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\6\40\1\u013b\27\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\4\40\1\u013c\31\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\17\40\1\u013d\16\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\27\5\1\u013e\6\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\6\5\1\u013f\27\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\6\5\1\u0140\27\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\3\5"+
    "\1\u0141\32\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\4\5\1\u0142"+
    "\31\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\2\40\1\u0143\33\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\3\40\1\u0144\32\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\2\40\1\u0145\33\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\2\5\1\u0146\33\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\11\5\1\u0147\24\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\22\5\1\u0148\13\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\14\5"+
    "\1\u0149\21\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\22\5\1\u014a"+
    "\13\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\6\5\1\u014b\27\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\3\40\1\u014c\32\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\4\5\1\u014d\31\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\7\5\1\u014e\26\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\24\5\1\u014f\11\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\3\5\1\u0150\10\0\1\u0151"+
    "\1\5\4\0\17\5\1\u0152\16\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\6\5\1\316\27\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\6\40\1\u0153\27\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\6\40"+
    "\1\u0154\27\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\3\40\1\u0155"+
    "\32\40\1\0\1\40\1\0\1\40\1\0\2\40\1\73"+
    "\13\0\4\40\10\0\2\40\4\0\4\40\1\u0156\31\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\14\40\1\u0157\21\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\22\40\1\u0158\13\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\3\5\1\u0159\32\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\22\40\1\u015a\13\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\14\40\1\u015b\21\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\7\5"+
    "\1\u015c\26\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\12\40\1\u015d"+
    "\23\40\1\0\1\40\1\0\1\40\1\0\2\40\1\73"+
    "\13\0\4\40\10\0\2\40\4\0\1\40\1\u015e\34\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\1\5\1\u015f\34\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\2\5\1\u0160\33\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\14\5\1\u0161\21\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\7\5\1\u0162\26\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\14\5\1\u0163\21\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\22\5"+
    "\1\u0164\13\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\4\5\1\u0165"+
    "\31\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\7\5\1\u0166\26\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\14\5\1\u0167\21\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\7\40\1\u0168\26\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\14\40\1\u0169\21\40\1\0\1\40\1\0"+
    "\1\40\1\0\2\40\1\73\13\0\4\40\10\0\2\40"+
    "\4\0\14\40\1\u016a\21\40\1\0\1\40\1\0\1\40"+
    "\1\0\2\40\1\73\13\0\4\40\10\0\2\40\4\0"+
    "\7\40\1\u016b\26\40\1\0\1\40\1\0\1\40\1\0"+
    "\2\40\1\73\13\0\4\40\10\0\2\40\4\0\4\40"+
    "\1\u016c\31\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\73\13\0\4\40\10\0\2\40\4\0\6\5\1\u016d"+
    "\27\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\2\5\1\u016e\33\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\6\5\1\u016f\27\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\2\5\1\u0170\33\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\76\13\0\4\5\10\0"+
    "\2\5\4\0\14\5\1\u0171\21\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\76\13\0\4\5\10\0\2\5"+
    "\4\0\2\5\1\u0172\33\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\1\5\1\u0173\34\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\7\5"+
    "\1\u0174\26\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\6\40\1\u0175"+
    "\27\40\1\0\1\40\1\0\1\40\1\0\2\40\1\73"+
    "\13\0\4\40\10\0\2\40\4\0\2\40\1\u0176\33\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\73\13\0"+
    "\4\40\10\0\2\40\4\0\2\40\1\u0177\33\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\73\13\0\4\40"+
    "\10\0\2\40\4\0\6\40\1\u0178\27\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\3\40\1\u0179\32\40\1\0\1\40\1\0"+
    "\1\40\1\0\2\40\1\73\13\0\4\40\10\0\2\40"+
    "\4\0\6\5\1\u017a\27\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\6\5\1\u017b\27\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\4\5"+
    "\1\u017c\31\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\1\5\1\u017d"+
    "\34\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\4\5\1\u017e\31\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\4\0\6\5\1\u017f\27\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\76\13\0\4\5"+
    "\10\0\2\5\4\0\6\40\1\u0180\27\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\73\13\0\4\40\10\0"+
    "\2\40\4\0\6\40\1\u0181\27\40\1\0\1\40\1\0"+
    "\1\40\1\0\2\40\1\73\13\0\4\40\10\0\2\40"+
    "\4\0\6\5\1\u0182\27\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\76\13\0\4\5\10\0\2\5\4\0"+
    "\2\5\1\u0183\33\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\76\13\0\4\5\10\0\2\5\4\0\7\5"+
    "\1\u0184\26\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\76\13\0\4\5\10\0\2\5\4\0\22\5\1\u0185"+
    "\13\5\1\0\1\5\1\0\1\5\1\0\2\5\1\76"+
    "\13\0\4\5\10\0\2\5\4\0\7\5\1\u0186\26\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\76\13\0"+
    "\4\5\10\0\2\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20770];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\4\11\2\1\4\11\3\1\2\11"+
    "\1\1\6\11\3\1\1\0\43\1\3\0\1\1\1\0"+
    "\1\11\1\0\3\11\2\1\2\11\56\1\1\0\63\1"+
    "\1\11\267\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<token> tokens;
    public int tabulaciones;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
      this.tokens = new ArrayList<>();
    this.tabulaciones = 0;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { tokens.add(new token("ERROR", yytext(), this.tabulaciones));
            return new Symbol(sym.ERROR, new token("ERROR", yytext(), this.tabulaciones));
            } 
            // fall through
          case 71: break;
          case 2: 
            { tokens.add(new token("VARIABLE_CLASE", yytext(), this.tabulaciones));
            return new Symbol(sym.VARIABLE_CLASE, new token("VARIABLE_CLASE", yytext(), this.tabulaciones));
            } 
            // fall through
          case 72: break;
          case 3: 
            { tokens.add(new token("VARIABLE", yytext(), this.tabulaciones));
            return new Symbol(sym.VARIABLE, new token("VARIABLE", yytext(), this.tabulaciones));
            } 
            // fall through
          case 73: break;
          case 4: 
            { tokens.add(new token("DECIMALES", yytext(), this.tabulaciones));
            return new Symbol(sym.DECIMALES, new token("DECIMALES", yytext(), this.tabulaciones));
            } 
            // fall through
          case 74: break;
          case 5: 
            { tokens.add(new token("PUNTO", yytext(), this.tabulaciones));
            return new Symbol(sym.PUNTO, new token("PUNTO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 75: break;
          case 6: 
            { //this.tabulaciones = 0;
            } 
            // fall through
          case 76: break;
          case 7: 
            { tokens.add(new token("PUNTO_Y_COMA", yytext(), this.tabulaciones));
            return new Symbol(sym.PUNTO_Y_COMA, new token("PUNTO_Y_COMA", yytext(), this.tabulaciones));
            } 
            // fall through
          case 77: break;
          case 8: 
            { tokens.add(new token("PARENTESIS1", yytext(), this.tabulaciones));
            return new Symbol(sym.PARENTESIS1, new token("PARENTESIS1", yytext(), this.tabulaciones));
            } 
            // fall through
          case 78: break;
          case 9: 
            { tokens.add(new token("PARENTESIS2", yytext(), this.tabulaciones));
            return new Symbol(sym.PARENTESIS2, new token("PARENTESIS2", yytext(), this.tabulaciones));
            } 
            // fall through
          case 79: break;
          case 10: 
            { tokens.add(new token("COMA", yytext(), this.tabulaciones));
            return new Symbol(sym.COMA, new token("COMA", yytext(), this.tabulaciones));
            } 
            // fall through
          case 80: break;
          case 11: 
            { tokens.add(new token("SUMA", yytext(), this.tabulaciones));
            return new Symbol(sym.SUMA, new token("SUMA", yytext(), this.tabulaciones));
            } 
            // fall through
          case 81: break;
          case 12: 
            { tokens.add(new token("RESTA", yytext(), this.tabulaciones));
            return new Symbol(sym.RESTA, new token("RESTA", yytext(), this.tabulaciones));
            } 
            // fall through
          case 82: break;
          case 13: 
            { tokens.add(new token("MULTIPLICACION", yytext(), this.tabulaciones));
            return new Symbol(sym.MULTIPLICACION, new token("MULTIPLICACION", yytext(), this.tabulaciones));
            } 
            // fall through
          case 83: break;
          case 14: 
            { tokens.add(new token("DIVISION", yytext(), this.tabulaciones));
            return new Symbol(sym.DIVISION, new token("DIVISION", yytext(), this.tabulaciones));
            } 
            // fall through
          case 84: break;
          case 15: 
            { tokens.add(new token("MODULO", yytext(), this.tabulaciones));
            return new Symbol(sym.MODULO, new token("MODULO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 85: break;
          case 16: 
            { tokens.add(new token("EXPONENCIACION", yytext(), this.tabulaciones));
            return new Symbol(sym.EXPONENCIACION, new token("EXPONENCIACION", yytext(), this.tabulaciones));
            } 
            // fall through
          case 86: break;
          case 17: 
            { tokens.add(new token("IGUAL", yytext(), this.tabulaciones));
            return new Symbol(sym.IGUAL, new token("IGUAL", yytext(), this.tabulaciones));
            } 
            // fall through
          case 87: break;
          case 18: 
            { tokens.add(new token("MAYOR_QUE", yytext(), this.tabulaciones));
            return new Symbol(sym.MAYOR_QUE, new token("MAYOR_QUE", yytext(), this.tabulaciones));
            } 
            // fall through
          case 88: break;
          case 19: 
            { tokens.add(new token("MENOR_QUE", yytext(), this.tabulaciones));
            return new Symbol(sym.MENOR_QUE, new token("MENOR_QUE", yytext(), this.tabulaciones));
            } 
            // fall through
          case 89: break;
          case 20: 
            { tokens.add(new token("DOS_PUNTOS", yytext(), this.tabulaciones));
            return new Symbol(sym.DOS_PUNTOS, new token("DOS_PUNTOS", yytext(), this.tabulaciones));
            } 
            // fall through
          case 90: break;
          case 21: 
            { tokens.add(new token("CORCHETE1", yytext(), this.tabulaciones));
            return new Symbol(sym.CORCHETE1, new token("CORCHETE1", yytext(), this.tabulaciones));
            } 
            // fall through
          case 91: break;
          case 22: 
            { tokens.add(new token("CORCHETE2", yytext(), this.tabulaciones));
            return new Symbol(sym.CORCHETE2, new token("CORCHETE2", yytext(), this.tabulaciones));
            } 
            // fall through
          case 92: break;
          case 23: 
            { tokens.add(new token("LLAVE1", yytext(), this.tabulaciones));
            return new Symbol(sym.LLAVE1, new token("LLAVE1", yytext(), this.tabulaciones));
            } 
            // fall through
          case 93: break;
          case 24: 
            { tokens.add(new token("LLAVE2", yytext(), this.tabulaciones));
            return new Symbol(sym.LLAVE2, new token("LLAVE2", yytext(), this.tabulaciones));
            } 
            // fall through
          case 94: break;
          case 25: 
            { this.tabulaciones = 0;
            } 
            // fall through
          case 95: break;
          case 26: 
            { tokens.add(new token("IF", yytext(), this.tabulaciones));
            return new Symbol(sym.IF, new token("IF", yytext(), this.tabulaciones));
            } 
            // fall through
          case 96: break;
          case 27: 
            { tokens.add(new token("CADENA", yytext(), this.tabulaciones));
            return new Symbol(sym.CADENA, new token("CADENA", yytext(), this.tabulaciones));
            } 
            // fall through
          case 97: break;
          case 28: 
            { tokens.add(new token("INCREMENTO", yytext(), this.tabulaciones));
            return new Symbol(sym.INCREMENTO, new token("INCREMENTO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 98: break;
          case 29: 
            { tokens.add(new token("DECREMENTO", yytext(), this.tabulaciones));
            return new Symbol(sym.DECREMENTO, new token("DECREMENTO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 99: break;
          case 30: 
            { tokens.add(new token("IGUAL_QUE", yytext(), this.tabulaciones));
            return new Symbol(sym.IGUAL_QUE, new token("IGUAL_QUE", yytext(), this.tabulaciones));
            } 
            // fall through
          case 100: break;
          case 31: 
            { tokens.add(new token("OR", yytext(), this.tabulaciones));
            return new Symbol(sym.OR, new token("OR", yytext(), this.tabulaciones));
            } 
            // fall through
          case 101: break;
          case 32: 
            { tokens.add(new token("DISTINTO_QUE", yytext(), this.tabulaciones));
            return new Symbol(sym.DISTINTO_QUE, new token("DISTINTO_QUE", yytext(), this.tabulaciones));
            } 
            // fall through
          case 102: break;
          case 33: 
            { tokens.add(new token("REALES", yytext(), this.tabulaciones));
            return new Symbol(sym.REALES, new token("REALES", yytext(), this.tabulaciones));
            } 
            // fall through
          case 103: break;
          case 34: 
            { tokens.add(new token("AND", yytext(), this.tabulaciones));
            return new Symbol(sym.AND, new token("AND", yytext(), this.tabulaciones));
            } 
            // fall through
          case 104: break;
          case 35: 
            { tokens.add(new token("LEER", yytext(), this.tabulaciones));
            return new Symbol(sym.LEER, new token("LEER", yytext(), this.tabulaciones));
            } 
            // fall through
          case 105: break;
          case 36: 
            { tokens.add(new token("SENO", yytext(), this.tabulaciones));
            return new Symbol(sym.SENO, new token("SENO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 106: break;
          case 37: 
            { tokens.add(new token("SINO", yytext(), this.tabulaciones));
            return new Symbol(sym.SINO, new token("SINO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 107: break;
          case 38: 
            { tokens.add(new token("RAIZ", yytext(), this.tabulaciones));
            return new Symbol(sym.RAIZ, new token("RAIZ", yytext(), this.tabulaciones));
            } 
            // fall through
          case 108: break;
          case 39: 
            { tokens.add(new token("TIPO_REAL", yytext(), this.tabulaciones));
            return new Symbol(sym.TIPO_REAL, new token("TIPO_REAL", yytext(), this.tabulaciones));
            } 
            // fall through
          case 109: break;
          case 40: 
            { tokens.add(new token("TIPO_NULO", yytext(), this.tabulaciones));
            return new Symbol(sym.TIPO_NULO, new token("TIPO_NULO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 110: break;
          case 41: 
            { this.tabulaciones++;
            //tokens.add(new token("TABULACION", yytext(), tabs));
            return new Symbol(sym.TABULACION, new token("TABULACION", yytext(), tabs));
            } 
            // fall through
          case 111: break;
          case 42: 
            { tokens.add(new token("CLASE", yytext(), this.tabulaciones));
            return new Symbol(sym.CLASE, new token("CLASE", yytext(), this.tabulaciones));
            } 
            // fall through
          case 112: break;
          case 43: 
            { tokens.add(new token("DESDE", yytext(), this.tabulaciones));
            return new Symbol(sym.DESDE, new token("DESDE", yytext(), this.tabulaciones));
            } 
            // fall through
          case 113: break;
          case 44: 
            { tokens.add(new token("HACER", yytext(), this.tabulaciones));
            return new Symbol(sym.HACER, new token("HACER", yytext(), this.tabulaciones));
            } 
            // fall through
          case 114: break;
          case 45: 
            { tokens.add(new token("BOOLEANO", yytext(), this.tabulaciones));
            return new Symbol(sym.BOOLEANO, new token("BOOLEANO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 115: break;
          case 46: 
            { tokens.add(new token("TIPO_ENTERO", yytext(), this.tabulaciones));
            return new Symbol(sym.TIPO_ENTERO, new token("TIPO_ENTERO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 116: break;
          case 47: 
            { tokens.add(new token("TIPO_CADENA", yytext(), this.tabulaciones));
            return new Symbol(sym.TIPO_CADENA, new token("TIPO_CADENA", yytext(), this.tabulaciones));
            } 
            // fall through
          case 117: break;
          case 48: 
            { tokens.add(new token("COSENO", yytext(), this.tabulaciones));
            return new Symbol(sym.COSENO, new token("COSENO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 118: break;
          case 49: 
            { tokens.add(new token("INCLUIR", yytext(), this.tabulaciones));
            return new Symbol(sym.INCLUIR, new token("INCLUIR", yytext(), this.tabulaciones));
            } 
            // fall through
          case 119: break;
          case 50: 
            { tokens.add(new token("METODOS", yytext(), this.tabulaciones));
            return new Symbol(sym.METODOS, new token("METODOS", yytext(), this.tabulaciones));
            } 
            // fall through
          case 120: break;
          case 51: 
            { tokens.add(new token("ELIMINAR", yytext(), this.tabulaciones));
            return new Symbol(sym.DECREMENTAR, new token("DECREMENTAR", yytext(), this.tabulaciones));
            } 
            // fall through
          case 121: break;
          case 52: 
            { tokens.add(new token("ESCRIBIR", yytext(), this.tabulaciones));
            return new Symbol(sym.ESCRIBIR, new token("ESCRIBIR", yytext(), this.tabulaciones));
            } 
            // fall through
          case 122: break;
          case 53: 
            { tokens.add(new token("ENTONCES", yytext(), this.tabulaciones));
            return new Symbol(sym.ENTONCES, new token("ENTONCES", yytext(), this.tabulaciones));
            } 
            // fall through
          case 123: break;
          case 54: 
            { tokens.add(new token("EXTIENDE", yytext(), this.tabulaciones));
            return new Symbol(sym.EXTIENDE, new token("EXTIENDE", yytext(), this.tabulaciones));
            } 
            // fall through
          case 124: break;
          case 55: 
            { tokens.add(new token("PROPIEDADES_METODOS", yytext(), this.tabulaciones));
            return new Symbol(sym.PROPIEDADES_METODOS, new token("PROPIEDADES_METODOS", yytext(), this.tabulaciones));
            } 
            // fall through
          case 125: break;
          case 56: 
            { tokens.add(new token("DEVOLVER", yytext(), this.tabulaciones));
            return new Symbol(sym.DEVOLVER, new token("DEVOLVER", yytext(), this.tabulaciones));
            } 
            // fall through
          case 126: break;
          case 57: 
            { tokens.add(new token("MIENTRAS", yytext(), this.tabulaciones));
            return new Symbol(sym.MIENTRAS, new token("MIENTRAS", yytext(), this.tabulaciones));
            } 
            // fall through
          case 127: break;
          case 58: 
            { tokens.add(new token("TANGENTE", yytext(), this.tabulaciones));
            return new Symbol(sym.TANGENTE, new token("TANGENTE", yytext(), this.tabulaciones));
            } 
            // fall through
          case 128: break;
          case 59: 
            { tokens.add(new token("TIPO_BOOLEANO", yytext(), this.tabulaciones));
            return new Symbol(sym.TIPO_BOOLEANO, new token("TIPO_BOOLEANO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 129: break;
          case 60: 
            { tokens.add(new token("LOGARITMO", yytext(), this.tabulaciones));
            return new Symbol(sym.LOGARITMO, new token("LOGARITMO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 130: break;
          case 61: 
            { tokens.add(new token("PRINCIPAL", yytext(), this.tabulaciones));
            return new Symbol(sym.PRINCIPAL, new token("PRINCIPAL", yytext(), this.tabulaciones));
            } 
            // fall through
          case 131: break;
          case 62: 
            { tokens.add(new token("INSTANCIAR", yytext(), this.tabulaciones));
            return new Symbol(sym.INSTANCIAR, new token("INSTANCIAR", yytext(), this.tabulaciones));
            } 
            // fall through
          case 132: break;
          case 63: 
            { tokens.add(new token("DESTRUCTOR", yytext(), this.tabulaciones));
            return new Symbol(sym.DESTRUCTOR, new token("DESTRUCTOR", yytext(), this.tabulaciones));
            } 
            // fall through
          case 133: break;
          case 64: 
            { tokens.add(new token("CONSTRUCTOR", yytext(), this.tabulaciones));
            return new Symbol(sym.CONSTRUCTOR, new token("CONSTRUCTOR", yytext(), this.tabulaciones));
            } 
            // fall through
          case 134: break;
          case 65: 
            { tokens.add(new token("PROPIEDADES", yytext(), this.tabulaciones));
            return new Symbol(sym.PROPIEDADES, new token("PROPIEDADES", yytext(), this.tabulaciones));
            } 
            // fall through
          case 135: break;
          case 66: 
            { tokens.add(new token("INCREMENTAR", yytext(), this.tabulaciones));
            return new Symbol(sym.INCREMENTAR, new token("INCREMENTAR", yytext(), this.tabulaciones));
            } 
            // fall through
          case 136: break;
          case 67: 
            { tokens.add(new token("DECREMENTAR", yytext(), this.tabulaciones));
            return new Symbol(sym.DECREMENTAR, new token("DECREMENTAR", yytext(), this.tabulaciones));
            } 
            // fall through
          case 137: break;
          case 68: 
            { tokens.add(new token("CADENA_A_REAL", yytext(), this.tabulaciones));
            return new Symbol(sym.CADENA_A_REAL, new token("CADENA_A_REAL", yytext(), this.tabulaciones));
            } 
            // fall through
          case 138: break;
          case 69: 
            { tokens.add(new token("CADENA_A_ENTERO", yytext(), this.tabulaciones));
            return new Symbol(sym.CADENA_A_ENTERO, new token("CADENA_A_ENTERO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 139: break;
          case 70: 
            { tokens.add(new token("CADENA_A_BOOLEANO", yytext(), this.tabulaciones));
            return new Symbol(sym.CADENA_A_BOOLEANO, new token("CADENA_A_BOOLEANO", yytext(), this.tabulaciones));
            } 
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
