/* The following code was generated by JFlex 1.7.0 */

package compiladorloop;

import java_cup.runtime.*;
import createdClasses.token;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/libraries/loop.jflex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\44\1\54\1\54\1\45\22\0\1\43\1\0\1\41"+
    "\13\0\1\37\1\0\1\36\11\35\1\47\1\46\5\0\2\42\1\1"+
    "\1\27\1\25\2\42\1\33\1\31\2\42\1\26\1\14\2\42\1\6"+
    "\2\42\1\24\7\42\4\0\1\53\1\0\1\3\1\17\1\20\1\13"+
    "\1\5\1\40\1\22\1\32\1\12\1\51\1\50\1\2\1\30\1\23"+
    "\1\10\1\11\1\51\1\7\1\4\1\15\1\16\1\21\1\51\1\34"+
    "\2\51\1\0\1\52\10\0\1\54\u1fa2\0\1\54\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\2\2\2\3\1\1\5\3\1\1\1\2"+
    "\2\3\1\2\4\1\1\3\1\1\1\3\1\1\1\4"+
    "\2\1\1\3\2\1\2\5\1\6\1\2\1\0\3\7"+
    "\1\3\1\7\1\10\3\3\2\7\4\3\2\7\5\3"+
    "\1\10\5\7\1\3\1\7\1\3\1\7\3\0\1\3"+
    "\1\0\1\11\1\7\1\0\1\7\6\3\3\7\7\3"+
    "\2\7\5\3\7\7\1\3\1\7\1\3\1\7\1\12"+
    "\1\3\3\7\1\13\1\14\4\3\5\7\1\15\10\3"+
    "\2\7\4\3\1\14\3\7\1\13\3\7\1\3\2\7"+
    "\1\3\1\7\1\3\1\16\1\7\3\3\5\7\4\3"+
    "\1\17\3\3\2\7\4\3\3\7\1\17\2\7\1\3"+
    "\2\7\2\20\1\21\1\7\3\3\4\7\7\3\2\7"+
    "\3\3\5\7\1\3\3\7\3\3\3\7\2\3\1\22"+
    "\4\3\1\23\1\7\2\3\5\7\1\3\1\22\2\7"+
    "\1\24\1\25\1\26\1\7\1\27\1\7\5\3\1\30"+
    "\1\31\1\3\1\24\1\25\1\26\2\7\1\31\3\7"+
    "\2\32\5\3\5\7\1\33\1\3\1\34\2\3\1\34"+
    "\2\7\1\35\1\36\1\37\1\40\1\35\1\40\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\264\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546"+
    "\0\55\0\u0573\0\55\0\55\0\u0546\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u04bf\0\u0492\0\u0b40"+
    "\0\u0b6d\0\u0519\0\55\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0654"+
    "\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89"+
    "\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u0b40\0\u11ee\0\u121b\0\u0bc7\0\u1248\0\264\0\264\0\u1275"+
    "\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd"+
    "\0\264\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518"+
    "\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u05cd"+
    "\0\u1680\0\u16ad\0\u16da\0\u05cd\0\u1707\0\u1734\0\u1761\0\u178e"+
    "\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u05cd\0\u189c\0\u18c9"+
    "\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\264\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c"+
    "\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4"+
    "\0\u05cd\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\264\0\u05cd"+
    "\0\264\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0"+
    "\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058"+
    "\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0"+
    "\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328"+
    "\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\264\0\u2463"+
    "\0\u2490\0\u24bd\0\u24ea\0\u05cd\0\u2517\0\u2544\0\u2571\0\u259e"+
    "\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f\0\u05cd\0\u26ac\0\u26d9"+
    "\0\264\0\264\0\264\0\u2706\0\u05cd\0\u2733\0\u2760\0\u278d"+
    "\0\u27ba\0\u27e7\0\u2814\0\264\0\u05cd\0\u2841\0\u05cd\0\u05cd"+
    "\0\u05cd\0\u286e\0\u289b\0\264\0\u28c8\0\u28f5\0\u2922\0\u05cd"+
    "\0\264\0\u294f\0\u297c\0\u29a9\0\u29d6\0\u2a03\0\u2a30\0\u2a5d"+
    "\0\u2a8a\0\u2ab7\0\u2ae4\0\264\0\u2b11\0\264\0\u2b3e\0\u2b6b"+
    "\0\u05cd\0\u2b98\0\u2bc5\0\u05cd\0\u05cd\0\264\0\264\0\264"+
    "\0\u05cd\0\u05cd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\2\12\1\17\1\20"+
    "\1\21\1\12\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\12\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\2\1\41\1\42\1\43\1\44\1\5"+
    "\1\12\2\2\57\0\1\45\1\46\3\47\1\45\1\47"+
    "\1\50\3\47\1\45\7\47\4\45\1\47\1\45\1\47"+
    "\1\45\1\47\3\0\1\47\1\0\1\45\5\0\2\47"+
    "\4\0\4\12\1\51\31\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\36\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\11\12\1\53\24\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\3\12\1\54\16\12\1\55\10\12\1\56\2\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\1\45"+
    "\4\47\1\45\1\57\4\47\1\45\1\47\1\60\5\47"+
    "\4\45\1\47\1\45\1\47\1\45\1\47\3\0\1\47"+
    "\1\0\1\45\5\0\2\47\4\0\4\12\1\61\31\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\6\12\1\62\27\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\22\12\1\63\13\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\4\12\1\64"+
    "\31\12\1\0\1\12\1\0\1\12\5\0\3\12\1\52"+
    "\2\0\1\45\3\47\1\65\1\45\3\47\1\66\1\47"+
    "\1\45\7\47\4\45\1\47\1\45\1\47\1\45\1\47"+
    "\3\0\1\47\1\0\1\45\5\0\2\47\4\0\7\12"+
    "\1\67\26\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\2\12\1\70\4\12\1\71\26\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\4\12"+
    "\1\72\31\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\15\12\1\73\20\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\1\45\4\47\1\45"+
    "\3\47\1\74\1\47\1\45\7\47\4\45\1\47\1\45"+
    "\1\47\1\45\1\47\3\0\1\47\1\0\1\45\5\0"+
    "\2\47\4\0\1\45\2\47\1\75\1\47\1\45\5\47"+
    "\1\45\6\47\1\76\4\45\1\47\1\45\1\47\1\45"+
    "\1\77\3\0\1\47\1\0\1\45\5\0\2\47\4\0"+
    "\1\45\3\47\1\100\1\45\5\47\1\45\7\47\4\45"+
    "\1\47\1\45\1\47\1\45\1\47\3\0\1\47\1\0"+
    "\1\45\5\0\2\47\4\0\1\45\3\47\1\101\1\45"+
    "\5\47\1\45\7\47\4\45\1\47\1\45\1\47\1\45"+
    "\1\47\3\0\1\47\1\0\1\45\5\0\2\47\4\0"+
    "\11\12\1\102\24\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\1\45\4\47\1\45\5\47\1\45"+
    "\6\47\1\103\4\45\1\47\1\45\1\47\1\45\1\47"+
    "\3\0\1\47\1\0\1\45\5\0\2\47\4\0\2\12"+
    "\1\104\33\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\1\45\1\47\1\105\2\47\1\45\5\47"+
    "\1\45\7\47\4\45\1\47\1\45\1\47\1\45\1\47"+
    "\3\0\1\47\1\0\1\45\5\0\2\47\40\0\2\33"+
    "\1\106\52\0\2\107\1\106\52\0\2\110\17\0\2\12"+
    "\1\111\33\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\36\112\1\0\1\112\1\113\2\112\4\0"+
    "\2\112\4\0\1\45\4\47\1\45\5\47\1\45\7\47"+
    "\4\45\1\47\1\45\1\47\1\45\1\47\3\0\1\47"+
    "\1\0\1\45\5\0\2\47\26\0\1\41\32\0\2\47"+
    "\1\114\33\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\36\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\2\0\22\47\1\116\13\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\4\12\1\117"+
    "\31\12\1\0\1\12\1\0\1\12\5\0\3\12\1\52"+
    "\2\0\36\120\1\0\1\120\1\0\1\120\5\0\3\120"+
    "\3\0\22\12\1\121\13\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\17\12\1\122\16\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\14\12"+
    "\1\123\21\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\14\12\1\124\21\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\7\47\1\125\1\47"+
    "\1\126\24\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\16\47\1\127\17\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\2\12\1\130\33\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\11\12\1\131\24\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\3\12\1\132\13\12\1\133\16\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\3\12\1\134\13\12\1\135\1\136\15\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\14\47\1\137"+
    "\21\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\4\47\1\140\31\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\7\12\1\141\26\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\12\12"+
    "\1\142\23\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\22\12\1\143\13\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\6\12\1\144\27\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\1\12\1\145\34\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\22\47\1\146\13\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\17\47\1\147"+
    "\16\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\14\47\1\150\21\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\14\47\1\151\21\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\4\47"+
    "\1\152\31\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\3\47\1\153\13\47\1\154\16\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\4\12"+
    "\1\155\31\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\17\47\1\156\16\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\17\12\1\157\16\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\17\47\1\160\16\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\36\0\1\161\1\110\17\0\1\12\1\162"+
    "\34\12\1\0\1\12\1\0\1\12\5\0\3\12\1\52"+
    "\2\0\3\47\1\163\32\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\36\164\1\0\1\164\1\0"+
    "\1\164\5\0\3\164\3\0\3\47\1\165\32\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\6\12"+
    "\1\166\27\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\7\12\1\167\26\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\6\12\1\170\27\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\4\12\1\171\2\12\1\172\26\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\11\12\1\173\24\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\10\47\1\174\3\47\1\175\21\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\20\47\1\176\1\47"+
    "\1\177\13\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\1\47\1\200\34\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\1\12\1\201\34\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\22\12\1\202\13\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\14\12\1\203\21\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\1\12\1\204"+
    "\4\12\1\205\27\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\12\12\1\206\1\12\1\207\21\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\6\12\1\210\27\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\7\12\1\211\26\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\7\47\1\212"+
    "\26\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\22\47\1\213\13\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\1\12\1\214\34\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\4\12"+
    "\1\215\31\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\3\12\1\216\32\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\12\12\1\217\23\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\7\12\1\201\26\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\7\47\1\220\26\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\6\47\1\221"+
    "\27\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\7\47\1\222\26\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\11\47\1\223\24\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\6\47"+
    "\1\224\27\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\12\47\1\225\1\47\1\226\21\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\6\47"+
    "\1\227\27\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\22\12\1\230\13\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\1\47\1\231\4\47"+
    "\1\232\27\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\4\12\1\233\31\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\4\47\1\234\31\47"+
    "\1\0\1\47\1\0\1\47\5\0\3\47\1\115\2\0"+
    "\3\12\1\235\32\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\4\47\1\236\31\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\14\47\1\237"+
    "\21\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\11\12\1\240\24\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\6\12\1\145\27\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\22\12"+
    "\1\241\13\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\4\12\1\242\31\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\11\47\1\243\24\47"+
    "\1\0\1\47\1\0\1\47\5\0\3\47\1\115\2\0"+
    "\4\47\1\244\31\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\2\0\2\47\1\245\33\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\17\47\1\246"+
    "\16\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\11\47\1\247\24\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\17\12\1\250\16\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\2\12"+
    "\1\251\33\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\15\12\1\252\20\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\4\12\1\253\31\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\4\12\1\254\31\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\6\12\1\255\27\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\4\12\1\256"+
    "\31\12\1\0\1\12\1\0\1\12\5\0\3\12\1\52"+
    "\2\0\1\12\1\257\34\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\12\47\1\260\23\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\14\47"+
    "\1\261\21\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\4\12\1\262\31\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\22\12\1\263\13\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\14\12\1\264\21\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\2\12\1\265\33\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\11\47\1\266"+
    "\24\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\22\47\1\267\13\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\4\47\1\270\31\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\4\47"+
    "\1\271\31\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\6\47\1\272\27\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\4\47\1\273\31\47"+
    "\1\0\1\47\1\0\1\47\5\0\3\47\1\115\2\0"+
    "\14\12\1\274\21\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\15\47\1\275\20\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\4\47\1\276"+
    "\31\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\6\12\1\277\27\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\6\47\1\300\27\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\7\12"+
    "\1\301\26\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\6\47\1\302\27\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\16\12\1\303\17\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\17\12\1\304\16\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\22\12\1\305\13\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\4\47\1\306"+
    "\31\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\21\47\1\307\14\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\12\47\1\310\23\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\11\47"+
    "\1\311\24\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\17\47\1\310\16\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\11\12\1\312\24\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\22\12\1\313\13\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\11\12\1\314\24\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\27\12\1\315"+
    "\6\12\1\0\1\12\1\0\1\12\5\0\3\12\1\52"+
    "\2\0\15\12\1\316\20\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\27\12\1\317\6\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\20\12"+
    "\1\320\15\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\7\47\1\321\26\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\6\47\1\322\27\47"+
    "\1\0\1\47\1\0\1\47\5\0\3\47\1\115\2\0"+
    "\2\12\1\323\33\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\2\12\1\201\33\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\6\12\1\324"+
    "\27\12\1\0\1\12\1\0\1\12\5\0\3\12\1\52"+
    "\2\0\12\12\1\325\23\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\16\47\1\326\17\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\17\47"+
    "\1\327\16\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\22\47\1\330\13\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\15\47\1\331\20\47"+
    "\1\0\1\47\1\0\1\47\5\0\3\47\1\115\2\0"+
    "\27\47\1\332\6\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\2\0\6\12\1\333\27\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\11\47\1\334"+
    "\24\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\27\47\1\335\6\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\15\47\1\336\20\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\11\12"+
    "\1\337\24\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\4\12\1\340\31\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\12\12\1\341\23\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\12\47\1\342\23\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\2\0\11\47\1\245\24\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\2\47\1\343"+
    "\4\47\1\343\26\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\2\0\10\47\1\344\25\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\10\12\1\345"+
    "\25\12\1\0\1\12\1\0\1\12\5\0\3\12\1\52"+
    "\2\0\17\12\1\346\16\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\6\12\1\347\27\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\4\12"+
    "\1\350\31\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\17\12\1\351\16\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\4\12\1\352\31\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\4\12\1\353\31\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\3\47\1\354\32\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\2\47\1\355"+
    "\33\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\22\12\1\145\13\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\15\12\1\356\20\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\4\12"+
    "\1\357\31\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\11\47\1\360\24\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\4\47\1\361\31\47"+
    "\1\0\1\47\1\0\1\47\5\0\3\47\1\115\2\0"+
    "\12\47\1\362\23\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\2\0\17\47\1\363\16\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\4\47\1\364"+
    "\31\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\2\12\1\365\33\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\6\47\1\366\27\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\4\47"+
    "\1\367\31\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\17\47\1\370\16\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\6\12\1\371\27\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\3\12\1\372\32\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\4\12\1\373\31\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\2\47\1\374"+
    "\33\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\3\47\1\375\32\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\2\47\1\376\33\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\2\12"+
    "\1\377\33\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\11\12\1\u0100\24\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\22\12\1\u0101\13\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\14\12\1\u0102\21\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\22\12\1\u0103\13\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\6\12\1\u0104"+
    "\27\12\1\0\1\12\1\0\1\12\5\0\3\12\1\52"+
    "\2\0\3\47\1\u0105\32\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\17\12\1\u0106\16\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\6\12"+
    "\1\235\27\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\6\47\1\u0107\27\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\3\47\1\u0108\32\47"+
    "\1\0\1\47\1\0\1\47\5\0\3\47\1\115\2\0"+
    "\4\47\1\u0109\31\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\2\0\14\47\1\u010a\21\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\22\47\1\u010b"+
    "\13\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\3\12\1\u010c\32\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\22\47\1\u010d\13\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\14\47"+
    "\1\u010e\21\47\1\0\1\47\1\0\1\47\5\0\3\47"+
    "\1\115\2\0\12\47\1\u010f\23\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\1\47\1\u0110\34\47"+
    "\1\0\1\47\1\0\1\47\5\0\3\47\1\115\2\0"+
    "\1\12\1\u0111\34\12\1\0\1\12\1\0\1\12\5\0"+
    "\3\12\1\52\2\0\2\12\1\u0112\33\12\1\0\1\12"+
    "\1\0\1\12\5\0\3\12\1\52\2\0\14\12\1\u0113"+
    "\21\12\1\0\1\12\1\0\1\12\5\0\3\12\1\52"+
    "\2\0\7\12\1\u0114\26\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\14\12\1\u0115\21\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\14\12"+
    "\1\u0116\21\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\7\47\1\u0117\26\47\1\0\1\47\1\0"+
    "\1\47\5\0\3\47\1\115\2\0\14\47\1\u0118\21\47"+
    "\1\0\1\47\1\0\1\47\5\0\3\47\1\115\2\0"+
    "\14\47\1\u0119\21\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\2\0\7\47\1\u011a\26\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\4\47\1\u011b"+
    "\31\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\6\12\1\u011c\27\12\1\0\1\12\1\0\1\12"+
    "\5\0\3\12\1\52\2\0\2\12\1\u011d\33\12\1\0"+
    "\1\12\1\0\1\12\5\0\3\12\1\52\2\0\6\12"+
    "\1\u011e\27\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\2\12\1\u011f\33\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\7\12\1\u0120\26\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\6\47\1\u0121\27\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\2\0\2\47\1\u0122\33\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\2\0\2\47\1\u0123"+
    "\33\47\1\0\1\47\1\0\1\47\5\0\3\47\1\115"+
    "\2\0\6\47\1\u0124\27\47\1\0\1\47\1\0\1\47"+
    "\5\0\3\47\1\115\2\0\3\47\1\u0125\32\47\1\0"+
    "\1\47\1\0\1\47\5\0\3\47\1\115\2\0\6\12"+
    "\1\u0126\27\12\1\0\1\12\1\0\1\12\5\0\3\12"+
    "\1\52\2\0\6\12\1\u0127\27\12\1\0\1\12\1\0"+
    "\1\12\5\0\3\12\1\52\2\0\6\12\1\u0128\27\12"+
    "\1\0\1\12\1\0\1\12\5\0\3\12\1\52\2\0"+
    "\6\47\1\u0129\27\47\1\0\1\47\1\0\1\47\5\0"+
    "\3\47\1\115\2\0\6\47\1\u012a\27\47\1\0\1\47"+
    "\1\0\1\47\5\0\3\47\1\115\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11250];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\36\1\1\11\1\1\2\11\1\0\40\1"+
    "\3\0\1\1\1\0\1\11\1\1\1\0\335\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<token> tokens;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
      this.tokens = new ArrayList<>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 33: break;
          case 2: 
            { tokens.add(new token("TABULACION", yytext()));
            //return new Symbol(sym.TABULACION, new token("TABULACION", yytext()));
            } 
            // fall through
          case 34: break;
          case 3: 
            { tokens.add(new token("VARIABLE", yytext()));
            //return new Symbol(sym.VARIABLE, new token("VARIABLE", yytext()));
            } 
            // fall through
          case 35: break;
          case 4: 
            { tokens.add(new token("DECIMALES", yytext()));
            //return new Symbol(sym.DECIMALES, new token("DECIMALES", yytext()));
            } 
            // fall through
          case 36: break;
          case 5: 
            { //tokens.add(new token("ERROR", yytext()));
            //return new Symbol(sym.ERROR, new token("ERROR", yytext()));
            } 
            // fall through
          case 37: break;
          case 6: 
            { tokens.add(new token("FI", yytext()));
            //return new Symbol(sym.FI, new token("FI", yytext()));
            } 
            // fall through
          case 38: break;
          case 7: 
            { tokens.add(new token("EXCEPCION_VARIABLE", yytext()));
            //return new Symbol(sym.EXCEPTION_VARIABLE, new token("EXCEPCION_VARIABLE", yytext()));
            } 
            // fall through
          case 39: break;
          case 8: 
            { tokens.add(new token("IF", yytext()));
            //return new Symbol(sym.IF, new token("IF", yytext()));
            } 
            // fall through
          case 40: break;
          case 9: 
            { tokens.add(new token("CADENA", yytext()));
            //return new Symbol(sym.CADENA, new token("CADENA", yytext()));
            } 
            // fall through
          case 41: break;
          case 10: 
            { tokens.add(new token("REALES", yytext()));
            //return new Symbol(sym.REALES, new token("REALES", yytext()));
            } 
            // fall through
          case 42: break;
          case 11: 
            { tokens.add(new token("LEER", yytext()));
            //return new Symbol(sym.LEER, new token("LEER", yytext()));
            } 
            // fall through
          case 43: break;
          case 12: 
            { tokens.add(new token("SINO", yytext()));
            //return new Symbol(sym.SINO, new token("SINO", yytext()));
            } 
            // fall through
          case 44: break;
          case 13: 
            { tokens.add(new token("TIPOS_DATOS_FUNCIONES", yytext()));
            //return new Symbol(sym.TIPOS_DATOS_FUNCIONES, new token("TIPOS_DATOS_FUNCIONES", yytext()));
            } 
            // fall through
          case 45: break;
          case 14: 
            { tokens.add(new token("CLASE", yytext()));
            //return new Symbol(sym.CLASE, new token("CLASE", yytext()));
            } 
            // fall through
          case 46: break;
          case 15: 
            { tokens.add(new token("DESDE", yytext()));
            //return new Symbol(sym.DESDE, new token("DESDE", yytext()));
            } 
            // fall through
          case 47: break;
          case 16: 
            { tokens.add(new token("HACER", yytext()));
            //return new Symbol(sym.HACER, new token("HACER", yytext()));
            } 
            // fall through
          case 48: break;
          case 17: 
            { tokens.add(new token("BOOLEANO", yytext()));
            //return new Symbol(sym.BOOLEANO, new token("BOOLEANO", yytext()));
            } 
            // fall through
          case 49: break;
          case 18: 
            { tokens.add(new token("INCLUIR", yytext()));
            //return new Symbol(sym.INCLUIR, new token("INCLUIR", yytext()));
            } 
            // fall through
          case 50: break;
          case 19: 
            { tokens.add(new token("METODOS", yytext()));
            //return new Symbol(sym.METODOS, new token("METODOS", yytext()));
            } 
            // fall through
          case 51: break;
          case 20: 
            { tokens.add(new token("ESCRIBIR", yytext()));
            //return new Symbol(sym.ESCRIBIR, new token("ESCRIBIR", yytext()));
            } 
            // fall through
          case 52: break;
          case 21: 
            { tokens.add(new token("ENTONCES", yytext()));
            //return new Symbol(sym.ENTONCES, new token("ENTONCES", yytext()));
            } 
            // fall through
          case 53: break;
          case 22: 
            { tokens.add(new token("EXTIENDE", yytext()));
            //return new Symbol(sym.EXTIENDE, new token("EXTIENDE", yytext()));
            } 
            // fall through
          case 54: break;
          case 23: 
            { tokens.add(new token("PROPIEDADES_METODOS", yytext()));
            //return new Symbol(sym.PROPIEDADES_METODOS, new token("PROPIEDADES_METODOS", yytext()));
            } 
            // fall through
          case 55: break;
          case 24: 
            { tokens.add(new token("DEVOLVER", yytext()));
            //return new Symbol(sym.DEVOLVER, new token("DEVOLVER", yytext()));
            } 
            // fall through
          case 56: break;
          case 25: 
            { tokens.add(new token("MIENTRAS", yytext()));
            //return new Symbol(sym.MIENTRAS, new token("MIENTRAS", yytext()));
            } 
            // fall through
          case 57: break;
          case 26: 
            { tokens.add(new token("PRINCIPAL", yytext()));
            //return new Symbol(sym.PRINCIPAL, new token("PRINCIPAL", yytext()));
            } 
            // fall through
          case 58: break;
          case 27: 
            { tokens.add(new token("INSTANCIAR", yytext()));
            //return new Symbol(sym.INSTANCIAR, new token("INSTANCIAR", yytext()));
            } 
            // fall through
          case 59: break;
          case 28: 
            { tokens.add(new token("DESTRUCTOR", yytext()));
            //return new Symbol(sym.DESTRUCTOR, new token("DESTRUCTOR", yytext()));
            } 
            // fall through
          case 60: break;
          case 29: 
            { tokens.add(new token("CONSTRUCTOR", yytext()));
            //return new Symbol(sym.CONSTRUCTOR, new token("CONSTRUCTOR", yytext()));
            } 
            // fall through
          case 61: break;
          case 30: 
            { tokens.add(new token("PROPIEDADES", yytext()));
            //return new Symbol(sym.PROPIEDADES, new token("PROPIEDADES", yytext()));
            } 
            // fall through
          case 62: break;
          case 31: 
            { tokens.add(new token("INCREMENTAR", yytext()));
            //return new Symbol(sym.INCREMENTAR, new token("INCREMENTAR", yytext()));
            } 
            // fall through
          case 63: break;
          case 32: 
            { tokens.add(new token("DECREMENTAR", yytext()));
            //return new Symbol(sym.DECREMENTAR, new token("DECREMENTAR", yytext()));
            } 
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
