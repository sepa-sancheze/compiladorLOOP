/* The following code was generated by JFlex 1.7.0 */

package compiladorloop;

import java_cup.runtime.*;
import createdClasses.token;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/libraries/loop.jflex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\102\1\44\1\104\1\103\1\45\22\0\1\43\1\72\1\41"+
    "\2\0\1\61\2\0\1\52\1\53\1\57\1\55\1\54\1\56\1\37"+
    "\1\60\1\36\11\35\1\73\1\51\1\71\1\63\1\70\2\0\1\64"+
    "\1\100\1\1\1\27\1\25\2\42\1\33\1\31\2\42\1\26\1\14"+
    "\1\65\1\66\1\6\1\42\1\67\1\24\7\42\1\74\1\0\1\75"+
    "\1\0\1\50\1\0\1\3\1\17\1\20\1\13\1\5\1\40\1\22"+
    "\1\32\1\12\2\46\1\2\1\30\1\23\1\10\1\11\1\46\1\7"+
    "\1\4\1\15\1\16\1\21\1\46\1\34\1\46\1\101\1\76\1\47"+
    "\1\77\7\0\1\104\u0240\0\1\62\u1d61\0\1\104\1\104\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\4\2\1\1\4\2\1\1\5\2\4\1"+
    "\1\2\1\1\1\2\1\1\1\3\2\1\1\2\3\1"+
    "\1\4\1\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\2\1\1\20\1\21"+
    "\1\1\1\22\1\23\1\24\1\25\1\26\1\1\1\0"+
    "\3\27\2\2\1\27\1\2\1\30\3\2\2\27\5\2"+
    "\2\27\6\2\1\30\5\27\1\2\1\27\1\2\1\27"+
    "\3\0\1\2\1\0\1\31\1\0\1\32\1\33\1\34"+
    "\1\0\1\35\1\36\1\27\1\0\1\27\10\2\3\27"+
    "\10\2\2\27\7\2\7\27\1\2\1\27\1\2\1\27"+
    "\1\37\1\2\1\0\1\40\3\27\1\41\1\2\1\42"+
    "\1\43\4\2\5\27\1\44\1\45\10\2\2\27\6\2"+
    "\1\46\1\43\3\27\1\41\3\27\1\2\2\27\1\2"+
    "\1\27\1\2\1\47\1\50\1\27\5\2\5\27\4\2"+
    "\1\51\3\2\2\27\6\2\3\27\1\51\2\27\1\2"+
    "\2\27\2\52\1\53\1\27\2\2\1\54\2\2\4\27"+
    "\7\2\2\27\2\2\1\55\1\56\2\2\5\27\1\2"+
    "\3\27\4\2\3\27\2\2\1\57\4\2\1\60\1\27"+
    "\5\2\5\27\1\2\1\57\2\27\1\2\1\61\1\62"+
    "\1\63\1\27\1\64\1\27\5\2\1\65\1\66\1\67"+
    "\1\70\4\2\1\61\1\62\1\63\2\27\1\66\2\27"+
    "\1\71\1\27\2\72\10\2\5\27\1\73\1\2\1\74"+
    "\5\2\1\74\2\27\1\75\1\76\1\77\1\100\1\2"+
    "\1\101\1\2\1\75\1\100\1\77\2\2\1\102\1\2"+
    "\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\105\0\u08e5\0\105\0\105\0\105\0\105\0\u092a"+
    "\0\u096f\0\105\0\105\0\105\0\105\0\u09b4\0\u09f9\0\u0a3e"+
    "\0\105\0\105\0\u0a83\0\105\0\105\0\105\0\105\0\105"+
    "\0\u0ac8\0\u085b\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66"+
    "\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e"+
    "\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de"+
    "\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u078c\0\u0747"+
    "\0\u14c1\0\u1506\0\u0816\0\105\0\u154b\0\105\0\105\0\105"+
    "\0\u1590\0\u085b\0\105\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9"+
    "\0\u0c66\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44"+
    "\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u14c1\0\u20e2\0\u2127"+
    "\0\u085b\0\u216c\0\u161a\0\u21b1\0\u0114\0\u21f6\0\u0114\0\u0114"+
    "\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e"+
    "\0\u2463\0\u0114\0\u0114\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc"+
    "\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\u28b3\0\u0114\0\u0b52\0\u28f8\0\u293d\0\u2982"+
    "\0\u0b52\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u2bef\0\105\0\u0b52\0\u2c34\0\u2c79\0\u2cbe\0\u2d03"+
    "\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b"+
    "\0\u2f70\0\u2fb5\0\u2ffa\0\u0114\0\u303f\0\u3084\0\u30c9\0\u310e"+
    "\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336"+
    "\0\u337b\0\u33c0\0\u0b52\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519"+
    "\0\u0114\0\u0b52\0\u0114\0\u355e\0\u35a3\0\u35e8\0\u0114\0\u362d"+
    "\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\u3855"+
    "\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d"+
    "\0\u3ac2\0\u0114\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60"+
    "\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88"+
    "\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u0114\0\u406b"+
    "\0\u40b0\0\u40f5\0\u413a\0\u0b52\0\u417f\0\u41c4\0\u4209\0\u424e"+
    "\0\u4293\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476"+
    "\0\u0b52\0\u44bb\0\u4500\0\u4545\0\u0114\0\u0114\0\u0114\0\u458a"+
    "\0\u0b52\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3\0\u4728\0\u0114"+
    "\0\u0b52\0\u0114\0\u0114\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u0b52"+
    "\0\u0b52\0\u0b52\0\u4881\0\u48c6\0\u0114\0\u490b\0\u4950\0\u0114"+
    "\0\u4995\0\u0b52\0\u0114\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee"+
    "\0\u4b33\0\u4b78\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16"+
    "\0\u0114\0\u4d5b\0\u0114\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f\0\u4eb4"+
    "\0\u0b52\0\u4ef9\0\u4f3e\0\u0b52\0\u0b52\0\u0114\0\u0114\0\u4f83"+
    "\0\u0114\0\u4fc8\0\u0114\0\u0b52\0\u0b52\0\u500d\0\u5052\0\u0114"+
    "\0\u5097\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\13\1\14\1\15\1\16\1\5\1\17"+
    "\1\20\1\21\1\5\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\5\2\2"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\40\1\60\1\40\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\40"+
    "\1\5\1\71\110\0\1\72\1\73\3\74\1\72\1\74"+
    "\1\75\3\74\1\72\7\74\4\72\1\74\1\72\1\74"+
    "\1\72\1\74\3\0\1\74\1\0\1\72\3\0\1\74"+
    "\15\0\4\72\10\0\1\72\1\74\4\0\4\5\1\76"+
    "\2\5\1\77\26\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\36\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\4\5\1\101\4\5\1\102"+
    "\24\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\3\5\1\103\16\5"+
    "\1\104\10\5\1\105\2\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\1\72\4\74\1\72\1\106\4\74\1\72\1\74\1\107"+
    "\5\74\4\72\1\74\1\72\1\74\1\72\1\74\3\0"+
    "\1\74\1\0\1\72\3\0\1\74\15\0\4\72\10\0"+
    "\1\72\1\74\4\0\2\5\1\110\1\5\1\111\31\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\6\5\1\112\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\22\5\1\113\13\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\4\5\1\114\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\1\72\3\74\1\115\1\72\3\74\1\116\1\74"+
    "\1\72\7\74\4\72\1\74\1\72\1\74\1\72\1\74"+
    "\3\0\1\74\1\0\1\72\3\0\1\74\15\0\4\72"+
    "\10\0\1\72\1\74\4\0\2\5\1\117\33\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\7\5\1\120\26\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\2\5\1\121\4\5\1\122\26\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\4\5\1\123\31\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\15\5\1\124\20\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\1\72\4\74\1\72\3\74\1\125\1\74\1\72"+
    "\7\74\4\72\1\74\1\72\1\74\1\72\1\74\3\0"+
    "\1\74\1\0\1\72\3\0\1\74\15\0\4\72\10\0"+
    "\1\72\1\74\4\0\1\72\2\74\1\126\1\74\1\72"+
    "\5\74\1\72\6\74\1\127\4\72\1\74\1\72\1\74"+
    "\1\72\1\130\3\0\1\74\1\0\1\72\3\0\1\74"+
    "\15\0\4\72\10\0\1\72\1\74\4\0\1\72\3\74"+
    "\1\131\1\72\5\74\1\72\7\74\4\72\1\74\1\72"+
    "\1\74\1\72\1\74\3\0\1\74\1\0\1\72\3\0"+
    "\1\74\15\0\4\72\10\0\1\72\1\74\4\0\1\72"+
    "\3\74\1\132\1\72\5\74\1\72\7\74\4\72\1\74"+
    "\1\72\1\74\1\72\1\74\3\0\1\74\1\0\1\72"+
    "\3\0\1\74\15\0\4\72\10\0\1\72\1\74\4\0"+
    "\11\5\1\133\24\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\1\72"+
    "\4\74\1\72\5\74\1\72\6\74\1\134\4\72\1\74"+
    "\1\72\1\74\1\72\1\74\3\0\1\74\1\0\1\72"+
    "\3\0\1\74\15\0\4\72\10\0\1\72\1\74\4\0"+
    "\2\5\1\135\33\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\1\72"+
    "\1\74\1\136\2\74\1\72\5\74\1\72\7\74\4\72"+
    "\1\74\1\72\1\74\1\72\1\74\3\0\1\74\1\0"+
    "\1\72\3\0\1\74\15\0\4\72\10\0\1\72\1\74"+
    "\40\0\2\33\1\137\102\0\2\140\1\137\102\0\2\141"+
    "\47\0\2\5\1\142\33\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\36\143\1\0\1\143\1\144\2\143\2\0\1\143\15\0"+
    "\4\143\10\0\2\143\4\0\1\72\4\74\1\72\5\74"+
    "\1\72\7\74\4\72\1\74\1\72\1\74\1\72\1\74"+
    "\3\0\1\74\1\0\1\72\3\0\1\74\15\0\4\72"+
    "\10\0\1\72\1\74\46\0\1\145\105\0\1\42\115\0"+
    "\1\146\105\0\1\147\111\0\1\150\22\0\1\72\4\74"+
    "\1\72\5\74\1\72\7\74\4\72\1\74\1\72\1\74"+
    "\1\72\1\74\3\0\1\74\1\0\1\72\3\0\1\74"+
    "\15\0\1\72\1\151\2\72\10\0\1\72\1\74\4\0"+
    "\1\72\4\74\1\72\5\74\1\72\7\74\4\72\1\74"+
    "\1\72\1\74\1\72\1\74\3\0\1\74\1\0\1\72"+
    "\3\0\1\74\15\0\3\72\1\152\10\0\1\72\1\74"+
    "\66\0\1\153\124\0\1\42\2\0\2\74\1\154\33\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\36\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\22\74\1\156\13\74\1\0\1\74\1\0\1\74"+
    "\3\0\2\74\1\155\13\0\4\74\10\0\2\74\4\0"+
    "\4\5\1\157\31\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\21\5"+
    "\1\160\14\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\36\161\1\0"+
    "\1\161\1\0\1\161\3\0\2\161\14\0\4\161\10\0"+
    "\2\161\4\0\22\5\1\162\13\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\22\5\1\163\13\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\17\5\1\164\16\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\14\5"+
    "\1\165\21\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\14\5\1\166"+
    "\21\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\7\74\1\167\1\74"+
    "\1\170\24\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\16\74\1\171"+
    "\17\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\11\5\1\172\24\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\2\5\1\173\33\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\11\5\1\174\24\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\3\5\1\175\13\5\1\176\16\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\3\5\1\177\13\5\1\200\1\201"+
    "\15\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\14\74\1\202\21\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\4\74\1\203\31\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\22\5\1\204\13\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\7\5\1\205\26\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\12\5\1\206\23\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\3\5\1\207\16\5\1\210\13\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\6\5\1\211\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\1\5\1\212\34\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\22\74"+
    "\1\213\13\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\17\74\1\214"+
    "\16\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\14\74\1\215\21\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\14\74\1\216\21\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\4\74\1\217\31\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\3\74\1\220\13\74\1\221\16\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\4\5\1\222\31\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\17\74\1\223\16\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\17\5\1\224\16\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\17\74\1\225\16\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\40\0\1\226"+
    "\1\141\47\0\1\5\1\227\34\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\46\0\1\230\42\0\1\72\4\74\1\72\5\74\1\72"+
    "\7\74\3\72\1\231\1\74\1\72\1\74\1\72\1\74"+
    "\3\0\1\74\1\0\1\72\3\0\1\74\15\0\4\72"+
    "\10\0\1\72\1\74\4\0\3\74\1\232\32\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\36\233\1\0\1\233\1\0\1\233"+
    "\3\0\2\233\14\0\4\233\10\0\2\233\4\0\3\74"+
    "\1\234\32\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\6\5\1\235"+
    "\27\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\2\5\1\236\33\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\7\5\1\237\26\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\7\5\1\240\26\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\6\5\1\241\27\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\4\5\1\242\2\5\1\243\26\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\11\5\1\244\24\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\10\74\1\245\3\74\1\246\21\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\20\74\1\247\1\74\1\250\13\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\1\74\1\251\34\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\36\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\1\5\1\252\4\0"+
    "\1\5\1\253\34\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\22\5"+
    "\1\254\13\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\14\5\1\255"+
    "\21\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\1\5\1\256\4\5"+
    "\1\257\27\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\12\5\1\260"+
    "\1\5\1\261\21\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\6\5"+
    "\1\262\27\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\7\5\1\263"+
    "\26\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\7\74\1\264\26\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\22\74\1\265\13\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\21\5\1\266\14\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\1\5\1\267\34\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\4\5\1\270\31\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\4\5\1\271\31\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\3\5"+
    "\1\272\32\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\12\5\1\273"+
    "\23\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\7\5\1\274\26\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\7\74\1\275\26\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\6\74\1\276\27\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\7\74\1\277\26\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\11\74\1\300\24\74\1\0\1\74\1\0\1\74"+
    "\3\0\2\74\1\155\13\0\4\74\10\0\2\74\4\0"+
    "\6\74\1\301\27\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\12\74"+
    "\1\302\1\74\1\303\21\74\1\0\1\74\1\0\1\74"+
    "\3\0\2\74\1\155\13\0\4\74\10\0\2\74\4\0"+
    "\6\74\1\304\27\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\22\5"+
    "\1\305\13\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\1\74\1\306"+
    "\4\74\1\307\27\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\4\5"+
    "\1\310\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\4\74\1\311"+
    "\31\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\3\5\1\312\32\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\46\0\1\313\42\0\4\74\1\314"+
    "\31\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\14\74\1\315\21\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\6\5\1\316\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\11\5\1\317\24\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\6\5\1\320\27\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\22\5\1\321\13\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\4\5\1\322\31\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\11\74"+
    "\1\323\24\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\4\74\1\324"+
    "\31\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\2\74\1\325\33\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\17\74\1\326\16\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\11\74\1\327\24\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\17\5\1\330\16\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\2\5\1\331\33\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\15\5\1\332\20\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\4\5"+
    "\1\333\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\4\5\1\334"+
    "\31\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\6\5\1\335\27\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\4\5\1\336\31\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\1\5\1\337\34\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\12\74\1\340\23\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\14\74\1\341\21\74\1\0\1\74\1\0\1\74"+
    "\3\0\2\74\1\155\13\0\4\74\10\0\2\74\4\0"+
    "\4\5\1\342\31\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\4\5"+
    "\1\343\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\22\5\1\344"+
    "\13\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\22\5\1\345\13\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\14\5\1\346\21\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\2\5\1\347\33\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\11\74\1\350\24\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\22\74\1\351\13\74\1\0\1\74\1\0\1\74"+
    "\3\0\2\74\1\155\13\0\4\74\10\0\2\74\4\0"+
    "\4\74\1\352\31\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\4\74"+
    "\1\353\31\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\6\74\1\354"+
    "\27\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\4\74\1\355\31\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\14\5\1\356\21\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\15\74\1\357\20\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\4\74\1\360\31\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\6\5\1\361\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\6\74\1\362\27\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\7\5"+
    "\1\363\26\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\6\74\1\364"+
    "\27\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\11\5\1\365\24\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\16\5\1\366\17\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\7\5\1\367\26\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\17\5\1\370\16\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\22\5\1\371\13\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\4\74\1\372\31\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\21\74"+
    "\1\373\14\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\12\74\1\374"+
    "\23\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\11\74\1\375\24\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\17\74\1\374\16\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\11\5\1\376\24\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\22\5\1\377\13\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\11\5\1\u0100\24\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\27\5\1\u0101\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\15\5"+
    "\1\u0102\20\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\27\5\1\u0103"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\20\5\1\u0104\15\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\7\74\1\u0105\26\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\6\74\1\u0106\27\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\22\5\1\u0107\13\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\2\5\1\u0108\33\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\2\5\1\u0109\33\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\7\5"+
    "\1\u010a\26\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\6\5\1\u010b"+
    "\27\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\12\5\1\u010c\23\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\16\74\1\u010d\17\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\17\74\1\u010e\16\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\22\74\1\u010f\13\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\15\74\1\u0110\20\74\1\0\1\74\1\0\1\74"+
    "\3\0\2\74\1\155\13\0\4\74\10\0\2\74\4\0"+
    "\27\74\1\u0111\6\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\6\5"+
    "\1\u0112\27\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\11\74\1\u0113"+
    "\24\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\27\74\1\u0114\6\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\15\74\1\u0115\20\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\14\5\1\u0116\21\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\11\5\1\u0117\24\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\4\5\1\u0118\31\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\12\5\1\u0119\23\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\12\74"+
    "\1\u011a\23\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\11\74\1\325"+
    "\24\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\2\74\1\u011b\4\74"+
    "\1\u011b\26\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\10\74\1\u011c"+
    "\25\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\10\5\1\u011d\25\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\17\5\1\u011e\16\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\6\5\1\u011f\27\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\4\5\1\u0120\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\17\5\1\u0121\16\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\4\5\1\u0122\31\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\4\5"+
    "\1\u0123\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\3\74\1\u0124"+
    "\32\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\2\74\1\u0125\33\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\14\5\1\u0126\21\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\22\5\1\u0127\13\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\36\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\1\u0128\3\5\10\0\2\5\4\0"+
    "\15\5\1\u0129\20\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\4\5"+
    "\1\u012a\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\11\74\1\u012b"+
    "\24\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\4\74\1\u012c\31\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\12\74\1\u012d\23\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\17\74\1\u012e\16\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\4\74\1\u012f\31\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\2\5\1\u0130\33\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\6\74\1\u0131\27\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\4\74"+
    "\1\u0132\31\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\17\74\1\u0133"+
    "\16\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\27\5\1\u0134\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\6\5\1\u0135\27\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\3\5\1\u0136\32\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\4\5\1\u0137\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\2\74\1\u0138\33\74\1\0\1\74\1\0\1\74"+
    "\3\0\2\74\1\155\13\0\4\74\10\0\2\74\4\0"+
    "\3\74\1\u0139\32\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\2\74"+
    "\1\u013a\33\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\2\5\1\u013b"+
    "\33\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\11\5\1\u013c\24\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\22\5\1\u013d\13\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\14\5\1\u013e\21\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\22\5\1\u013f\13\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\6\5\1\u0140\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\3\74\1\u0141\32\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\4\5"+
    "\1\u0142\31\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\7\5\1\u0143"+
    "\26\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\24\5\1\u0144\11\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\3\5\1\u0145\10\0\1\u0146\1\5\4\0\17\5\1\u0147"+
    "\16\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\6\5\1\312\27\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\6\74\1\u0148\27\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\3\74\1\u0149\32\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\4\74\1\u014a\31\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\14\74\1\u014b\21\74\1\0\1\74\1\0\1\74"+
    "\3\0\2\74\1\155\13\0\4\74\10\0\2\74\4\0"+
    "\22\74\1\u014c\13\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\3\5"+
    "\1\u014d\32\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\22\74\1\u014e"+
    "\13\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\14\74\1\u014f\21\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\7\5\1\u0150\26\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\12\74\1\u0151\23\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\1\74\1\u0152\34\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\1\5\1\u0153\34\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\2\5\1\u0154\33\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\14\5"+
    "\1\u0155\21\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\7\5\1\u0156"+
    "\26\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\14\5\1\u0157\21\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\22\5\1\u0158\13\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\4\5\1\u0159\31\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\7\5\1\u015a\26\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\14\5\1\u015b\21\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\7\74\1\u015c\26\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\14\74"+
    "\1\u015d\21\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\14\74\1\u015e"+
    "\21\74\1\0\1\74\1\0\1\74\3\0\2\74\1\155"+
    "\13\0\4\74\10\0\2\74\4\0\7\74\1\u015f\26\74"+
    "\1\0\1\74\1\0\1\74\3\0\2\74\1\155\13\0"+
    "\4\74\10\0\2\74\4\0\4\74\1\u0160\31\74\1\0"+
    "\1\74\1\0\1\74\3\0\2\74\1\155\13\0\4\74"+
    "\10\0\2\74\4\0\6\5\1\u0161\27\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\2\5\1\u0162\33\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\6\5\1\u0163\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\2\5\1\u0164\33\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\100\13\0\4\5\10\0\2\5\4\0\14\5"+
    "\1\u0165\21\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\100\13\0\4\5\10\0\2\5\4\0\2\5\1\u0166"+
    "\33\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\1\5\1\u0167\34\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\7\5\1\u0168\26\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\6\74\1\u0169\27\74\1\0\1\74"+
    "\1\0\1\74\3\0\2\74\1\155\13\0\4\74\10\0"+
    "\2\74\4\0\2\74\1\u016a\33\74\1\0\1\74\1\0"+
    "\1\74\3\0\2\74\1\155\13\0\4\74\10\0\2\74"+
    "\4\0\2\74\1\u016b\33\74\1\0\1\74\1\0\1\74"+
    "\3\0\2\74\1\155\13\0\4\74\10\0\2\74\4\0"+
    "\6\74\1\u016c\27\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\3\74"+
    "\1\u016d\32\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\6\5\1\u016e"+
    "\27\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\6\5\1\u016f\27\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\4\5\1\u0170\31\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\1\5\1\u0171\34\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\4\5\1\u0172\31\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\4\0\6\5\1\u0173\27\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\100\13\0\4\5\10\0\2\5\4\0"+
    "\6\74\1\u0174\27\74\1\0\1\74\1\0\1\74\3\0"+
    "\2\74\1\155\13\0\4\74\10\0\2\74\4\0\6\74"+
    "\1\u0175\27\74\1\0\1\74\1\0\1\74\3\0\2\74"+
    "\1\155\13\0\4\74\10\0\2\74\4\0\6\5\1\u0176"+
    "\27\5\1\0\1\5\1\0\1\5\3\0\2\5\1\100"+
    "\13\0\4\5\10\0\2\5\4\0\2\5\1\u0177\33\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\100\13\0"+
    "\4\5\10\0\2\5\4\0\7\5\1\u0178\26\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\100\13\0\4\5"+
    "\10\0\2\5\4\0\22\5\1\u0179\13\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\100\13\0\4\5\10\0"+
    "\2\5\4\0\7\5\1\u017a\26\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\100\13\0\4\5\10\0\2\5"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20700];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\1\11\1\0\4\11\2\1\4\11"+
    "\3\1\2\11\1\1\5\11\1\1\1\0\44\1\3\0"+
    "\1\1\1\0\1\11\1\0\3\11\1\0\1\1\1\11"+
    "\1\1\1\0\52\1\1\0\62\1\1\11\257\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<token> tokens;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
      this.tokens = new ArrayList<>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { tokens.add(new token("ERROR", yytext()));
            //return new Symbol(sym.ERROR, new token("ERROR", yytext()));
            } 
            // fall through
          case 68: break;
          case 2: 
            { tokens.add(new token("VARIABLE", yytext()));
            //return new Symbol(sym.VARIABLE, new token("VARIABLE", yytext()));
            } 
            // fall through
          case 69: break;
          case 3: 
            { tokens.add(new token("DECIMALES", yytext()));
            //return new Symbol(sym.DECIMALES, new token("DECIMALES", yytext()));
            } 
            // fall through
          case 70: break;
          case 4: 
            { 
            } 
            // fall through
          case 71: break;
          case 5: 
            { tokens.add(new token("FI", yytext()));
            //return new Symbol(sym.FI, new token("FI", yytext()));
            } 
            // fall through
          case 72: break;
          case 6: 
            { tokens.add(new token("PARENTESIS1", yytext()));
            //return new Symbol(sym.PARENTESIS1, new token("PARENTESIS1", yytext()));
            } 
            // fall through
          case 73: break;
          case 7: 
            { tokens.add(new token("PARENTESIS2", yytext()));
            //return new Symbol(sym.PARENTESIS2, new token("PARENTESIS2", yytext()));
            } 
            // fall through
          case 74: break;
          case 8: 
            { tokens.add(new token("COMA", yytext()));
            //return new Symbol(sym.COMA, new token("COMA", yytext()));
            } 
            // fall through
          case 75: break;
          case 9: 
            { tokens.add(new token("SUMA", yytext()));
            //return new Symbol(sym.SUMA, new token("SUMA", yytext()));
            } 
            // fall through
          case 76: break;
          case 10: 
            { tokens.add(new token("RESTA", yytext()));
            //return new Symbol(sym.RESTA, new token("RESTA", yytext()));
            } 
            // fall through
          case 77: break;
          case 11: 
            { tokens.add(new token("MULTIPLICACION", yytext()));
            //return new Symbol(sym.MULTIPLICACION, new token("MULTIPLICACION", yytext()));
            } 
            // fall through
          case 78: break;
          case 12: 
            { tokens.add(new token("DIVISION", yytext()));
            //return new Symbol(sym.DIVISION, new token("DIVISION", yytext()));
            } 
            // fall through
          case 79: break;
          case 13: 
            { tokens.add(new token("MODULO", yytext()));
            //return new Symbol(sym.MODULO, new token("MODULO", yytext()));
            } 
            // fall through
          case 80: break;
          case 14: 
            { tokens.add(new token("EXPONENCIACION", yytext()));
            //return new Symbol(sym.EXPONENCIACION, new token("EXPONENCIACION", yytext()));
            } 
            // fall through
          case 81: break;
          case 15: 
            { tokens.add(new token("IGUAL", yytext()));
            //return new Symbol(sym.IGUAL, new token("IGUAL", yytext()));
            } 
            // fall through
          case 82: break;
          case 16: 
            { tokens.add(new token("MAYOR_QUE", yytext()));
            //return new Symbol(sym.MAYOR_QUE, new token("MAYOR_QUE", yytext()));
            } 
            // fall through
          case 83: break;
          case 17: 
            { tokens.add(new token("MENOR_QUE", yytext()));
            //return new Symbol(sym.MENOR_QUE, new token("MENOR_QUE", yytext()));
            } 
            // fall through
          case 84: break;
          case 18: 
            { tokens.add(new token("DOS_PUNTOS", yytext()));
            //return new Symbol(sym.DOS_PUNTOS, new token("DOS_PUNTOS", yytext()));
            } 
            // fall through
          case 85: break;
          case 19: 
            { tokens.add(new token("CORCHETE1", yytext()));
            //return new Symbol(sym.CORCHETE1, new token("CORCHETE1", yytext()));
            } 
            // fall through
          case 86: break;
          case 20: 
            { tokens.add(new token("CORCHETE2", yytext()));
            //return new Symbol(sym.CORCHETE2, new token("CORCHETE2", yytext()));
            } 
            // fall through
          case 87: break;
          case 21: 
            { tokens.add(new token("LLAVE1", yytext()));
            //return new Symbol(sym.LLAVE1, new token("LLAVE1", yytext()));
            } 
            // fall through
          case 88: break;
          case 22: 
            { tokens.add(new token("LLAVE2", yytext()));
            //return new Symbol(sym.LLAVE2, new token("LLAVE2", yytext()));
            } 
            // fall through
          case 89: break;
          case 23: 
            { tokens.add(new token("EXCEPCION_VARIABLE", yytext()));
            //return new Symbol(sym.EXCEPTION_VARIABLE, new token("EXCEPCION_VARIABLE", yytext()));
            } 
            // fall through
          case 90: break;
          case 24: 
            { tokens.add(new token("IF", yytext()));
            //return new Symbol(sym.IF, new token("IF", yytext()));
            } 
            // fall through
          case 91: break;
          case 25: 
            { tokens.add(new token("CADENA", yytext()));
            //return new Symbol(sym.CADENA, new token("CADENA", yytext()));
            } 
            // fall through
          case 92: break;
          case 26: 
            { tokens.add(new token("INCREMENTO", yytext()));
            //return new Symbol(sym.INCREMENTO, new token("INCREMENTO", yytext()));
            } 
            // fall through
          case 93: break;
          case 27: 
            { tokens.add(new token("DECREMENTO", yytext()));
            //return new Symbol(sym.DECREMENTO, new token("DECREMENTO", yytext()));
            } 
            // fall through
          case 94: break;
          case 28: 
            { tokens.add(new token("IGUAL_QUE", yytext()));
            //return new Symbol(sym.IGUAL_QUE, new token("IGUAL_QUE", yytext()));
            } 
            // fall through
          case 95: break;
          case 29: 
            { tokens.add(new token("OR", yytext()));
            //return new Symbol(sym.OR, new token("OR", yytext()));
            } 
            // fall through
          case 96: break;
          case 30: 
            { tokens.add(new token("DISTINTO_QUE", yytext()));
            //return new Symbol(sym.DISTINTO_QUE, new token("DISTINTO_QUE", yytext()));
            } 
            // fall through
          case 97: break;
          case 31: 
            { tokens.add(new token("REALES", yytext()));
            //return new Symbol(sym.REALES, new token("REALES", yytext()));
            } 
            // fall through
          case 98: break;
          case 32: 
            { tokens.add(new token("AND", yytext()));
            //return new Symbol(sym.AND, new token("AND", yytext()));
            } 
            // fall through
          case 99: break;
          case 33: 
            { tokens.add(new token("LEER", yytext()));
            //return new Symbol(sym.LEER, new token("LEER", yytext()));
            } 
            // fall through
          case 100: break;
          case 34: 
            { tokens.add(new token("SENO", yytext()));
            //return new Symbol(sym.SENO, new token("SENO", yytext()));
            } 
            // fall through
          case 101: break;
          case 35: 
            { tokens.add(new token("SINO", yytext()));
            //return new Symbol(sym.SINO, new token("SINO", yytext()));
            } 
            // fall through
          case 102: break;
          case 36: 
            { tokens.add(new token("RAIZ", yytext()));
            //return new Symbol(sym.RAIZ, new token("RAIZ", yytext()));
            } 
            // fall through
          case 103: break;
          case 37: 
            { tokens.add(new token("TIPO_REAL", yytext()));
            //return new Symbol(sym.TIPO_REAL, new token("TIPO_REAL", yytext()));
            } 
            // fall through
          case 104: break;
          case 38: 
            { tokens.add(new token("TIPO_NULO", yytext()));
            //return new Symbol(sym.TIPO_NULO, new token("TIPO_NULO", yytext()));
            } 
            // fall through
          case 105: break;
          case 39: 
            { tokens.add(new token("TABULACION", yytext()));
            //return new Symbol(sym.TABULACION, new token("TABULACION", yytext()));
            } 
            // fall through
          case 106: break;
          case 40: 
            { tokens.add(new token("CLASE", yytext()));
            //return new Symbol(sym.CLASE, new token("CLASE", yytext()));
            } 
            // fall through
          case 107: break;
          case 41: 
            { tokens.add(new token("DESDE", yytext()));
            //return new Symbol(sym.DESDE, new token("DESDE", yytext()));
            } 
            // fall through
          case 108: break;
          case 42: 
            { tokens.add(new token("HACER", yytext()));
            //return new Symbol(sym.HACER, new token("HACER", yytext()));
            } 
            // fall through
          case 109: break;
          case 43: 
            { tokens.add(new token("BOOLEANO", yytext()));
            //return new Symbol(sym.BOOLEANO, new token("BOOLEANO", yytext()));
            } 
            // fall through
          case 110: break;
          case 44: 
            { tokens.add(new token("TIPO_ENTERO", yytext()));
            //return new Symbol(sym.TIPO_ENTERO, new token("TIPO_ENTERO", yytext()));
            } 
            // fall through
          case 111: break;
          case 45: 
            { tokens.add(new token("TIPO_CADENA", yytext()));
            //return new Symbol(sym.TIPO_CADENA, new token("TIPO_CADENA", yytext()));
            } 
            // fall through
          case 112: break;
          case 46: 
            { tokens.add(new token("COSENO", yytext()));
            //return new Symbol(sym.COSENO, new token("COSENO", yytext()));
            } 
            // fall through
          case 113: break;
          case 47: 
            { tokens.add(new token("INCLUIR", yytext()));
            //return new Symbol(sym.INCLUIR, new token("INCLUIR", yytext()));
            } 
            // fall through
          case 114: break;
          case 48: 
            { tokens.add(new token("METODOS", yytext()));
            //return new Symbol(sym.METODOS, new token("METODOS", yytext()));
            } 
            // fall through
          case 115: break;
          case 49: 
            { tokens.add(new token("ESCRIBIR", yytext()));
            //return new Symbol(sym.ESCRIBIR, new token("ESCRIBIR", yytext()));
            } 
            // fall through
          case 116: break;
          case 50: 
            { tokens.add(new token("ENTONCES", yytext()));
            //return new Symbol(sym.ENTONCES, new token("ENTONCES", yytext()));
            } 
            // fall through
          case 117: break;
          case 51: 
            { tokens.add(new token("EXTIENDE", yytext()));
            //return new Symbol(sym.EXTIENDE, new token("EXTIENDE", yytext()));
            } 
            // fall through
          case 118: break;
          case 52: 
            { tokens.add(new token("PROPIEDADES_METODOS", yytext()));
            //return new Symbol(sym.PROPIEDADES_METODOS, new token("PROPIEDADES_METODOS", yytext()));
            } 
            // fall through
          case 119: break;
          case 53: 
            { tokens.add(new token("DEVOLVER", yytext()));
            //return new Symbol(sym.DEVOLVER, new token("DEVOLVER", yytext()));
            } 
            // fall through
          case 120: break;
          case 54: 
            { tokens.add(new token("MIENTRAS", yytext()));
            //return new Symbol(sym.MIENTRAS, new token("MIENTRAS", yytext()));
            } 
            // fall through
          case 121: break;
          case 55: 
            { tokens.add(new token("TANGENTE", yytext()));
            //return new Symbol(sym.TANGENTE, new token("TANGENTE", yytext()));
            } 
            // fall through
          case 122: break;
          case 56: 
            { tokens.add(new token("TIPO_BOOLEANO", yytext()));
            //return new Symbol(sym.TIPO_BOOLEANO, new token("TIPO_BOOLEANO", yytext()));
            } 
            // fall through
          case 123: break;
          case 57: 
            { tokens.add(new token("LOGARITMO", yytext()));
            //return new Symbol(sym.LOGARITMO, new token("LOGARITMO", yytext()));
            } 
            // fall through
          case 124: break;
          case 58: 
            { tokens.add(new token("PRINCIPAL", yytext()));
            //return new Symbol(sym.PRINCIPAL, new token("PRINCIPAL", yytext()));
            } 
            // fall through
          case 125: break;
          case 59: 
            { tokens.add(new token("INSTANCIAR", yytext()));
            //return new Symbol(sym.INSTANCIAR, new token("INSTANCIAR", yytext()));
            } 
            // fall through
          case 126: break;
          case 60: 
            { tokens.add(new token("DESTRUCTOR", yytext()));
            //return new Symbol(sym.DESTRUCTOR, new token("DESTRUCTOR", yytext()));
            } 
            // fall through
          case 127: break;
          case 61: 
            { tokens.add(new token("CONSTRUCTOR", yytext()));
            //return new Symbol(sym.CONSTRUCTOR, new token("CONSTRUCTOR", yytext()));
            } 
            // fall through
          case 128: break;
          case 62: 
            { tokens.add(new token("PROPIEDADES", yytext()));
            //return new Symbol(sym.PROPIEDADES, new token("PROPIEDADES", yytext()));
            } 
            // fall through
          case 129: break;
          case 63: 
            { tokens.add(new token("INCREMENTAR", yytext()));
            //return new Symbol(sym.INCREMENTAR, new token("INCREMENTAR", yytext()));
            } 
            // fall through
          case 130: break;
          case 64: 
            { tokens.add(new token("DECREMENTAR", yytext()));
            //return new Symbol(sym.DECREMENTAR, new token("DECREMENTAR", yytext()));
            } 
            // fall through
          case 131: break;
          case 65: 
            { tokens.add(new token("CADENA_A_REAL", yytext()));
            //return new Symbol(sym.CADENA_A_REAL, new token("CADENA_A_REAL", yytext()));
            } 
            // fall through
          case 132: break;
          case 66: 
            { tokens.add(new token("CADENA_A_ENTERO", yytext()));
            //return new Symbol(sym.CADENA_A_ENTERO, new token("CADENA_A_ENTERO", yytext()));
            } 
            // fall through
          case 133: break;
          case 67: 
            { tokens.add(new token("CADENA_A_BOOLEANO", yytext()));
            //return new Symbol(sym.CADENA_A_BOOLEANO, new token("CADENA_A_BOOLEANO", yytext()));
            } 
            // fall through
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
